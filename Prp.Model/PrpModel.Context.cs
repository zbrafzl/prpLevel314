//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Prp.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DbPrpEntities : DbContext
    {
        public DbPrpEntities()
            : base("name=DbPrpEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblAggregateMark> tblAggregateMarks { get; set; }
        public virtual DbSet<tblAggregateMarksFCP> tblAggregateMarksFCPS { get; set; }
        public virtual DbSet<tblAggregateMarksFCPSD> tblAggregateMarksFCPSDs { get; set; }
        public virtual DbSet<tblAggregateMarksFinal> tblAggregateMarksFinals { get; set; }
        public virtual DbSet<tblAggregateMarksMD> tblAggregateMarksMDs { get; set; }
        public virtual DbSet<tblAggregateMarksMD1> tblAggregateMarksMDS1 { get; set; }
        public virtual DbSet<tblAggregateMarksM> tblAggregateMarksMS { get; set; }
        public virtual DbSet<tblAlert> tblAlerts { get; set; }
        public virtual DbSet<tblApplicant> tblApplicants { get; set; }
        public virtual DbSet<tblApplicantAction> tblApplicantActions { get; set; }
        public virtual DbSet<tblApplicantActionStatu> tblApplicantActionStatus { get; set; }
        public virtual DbSet<tblApplicantApprovalStatu> tblApplicantApprovalStatus { get; set; }
        public virtual DbSet<tblApplicantCertificate> tblApplicantCertificates { get; set; }
        public virtual DbSet<tblApplicantCertificateFinal> tblApplicantCertificateFinals { get; set; }
        public virtual DbSet<tblApplicantDebarAmmendment> tblApplicantDebarAmmendments { get; set; }
        public virtual DbSet<tblApplicantDegree> tblApplicantDegrees { get; set; }
        public virtual DbSet<tblApplicantDegreeAttemptFinal> tblApplicantDegreeAttemptFinals { get; set; }
        public virtual DbSet<tblApplicantDegreeFinal> tblApplicantDegreeFinals { get; set; }
        public virtual DbSet<tblApplicantDegreeMark> tblApplicantDegreeMarks { get; set; }
        public virtual DbSet<tblApplicantDegreeMarksBk> tblApplicantDegreeMarksBks { get; set; }
        public virtual DbSet<tblApplicantDetail> tblApplicantDetails { get; set; }
        public virtual DbSet<tblApplicantDistinction> tblApplicantDistinctions { get; set; }
        public virtual DbSet<tblApplicantDistinctionFinal> tblApplicantDistinctionFinals { get; set; }
        public virtual DbSet<tblApplicantExperience> tblApplicantExperiences { get; set; }
        public virtual DbSet<tblApplicantExperienceFinal> tblApplicantExperienceFinals { get; set; }
        public virtual DbSet<tblApplicantExtension> tblApplicantExtensions { get; set; }
        public virtual DbSet<tblApplicantExtension_deleted> tblApplicantExtension_deleted { get; set; }
        public virtual DbSet<tblApplicantExtensionCorrespondence> tblApplicantExtensionCorrespondences { get; set; }
        public virtual DbSet<tblApplicantFinal> tblApplicantFinals { get; set; }
        public virtual DbSet<tblApplicantHouseJob> tblApplicantHouseJobs { get; set; }
        public virtual DbSet<tblApplicantHouseJobDetail> tblApplicantHouseJobDetails { get; set; }
        public virtual DbSet<tblApplicantHouseJobDetailFinal> tblApplicantHouseJobDetailFinals { get; set; }
        public virtual DbSet<tblApplicantHouseJobFinal> tblApplicantHouseJobFinals { get; set; }
        public virtual DbSet<tblApplicantHouseJobMark> tblApplicantHouseJobMarks { get; set; }
        public virtual DbSet<tblApplicantInfo> tblApplicantInfoes { get; set; }
        public virtual DbSet<tblApplicantInfoDualNational> tblApplicantInfoDualNationals { get; set; }
        public virtual DbSet<tblApplicantInfoDualNationalFinal> tblApplicantInfoDualNationalFinals { get; set; }
        public virtual DbSet<tblApplicantInfoFinal> tblApplicantInfoFinals { get; set; }
        public virtual DbSet<tblApplicantJoined> tblApplicantJoineds { get; set; }
        public virtual DbSet<tblApplicantLeave> tblApplicantLeaves { get; set; }
        public virtual DbSet<tblApplicantLeaveCorrespondence> tblApplicantLeaveCorrespondences { get; set; }
        public virtual DbSet<tblApplicantMark> tblApplicantMarks { get; set; }
        public virtual DbSet<tblApplicantMarksFinal> tblApplicantMarksFinals { get; set; }
        public virtual DbSet<tblApplicantQuery> tblApplicantQueries { get; set; }
        public virtual DbSet<tblApplicantQuota> tblApplicantQuotas { get; set; }
        public virtual DbSet<tblApplicantQuotaFinal> tblApplicantQuotaFinals { get; set; }
        public virtual DbSet<tblApplicantResearchPaper> tblApplicantResearchPapers { get; set; }
        public virtual DbSet<tblApplicantResearchPaperFinal> tblApplicantResearchPaperFinals { get; set; }
        public virtual DbSet<tblApplicantSelected> tblApplicantSelecteds { get; set; }
        public virtual DbSet<tblApplicantSpecialityInstituteQuotaMark> tblApplicantSpecialityInstituteQuotaMarks { get; set; }
        public virtual DbSet<tblApplicantSpecilityFinal> tblApplicantSpecilityFinals { get; set; }
        public virtual DbSet<tblApplicantSpecilityServiceHospital> tblApplicantSpecilityServiceHospitals { get; set; }
        public virtual DbSet<tblApplicantVoucher> tblApplicantVouchers { get; set; }
        public virtual DbSet<tblApplicantVoucherBank> tblApplicantVoucherBanks { get; set; }
        public virtual DbSet<tblApplicantVoucherBankBk> tblApplicantVoucherBankBks { get; set; }
        public virtual DbSet<tblApplicantVoucherBankFinal> tblApplicantVoucherBankFinals { get; set; }
        public virtual DbSet<tblApplicantVoucherFinal> tblApplicantVoucherFinals { get; set; }
        public virtual DbSet<tblApplicationStatusCount> tblApplicationStatusCounts { get; set; }
        public virtual DbSet<tblApplicationStatusFinal> tblApplicationStatusFinals { get; set; }
        public virtual DbSet<tblApplicationStatusLog> tblApplicationStatusLogs { get; set; }
        public virtual DbSet<tblBed> tblBeds { get; set; }
        public virtual DbSet<tblCalendar> tblCalendars { get; set; }
        public virtual DbSet<tblCalenderLevel> tblCalenderLevels { get; set; }
        public virtual DbSet<tblConsent0192023_011> tblConsent0192023_011 { get; set; }
        public virtual DbSet<tblConsentFinal> tblConsentFinals { get; set; }
        public virtual DbSet<tblConstant> tblConstants { get; set; }
        public virtual DbSet<tblContact> tblContacts { get; set; }
        public virtual DbSet<tblContactAttendence> tblContactAttendences { get; set; }
        public virtual DbSet<tblContactDoc> tblContactDocs { get; set; }
        public virtual DbSet<tblContactReply> tblContactReplies { get; set; }
        public virtual DbSet<tblContactStatu> tblContactStatus { get; set; }
        public virtual DbSet<tblContent> tblContents { get; set; }
        public virtual DbSet<tblDegreeMark> tblDegreeMarks { get; set; }
        public virtual DbSet<tblDepartment> tblDepartments { get; set; }
        public virtual DbSet<tblDiscipline> tblDisciplines { get; set; }
        public virtual DbSet<tblDisciplineProgram> tblDisciplinePrograms { get; set; }
        public virtual DbSet<tblDisciplineSpeciality> tblDisciplineSpecialities { get; set; }
        public virtual DbSet<tblEmail> tblEmails { get; set; }
        public virtual DbSet<tblEmailProcess> tblEmailProcesses { get; set; }
        public virtual DbSet<tblEmailTemplate> tblEmailTemplates { get; set; }
        public virtual DbSet<tblEmployee> tblEmployees { get; set; }
        public virtual DbSet<tblEmployeeDoc> tblEmployeeDocs { get; set; }
        public virtual DbSet<tblEmployeeExperience> tblEmployeeExperiences { get; set; }
        public virtual DbSet<tblEmployeeHospitalLog> tblEmployeeHospitalLogs { get; set; }
        public virtual DbSet<tblEmployeeSpeciality> tblEmployeeSpecialities { get; set; }
        public virtual DbSet<tblEmployeeTrainee> tblEmployeeTrainees { get; set; }
        public virtual DbSet<tblExperienceMark> tblExperienceMarks { get; set; }
        public virtual DbSet<tblExperienceMarksBk> tblExperienceMarksBks { get; set; }
        public virtual DbSet<tblFaculty> tblFaculties { get; set; }
        public virtual DbSet<tblFeedBack> tblFeedBacks { get; set; }
        public virtual DbSet<tblFrontDesk> tblFrontDesks { get; set; }
        public virtual DbSet<tblGazatFCP> tblGazatFCPS { get; set; }
        public virtual DbSet<tblGazatFCPSD> tblGazatFCPSDs { get; set; }
        public virtual DbSet<tblGazatMD> tblGazatMDs { get; set; }
        public virtual DbSet<tblGazatMD1> tblGazatMDS1 { get; set; }
        public virtual DbSet<tblGazatM> tblGazatMS { get; set; }
        public virtual DbSet<tblGazette> tblGazettes { get; set; }
        public virtual DbSet<tblGazetteAggregate> tblGazetteAggregates { get; set; }
        public virtual DbSet<tblGazetteFinal> tblGazetteFinals { get; set; }
        public virtual DbSet<tblGrievance> tblGrievances { get; set; }
        public virtual DbSet<tblGrievanceAction> tblGrievanceActions { get; set; }
        public virtual DbSet<tblGrievanceRemark> tblGrievanceRemarks { get; set; }
        public virtual DbSet<tblHospital> tblHospitals { get; set; }
        public virtual DbSet<tblHospitalDepartment> tblHospitalDepartments { get; set; }
        public virtual DbSet<tblHospitalDiscipline> tblHospitalDisciplines { get; set; }
        public virtual DbSet<tblHospitalEmployee> tblHospitalEmployees { get; set; }
        public virtual DbSet<tblHospitalSpeciality> tblHospitalSpecialities { get; set; }
        public virtual DbSet<tblHospitalUser> tblHospitalUsers { get; set; }
        public virtual DbSet<tblHouseJobPolicy> tblHouseJobPolicies { get; set; }
        public virtual DbSet<tblH> tblHs { get; set; }
        public virtual DbSet<tblHsApplication> tblHsApplications { get; set; }
        public virtual DbSet<tblHsApplicationDoc> tblHsApplicationDocs { get; set; }
        public virtual DbSet<tblHsApplicationPreference> tblHsApplicationPreferences { get; set; }
        public virtual DbSet<tblHsStep> tblHsSteps { get; set; }
        public virtual DbSet<tblHsStepCalendar> tblHsStepCalendars { get; set; }
        public virtual DbSet<tblInduction> tblInductions { get; set; }
        public virtual DbSet<tblInductionCalendar> tblInductionCalendars { get; set; }
        public virtual DbSet<tblInductionYear> tblInductionYears { get; set; }
        public virtual DbSet<tblInstitueHospital> tblInstitueHospitals { get; set; }
        public virtual DbSet<tblInstitute> tblInstitutes { get; set; }
        public virtual DbSet<tblInstituteUser> tblInstituteUsers { get; set; }
        public virtual DbSet<tblJobKey> tblJobKeys { get; set; }
        public virtual DbSet<tblLeave> tblLeaves { get; set; }
        public virtual DbSet<tblLeaveDoc> tblLeaveDocs { get; set; }
        public virtual DbSet<tblLeaveDocStatu> tblLeaveDocStatus { get; set; }
        public virtual DbSet<tblLeaveSanctioned> tblLeaveSanctioneds { get; set; }
        public virtual DbSet<tblLeaveStatu> tblLeaveStatus { get; set; }
        public virtual DbSet<tblLevel> tblLevels { get; set; }
        public virtual DbSet<tblMark> tblMarks { get; set; }
        public virtual DbSet<tblMarksApplicant> tblMarksApplicants { get; set; }
        public virtual DbSet<tblMarksApplicantDetail> tblMarksApplicantDetails { get; set; }
        public virtual DbSet<tblMarksFinal> tblMarksFinals { get; set; }
        public virtual DbSet<tblMarksPreference> tblMarksPreferences { get; set; }
        public virtual DbSet<tblMarksPreferenceFinal> tblMarksPreferenceFinals { get; set; }
        public virtual DbSet<tblMarksProfile> tblMarksProfiles { get; set; }
        public virtual DbSet<tblMarksProfileAggregate> tblMarksProfileAggregates { get; set; }
        public virtual DbSet<tblMarksProfileFinal> tblMarksProfileFinals { get; set; }
        public virtual DbSet<tblMarksProgram> tblMarksPrograms { get; set; }
        public virtual DbSet<tblMarksProgramFinal> tblMarksProgramFinals { get; set; }
        public virtual DbSet<tblMenu> tblMenus { get; set; }
        public virtual DbSet<tblMenuUser> tblMenuUsers { get; set; }
        public virtual DbSet<tblMenuUserType> tblMenuUserTypes { get; set; }
        public virtual DbSet<tblMeritApplicant> tblMeritApplicants { get; set; }
        public virtual DbSet<tblMeritApplicantFCP> tblMeritApplicantFCPS { get; set; }
        public virtual DbSet<tblMeritApplicantFCPSD> tblMeritApplicantFCPSDs { get; set; }
        public virtual DbSet<tblMeritApplicantFinal> tblMeritApplicantFinals { get; set; }
        public virtual DbSet<tblMeritApplicantMD> tblMeritApplicantMDs { get; set; }
        public virtual DbSet<tblMeritApplicantMD1> tblMeritApplicantMDS1 { get; set; }
        public virtual DbSet<tblMeritApplicantM> tblMeritApplicantMS { get; set; }
        public virtual DbSet<tblMeritRange> tblMeritRanges { get; set; }
        public virtual DbSet<tblMeritRangeFCP> tblMeritRangeFCPS { get; set; }
        public virtual DbSet<tblMeritRangeFCPSD> tblMeritRangeFCPSDs { get; set; }
        public virtual DbSet<tblMeritRangeFinal> tblMeritRangeFinals { get; set; }
        public virtual DbSet<tblMeritRangeMD> tblMeritRangeMDs { get; set; }
        public virtual DbSet<tblMeritRangeMD1> tblMeritRangeMDS1 { get; set; }
        public virtual DbSet<tblMeritRangeM> tblMeritRangeMS { get; set; }
        public virtual DbSet<tblOtp> tblOtps { get; set; }
        public virtual DbSet<tblPhase> tblPhases { get; set; }
        public virtual DbSet<tblPrefferenceMarksFCPSCurrent> tblPrefferenceMarksFCPSCurrents { get; set; }
        public virtual DbSet<tblRegion> tblRegions { get; set; }
        public virtual DbSet<tblResearchJournal> tblResearchJournals { get; set; }
        public virtual DbSet<tblResearchJournalActive> tblResearchJournalActives { get; set; }
        public virtual DbSet<tblResearchJournalsData> tblResearchJournalsDatas { get; set; }
        public virtual DbSet<tblResignation> tblResignations { get; set; }
        public virtual DbSet<tblRound> tblRounds { get; set; }
        public virtual DbSet<tblSM> tblSMS { get; set; }
        public virtual DbSet<tblSmsCampaign> tblSmsCampaigns { get; set; }
        public virtual DbSet<tblSmsProcess> tblSmsProcesses { get; set; }
        public virtual DbSet<tblSpeciality> tblSpecialities { get; set; }
        public virtual DbSet<tblSpecialityJob> tblSpecialityJobs { get; set; }
        public virtual DbSet<tblStatusEmail> tblStatusEmails { get; set; }
        public virtual DbSet<tblTestApps_> tblTestApps_ { get; set; }
        public virtual DbSet<tblTicker> tblTickers { get; set; }
        public virtual DbSet<tblTraineeHospital> tblTraineeHospitals { get; set; }
        public virtual DbSet<tblTraineeInfo> tblTraineeInfoes { get; set; }
        public virtual DbSet<tblUnit> tblUnits { get; set; }
        public virtual DbSet<tblUser> tblUsers { get; set; }
        public virtual DbSet<tblUserLog> tblUserLogs { get; set; }
        public virtual DbSet<tblVerficationCheckList> tblVerficationCheckLists { get; set; }
        public virtual DbSet<tblVfCheck> tblVfChecks { get; set; }
        public virtual DbSet<tblYearTraining> tblYearTrainings { get; set; }
        public virtual DbSet<tblAggregateMarksFF> tblAggregateMarksFFs { get; set; }
        public virtual DbSet<tblAggregateMarksTemp> tblAggregateMarksTemps { get; set; }
        public virtual DbSet<tblAppData> tblAppDatas { get; set; }
        public virtual DbSet<tblApplicantHouseJob_Previous> tblApplicantHouseJob_Previous { get; set; }
        public virtual DbSet<tblApplicantHouseJobDetail_temp> tblApplicantHouseJobDetail_temp { get; set; }
        public virtual DbSet<tblApplicantJoind_hardship> tblApplicantJoind_hardship { get; set; }
        public virtual DbSet<tblApplicantJoinedData> tblApplicantJoinedDatas { get; set; }
        public virtual DbSet<tblApplicantJoinedPreviou> tblApplicantJoinedPrevious { get; set; }
        public virtual DbSet<tblApplicantSpecility> tblApplicantSpecilities { get; set; }
        public virtual DbSet<tblApplicantSpecility_TEMP> tblApplicantSpecility_TEMP { get; set; }
        public virtual DbSet<tblApplicantVoucher_PreviousInduction> tblApplicantVoucher_PreviousInduction { get; set; }
        public virtual DbSet<tblApplicantVoucherTemp12152022> tblApplicantVoucherTemp12152022 { get; set; }
        public virtual DbSet<tblApplicationStatu> tblApplicationStatus { get; set; }
        public virtual DbSet<tblApplicationStatus_temp01> tblApplicationStatus_temp01 { get; set; }
        public virtual DbSet<tblApplicationStatus_temp011> tblApplicationStatus_temp011 { get; set; }
        public virtual DbSet<tblApplicationStatusCount_temp> tblApplicationStatusCount_temp { get; set; }
        public virtual DbSet<tblAPplicationstatusRound2> tblAPplicationstatusRound2 { get; set; }
        public virtual DbSet<tblAttendence> tblAttendences { get; set; }
        public virtual DbSet<tblConsent> tblConsents { get; set; }
        public virtual DbSet<tblConsent_0806> tblConsent_0806 { get; set; }
        public virtual DbSet<tblConsent_Log> tblConsent_Log { get; set; }
        public virtual DbSet<tblConsent_Temo818> tblConsent_Temo818 { get; set; }
        public virtual DbSet<tblconsent_temp> tblconsent_temp { get; set; }
        public virtual DbSet<tblConsent1402> tblConsent1402 { get; set; }
        public virtual DbSet<tblConsent1403> tblConsent1403 { get; set; }
        public virtual DbSet<tblConsentDeleted> tblConsentDeleteds { get; set; }
        public virtual DbSet<tblConsentHi> tblConsentHis { get; set; }
        public virtual DbSet<tblConsentOtpImage> tblConsentOtpImages { get; set; }
        public virtual DbSet<tblGazatFF> tblGazatFFs { get; set; }
        public virtual DbSet<tblGazette07112023> tblGazette07112023 { get; set; }
        public virtual DbSet<tblGazetteDetail> tblGazetteDetails { get; set; }
        public virtual DbSet<tblGazetteForeign> tblGazetteForeigns { get; set; }
        public virtual DbSet<tblMarks14> tblMarks14 { get; set; }
        public virtual DbSet<tblMeritApplicantFinal_Temp0811> tblMeritApplicantFinal_Temp0811 { get; set; }
        public virtual DbSet<tblMeritApplicantFinal_temp08122022> tblMeritApplicantFinal_temp08122022 { get; set; }
        public virtual DbSet<tblmeritfcpsTemp> tblmeritfcpsTemps { get; set; }
        public virtual DbSet<tblMeritRangeFF> tblMeritRangeFFs { get; set; }
        public virtual DbSet<tblPMDCNo> tblPMDCNoes { get; set; }
        public virtual DbSet<tblVfCheckApplicant> tblVfCheckApplicants { get; set; }
        public virtual DbSet<tvwApplicant> tvwApplicants { get; set; }
        public virtual DbSet<tvwApplicantCertificate> tvwApplicantCertificates { get; set; }
        public virtual DbSet<tvwApplicantDegree> tvwApplicantDegrees { get; set; }
        public virtual DbSet<tvwApplicantExperience> tvwApplicantExperiences { get; set; }
        public virtual DbSet<tvwApplicantHouseJob> tvwApplicantHouseJobs { get; set; }
        public virtual DbSet<tvwApplicantInfo> tvwApplicantInfoes { get; set; }
        public virtual DbSet<tvwApplicantInfoDetail> tvwApplicantInfoDetails { get; set; }
        public virtual DbSet<tvwApplicantInfoDualNational> tvwApplicantInfoDualNationals { get; set; }
        public virtual DbSet<tvwApplicantJoining> tvwApplicantJoinings { get; set; }
        public virtual DbSet<tvwApplicantNew> tvwApplicantNews { get; set; }
        public virtual DbSet<tvwApplicantQuota> tvwApplicantQuotas { get; set; }
        public virtual DbSet<tvwApplicantResearchPaper> tvwApplicantResearchPapers { get; set; }
        public virtual DbSet<tvwApplicantSelected> tvwApplicantSelecteds { get; set; }
        public virtual DbSet<tvwApplicantSpecialityInstitute> tvwApplicantSpecialityInstitutes { get; set; }
        public virtual DbSet<tvwApplicantSpecialityInstituteMark> tvwApplicantSpecialityInstituteMarks { get; set; }
        public virtual DbSet<tvwApplicantSpecility> tvwApplicantSpecilities { get; set; }
        public virtual DbSet<tvwApplicantVerification> tvwApplicantVerifications { get; set; }
        public virtual DbSet<tvwApplicantWithWrongSpecialityJobFCP> tvwApplicantWithWrongSpecialityJobFCPS { get; set; }
        public virtual DbSet<tvwApplicantWithWrongSpecialityJobFCPSD> tvwApplicantWithWrongSpecialityJobFCPSDs { get; set; }
        public virtual DbSet<tvwApplicantWithWrongSpecialityJobMD> tvwApplicantWithWrongSpecialityJobMDs { get; set; }
        public virtual DbSet<tvwApplicantWithWrongSpecialityJobMD1> tvwApplicantWithWrongSpecialityJobMDS1 { get; set; }
        public virtual DbSet<tvwApplicantWithWrongSpecialityJobM> tvwApplicantWithWrongSpecialityJobMS { get; set; }
        public virtual DbSet<tvwApplicationAmendment> tvwApplicationAmendments { get; set; }
        public virtual DbSet<tvwApplicationStatusLog> tvwApplicationStatusLogs { get; set; }
        public virtual DbSet<tvwBed> tvwBeds { get; set; }
        public virtual DbSet<tvwConstant> tvwConstants { get; set; }
        public virtual DbSet<tvwContact> tvwContacts { get; set; }
        public virtual DbSet<tvwContent> tvwContents { get; set; }
        public virtual DbSet<tvwDepartment> tvwDepartments { get; set; }
        public virtual DbSet<tvwDepartmentHospital> tvwDepartmentHospitals { get; set; }
        public virtual DbSet<tvwDisciplineSpeciality> tvwDisciplineSpecialities { get; set; }
        public virtual DbSet<tvwEmailProcessCount> tvwEmailProcessCounts { get; set; }
        public virtual DbSet<tvwEmailTemplate> tvwEmailTemplates { get; set; }
        public virtual DbSet<tvwEmailTemplateType> tvwEmailTemplateTypes { get; set; }
        public virtual DbSet<tvwEmployee> tvwEmployees { get; set; }
        public virtual DbSet<tvwEmployeeExperience> tvwEmployeeExperiences { get; set; }
        public virtual DbSet<tvwEmployeeInfo> tvwEmployeeInfoes { get; set; }
        public virtual DbSet<tvwEmployeeSpeciality> tvwEmployeeSpecialities { get; set; }
        public virtual DbSet<tvwEmployeeSpeciality1> tvwEmployeeSpecialities1 { get; set; }
        public virtual DbSet<tvwfApplicant> tvwfApplicants { get; set; }
        public virtual DbSet<tvwfApplicantCertificate> tvwfApplicantCertificates { get; set; }
        public virtual DbSet<tvwfApplicantDegree> tvwfApplicantDegrees { get; set; }
        public virtual DbSet<tvwfApplicantExperience> tvwfApplicantExperiences { get; set; }
        public virtual DbSet<tvwfApplicantInfo> tvwfApplicantInfoes { get; set; }
        public virtual DbSet<tvwfApplicantResearchPaper> tvwfApplicantResearchPapers { get; set; }
        public virtual DbSet<tvwfApplicantSpecility> tvwfApplicantSpecilities { get; set; }
        public virtual DbSet<tvwFeedback> tvwFeedbacks { get; set; }
        public virtual DbSet<tvwFrontDesk> tvwFrontDesks { get; set; }
        public virtual DbSet<tvwGazat> tvwGazats { get; set; }
        public virtual DbSet<tvwGazatFinalMeritMark> tvwGazatFinalMeritMarks { get; set; }
        public virtual DbSet<tvwGazatInitialApplicant> tvwGazatInitialApplicants { get; set; }
        public virtual DbSet<tvwGazatMeritFCP> tvwGazatMeritFCPS { get; set; }
        public virtual DbSet<tvwGazatMeritFCPSD> tvwGazatMeritFCPSDs { get; set; }
        public virtual DbSet<tvwGazatMeritMD> tvwGazatMeritMDs { get; set; }
        public virtual DbSet<tvwGazatMeritMD1> tvwGazatMeritMDS1 { get; set; }
        public virtual DbSet<tvwGazatMeritM> tvwGazatMeritMS { get; set; }
        public virtual DbSet<tvwGazette> tvwGazettes { get; set; }
        public virtual DbSet<tvwGazetteDetail> tvwGazetteDetails { get; set; }
        public virtual DbSet<tvwGrievance> tvwGrievances { get; set; }
        public virtual DbSet<tvwGrievanceStatusVerification> tvwGrievanceStatusVerifications { get; set; }
        public virtual DbSet<tvwGuardianType> tvwGuardianTypes { get; set; }
        public virtual DbSet<tvwHospital> tvwHospitals { get; set; }
        public virtual DbSet<tvwHospitalDepartment> tvwHospitalDepartments { get; set; }
        public virtual DbSet<tvwHospitalDiscipline> tvwHospitalDisciplines { get; set; }
        public virtual DbSet<tvwHospitalUser> tvwHospitalUsers { get; set; }
        public virtual DbSet<tvwHsApplication> tvwHsApplications { get; set; }
        public virtual DbSet<tvwInductionYear> tvwInductionYears { get; set; }
        public virtual DbSet<tvwInstitute> tvwInstitutes { get; set; }
        public virtual DbSet<tvwInstituteHospital> tvwInstituteHospitals { get; set; }
        public virtual DbSet<tvwLeaveApplicantStatusCount> tvwLeaveApplicantStatusCounts { get; set; }
        public virtual DbSet<tvwMenu> tvwMenus { get; set; }
        public virtual DbSet<tvwProgramType> tvwProgramTypes { get; set; }
        public virtual DbSet<tvwProvince> tvwProvinces { get; set; }
        public virtual DbSet<tvwQuotaType> tvwQuotaTypes { get; set; }
        public virtual DbSet<tvwRegion> tvwRegions { get; set; }
        public virtual DbSet<tvwRemaningJobsSpecialityFCP> tvwRemaningJobsSpecialityFCPS { get; set; }
        public virtual DbSet<tvwRemaningJobsSpecialityFCPSD> tvwRemaningJobsSpecialityFCPSDs { get; set; }
        public virtual DbSet<tvwRemaningJobsSpecialityFF> tvwRemaningJobsSpecialityFFs { get; set; }
        public virtual DbSet<tvwRemaningJobsSpecialityMD> tvwRemaningJobsSpecialityMDs { get; set; }
        public virtual DbSet<tvwRemaningJobsSpecialityMD1> tvwRemaningJobsSpecialityMDS1 { get; set; }
        public virtual DbSet<tvwRemaningJobsSpecialityM> tvwRemaningJobsSpecialityMS { get; set; }
        public virtual DbSet<tvwResearchJournal> tvwResearchJournals { get; set; }
        public virtual DbSet<tvwResignationType> tvwResignationTypes { get; set; }
        public virtual DbSet<tvwSM> tvwSMS { get; set; }
        public virtual DbSet<tvwSmsCampaign> tvwSmsCampaigns { get; set; }
        public virtual DbSet<tvwSmsProcess> tvwSmsProcesses { get; set; }
        public virtual DbSet<tvwSpecialityJob> tvwSpecialityJobs { get; set; }
        public virtual DbSet<tvwSpecialityJobActive> tvwSpecialityJobActives { get; set; }
        public virtual DbSet<tvwSpecialityJobSelected> tvwSpecialityJobSelecteds { get; set; }
        public virtual DbSet<tvwStatusAccount> tvwStatusAccounts { get; set; }
        public virtual DbSet<tvwStatusAmendment> tvwStatusAmendments { get; set; }
        public virtual DbSet<tvwStatusApplication> tvwStatusApplications { get; set; }
        public virtual DbSet<tvwStatusGrivianceVerify> tvwStatusGrivianceVerifies { get; set; }
        public virtual DbSet<tvwStatusType> tvwStatusTypes { get; set; }
        public virtual DbSet<tvwStatusVerification> tvwStatusVerifications { get; set; }
        public virtual DbSet<tvwTestApp> tvwTestApps { get; set; }
        public virtual DbSet<tvwTicker> tvwTickers { get; set; }
        public virtual DbSet<tvwTypeAction> tvwTypeActions { get; set; }
        public virtual DbSet<tvwTypeActionStatu> tvwTypeActionStatus { get; set; }
        public virtual DbSet<tvwTypeApplicantAttach> tvwTypeApplicantAttaches { get; set; }
        public virtual DbSet<tvwTypeBedsApproval> tvwTypeBedsApprovals { get; set; }
        public virtual DbSet<tvwTypeCalenderStep> tvwTypeCalenderSteps { get; set; }
        public virtual DbSet<tvwTypeConsent> tvwTypeConsents { get; set; }
        public virtual DbSet<tvwTypeCurrentStatu> tvwTypeCurrentStatus { get; set; }
        public virtual DbSet<tvwTypeDegree> tvwTypeDegrees { get; set; }
        public virtual DbSet<tvwTypeDesignationEmployee> tvwTypeDesignationEmployees { get; set; }
        public virtual DbSet<tvwTypeExperinceEmployee> tvwTypeExperinceEmployees { get; set; }
        public virtual DbSet<tvwTypeFaculty> tvwTypeFaculties { get; set; }
        public virtual DbSet<tvwTypeGender> tvwTypeGenders { get; set; }
        public virtual DbSet<tvwTypeHardshipStep> tvwTypeHardshipSteps { get; set; }
        public virtual DbSet<tvwTypeH> tvwTypeHs { get; set; }
        public virtual DbSet<tvwTypeInstitute> tvwTypeInstitutes { get; set; }
        public virtual DbSet<tvwTypeJobTypeExperience> tvwTypeJobTypeExperiences { get; set; }
        public virtual DbSet<tvwTypeLeave> tvwTypeLeaves { get; set; }
        public virtual DbSet<tvwTypeLeaveAssigner> tvwTypeLeaveAssigners { get; set; }
        public virtual DbSet<tvwTypeLeaveProcess> tvwTypeLeaveProcesses { get; set; }
        public virtual DbSet<tvwTypeLeaveStatu> tvwTypeLeaveStatus { get; set; }
        public virtual DbSet<tvwTypeLevel> tvwTypeLevels { get; set; }
        public virtual DbSet<tvwTypeMarksType> tvwTypeMarksTypes { get; set; }
        public virtual DbSet<tvwTypeMartialStatu> tvwTypeMartialStatus { get; set; }
        public virtual DbSet<tvwTypePage> tvwTypePages { get; set; }
        public virtual DbSet<tvwTypeProgram> tvwTypePrograms { get; set; }
        public virtual DbSet<tvwTypeProgramMultiple> tvwTypeProgramMultiples { get; set; }
        public virtual DbSet<tvwTypeProject> tvwTypeProjects { get; set; }
        public virtual DbSet<tvwTypeRelation> tvwTypeRelations { get; set; }
        public virtual DbSet<tvwTypeSM> tvwTypeSMS { get; set; }
        public virtual DbSet<tvwTypeSmsCampaignStatu> tvwTypeSmsCampaignStatus { get; set; }
        public virtual DbSet<tvwTypeTicker> tvwTypeTickers { get; set; }
        public virtual DbSet<tvwTypeTickerReff> tvwTypeTickerReffs { get; set; }
        public virtual DbSet<tvwUser> tvwUsers { get; set; }
        public virtual DbSet<tvwUserHospital> tvwUserHospitals { get; set; }
        public virtual DbSet<tvwVerficationCheckList> tvwVerficationCheckLists { get; set; }
        public virtual DbSet<tvwVfCheck> tvwVfChecks { get; set; }
        public virtual DbSet<tvwVoucherBankInfo> tvwVoucherBankInfoes { get; set; }
        public virtual DbSet<tvwVoucherInfo> tvwVoucherInfoes { get; set; }
    
        [DbFunction("DbPrpEntities", "fnApplicantAggregateMarksWithMerit")]
        public virtual IQueryable<fnApplicantAggregateMarksWithMerit_Result> fnApplicantAggregateMarksWithMerit(Nullable<int> inductionId, Nullable<int> typeId, Nullable<int> roundNo)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnApplicantAggregateMarksWithMerit_Result>("[DbPrpEntities].[fnApplicantAggregateMarksWithMerit](@inductionId, @typeId, @roundNo)", inductionIdParameter, typeIdParameter, roundNoParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnApplicantCheckIsValidForLogin")]
        public virtual IQueryable<fnApplicantCheckIsValidForLogin_Result> fnApplicantCheckIsValidForLogin(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnApplicantCheckIsValidForLogin_Result>("[DbPrpEntities].[fnApplicantCheckIsValidForLogin](@applicantId)", applicantIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnApplicantExperienceContinuousMarks")]
        public virtual IQueryable<fnApplicantExperienceContinuousMarks_Result> fnApplicantExperienceContinuousMarks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnApplicantExperienceContinuousMarks_Result>("[DbPrpEntities].[fnApplicantExperienceContinuousMarks]()");
        }
    
        [DbFunction("DbPrpEntities", "fnApplicantExperienceContinuousMarksNew")]
        public virtual IQueryable<fnApplicantExperienceContinuousMarksNew_Result> fnApplicantExperienceContinuousMarksNew()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnApplicantExperienceContinuousMarksNew_Result>("[DbPrpEntities].[fnApplicantExperienceContinuousMarksNew]()");
        }
    
        [DbFunction("DbPrpEntities", "fnApplicantExperienceMarksContinuousAddGap")]
        public virtual IQueryable<fnApplicantExperienceMarksContinuousAddGap_Result> fnApplicantExperienceMarksContinuousAddGap()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnApplicantExperienceMarksContinuousAddGap_Result>("[DbPrpEntities].[fnApplicantExperienceMarksContinuousAddGap]()");
        }
    
        [DbFunction("DbPrpEntities", "fnApplicantExperienceUpdateMarksByApplicant")]
        public virtual IQueryable<fnApplicantExperienceUpdateMarksByApplicant_Result> fnApplicantExperienceUpdateMarksByApplicant(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnApplicantExperienceUpdateMarksByApplicant_Result>("[DbPrpEntities].[fnApplicantExperienceUpdateMarksByApplicant](@applicantId)", applicantIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnApplicantGetByStatus")]
        public virtual IQueryable<fnApplicantGetByStatus_Result> fnApplicantGetByStatus(Nullable<int> inductionId, Nullable<int> statusTypeId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnApplicantGetByStatus_Result>("[DbPrpEntities].[fnApplicantGetByStatus](@inductionId, @statusTypeId)", inductionIdParameter, statusTypeIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnApplicantGetCompleted")]
        public virtual IQueryable<fnApplicantGetCompleted_Result> fnApplicantGetCompleted(Nullable<int> inductionId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnApplicantGetCompleted_Result>("[DbPrpEntities].[fnApplicantGetCompleted](@inductionId)", inductionIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnApplicantGetCompletedCurrent")]
        public virtual IQueryable<fnApplicantGetCompletedCurrent_Result> fnApplicantGetCompletedCurrent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnApplicantGetCompletedCurrent_Result>("[DbPrpEntities].[fnApplicantGetCompletedCurrent]()");
        }
    
        [DbFunction("DbPrpEntities", "fnApplicantGetValidApplicant")]
        public virtual IQueryable<fnApplicantGetValidApplicant_Result> fnApplicantGetValidApplicant(Nullable<int> inductionId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnApplicantGetValidApplicant_Result>("[DbPrpEntities].[fnApplicantGetValidApplicant](@inductionId)", inductionIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnApplicantGetValidCurrent")]
        public virtual IQueryable<fnApplicantGetValidCurrent_Result> fnApplicantGetValidCurrent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnApplicantGetValidCurrent_Result>("[DbPrpEntities].[fnApplicantGetValidCurrent]()");
        }
    
        [DbFunction("DbPrpEntities", "fnApplicantQuota")]
        public virtual IQueryable<fnApplicantQuota_Result> fnApplicantQuota()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnApplicantQuota_Result>("[DbPrpEntities].[fnApplicantQuota]()");
        }
    
        [DbFunction("DbPrpEntities", "fnApplicantStatusDebarGet")]
        public virtual IQueryable<fnApplicantStatusDebarGet_Result> fnApplicantStatusDebarGet(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnApplicantStatusDebarGet_Result>("[DbPrpEntities].[fnApplicantStatusDebarGet](@applicantId)", applicantIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnApplicantStatusGetAll")]
        public virtual IQueryable<fnApplicantStatusGetAll_Result> fnApplicantStatusGetAll(Nullable<int> inductionId, Nullable<int> statusTypeId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnApplicantStatusGetAll_Result>("[DbPrpEntities].[fnApplicantStatusGetAll](@inductionId, @statusTypeId)", inductionIdParameter, statusTypeIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnApplicantStatusGetAllFinal")]
        public virtual IQueryable<fnApplicantStatusGetAllFinal_Result> fnApplicantStatusGetAllFinal(Nullable<int> inductionId, Nullable<int> statusTypeId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnApplicantStatusGetAllFinal_Result>("[DbPrpEntities].[fnApplicantStatusGetAllFinal](@inductionId, @statusTypeId)", inductionIdParameter, statusTypeIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnApplicantStatusGetAmmendmend")]
        public virtual IQueryable<fnApplicantStatusGetAmmendmend_Result> fnApplicantStatusGetAmmendmend(Nullable<int> inductionId, Nullable<int> statusId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnApplicantStatusGetAmmendmend_Result>("[DbPrpEntities].[fnApplicantStatusGetAmmendmend](@inductionId, @statusId)", inductionIdParameter, statusIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnApplicantStatusGetProfile")]
        public virtual IQueryable<fnApplicantStatusGetProfile_Result> fnApplicantStatusGetProfile(Nullable<int> inductionId, Nullable<int> statusId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnApplicantStatusGetProfile_Result>("[DbPrpEntities].[fnApplicantStatusGetProfile](@inductionId, @statusId)", inductionIdParameter, statusIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnApplicantStatusGetProfileSubmitted")]
        public virtual IQueryable<fnApplicantStatusGetProfileSubmitted_Result> fnApplicantStatusGetProfileSubmitted(Nullable<int> inductionId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnApplicantStatusGetProfileSubmitted_Result>("[DbPrpEntities].[fnApplicantStatusGetProfileSubmitted](@inductionId)", inductionIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnApplicantStatusGetValid")]
        public virtual IQueryable<fnApplicantStatusGetValid_Result> fnApplicantStatusGetValid(Nullable<int> inductionId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnApplicantStatusGetValid_Result>("[DbPrpEntities].[fnApplicantStatusGetValid](@inductionId)", inductionIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnApplicantStatusGetVerification")]
        public virtual IQueryable<fnApplicantStatusGetVerification_Result> fnApplicantStatusGetVerification(Nullable<int> inductionId, Nullable<int> statusId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnApplicantStatusGetVerification_Result>("[DbPrpEntities].[fnApplicantStatusGetVerification](@inductionId, @statusId)", inductionIdParameter, statusIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnApplicantStatusGetVerificationByType")]
        public virtual IQueryable<fnApplicantStatusGetVerificationByType_Result> fnApplicantStatusGetVerificationByType(Nullable<int> inductionId, Nullable<int> statusTypeId, Nullable<int> statusId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnApplicantStatusGetVerificationByType_Result>("[DbPrpEntities].[fnApplicantStatusGetVerificationByType](@inductionId, @statusTypeId, @statusId)", inductionIdParameter, statusTypeIdParameter, statusIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnApplicantStatusGetVerificationRound2")]
        public virtual IQueryable<fnApplicantStatusGetVerificationRound2_Result> fnApplicantStatusGetVerificationRound2(Nullable<int> inductionId, Nullable<int> statusId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnApplicantStatusGetVerificationRound2_Result>("[DbPrpEntities].[fnApplicantStatusGetVerificationRound2](@inductionId, @statusId)", inductionIdParameter, statusIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnCalendarStatusGetByTypeAndApplicant")]
        public virtual IQueryable<fnCalendarStatusGetByTypeAndApplicant_Result> fnCalendarStatusGetByTypeAndApplicant(Nullable<int> inductionId, Nullable<int> calendarId, Nullable<int> applicantId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var calendarIdParameter = calendarId.HasValue ?
                new ObjectParameter("calendarId", calendarId) :
                new ObjectParameter("calendarId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnCalendarStatusGetByTypeAndApplicant_Result>("[DbPrpEntities].[fnCalendarStatusGetByTypeAndApplicant](@inductionId, @calendarId, @applicantId)", inductionIdParameter, calendarIdParameter, applicantIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnCheckMeritListStep08")]
        public virtual IQueryable<fnCheckMeritListStep08_Result> fnCheckMeritListStep08(Nullable<int> typeId, Nullable<int> roundNo)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnCheckMeritListStep08_Result>("[DbPrpEntities].[fnCheckMeritListStep08](@typeId, @roundNo)", typeIdParameter, roundNoParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnCheckMeritListStep11")]
        public virtual IQueryable<fnCheckMeritListStep11_Result> fnCheckMeritListStep11(Nullable<int> inductionId, Nullable<int> typeId, Nullable<int> roundNo)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnCheckMeritListStep11_Result>("[DbPrpEntities].[fnCheckMeritListStep11](@inductionId, @typeId, @roundNo)", inductionIdParameter, typeIdParameter, roundNoParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnConstantDDL")]
        public virtual IQueryable<fnConstantDDL_Result> fnConstantDDL(Nullable<int> inductionId, Nullable<int> parentId, Nullable<int> typeId, Nullable<int> reffId, string reffIds, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var reffIdsParameter = reffIds != null ?
                new ObjectParameter("reffIds", reffIds) :
                new ObjectParameter("reffIds", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnConstantDDL_Result>("[DbPrpEntities].[fnConstantDDL](@inductionId, @parentId, @typeId, @reffId, @reffIds, @search)", inductionIdParameter, parentIdParameter, typeIdParameter, reffIdParameter, reffIdsParameter, searchParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnConstantGetByType")]
        public virtual IQueryable<fnConstantGetByType_Result> fnConstantGetByType(Nullable<int> typeId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnConstantGetByType_Result>("[DbPrpEntities].[fnConstantGetByType](@typeId)", typeIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnCRegionGetByType")]
        public virtual IQueryable<fnCRegionGetByType_Result> fnCRegionGetByType(Nullable<int> typeId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnCRegionGetByType_Result>("[DbPrpEntities].[fnCRegionGetByType](@typeId)", typeIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnDepartmentDDL")]
        public virtual IQueryable<fnDepartmentDDL_Result> fnDepartmentDDL(Nullable<int> inductionId, Nullable<int> parentId, Nullable<int> typeId, Nullable<int> reffId, string reffIds, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var reffIdsParameter = reffIds != null ?
                new ObjectParameter("reffIds", reffIds) :
                new ObjectParameter("reffIds", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnDepartmentDDL_Result>("[DbPrpEntities].[fnDepartmentDDL](@inductionId, @parentId, @typeId, @reffId, @reffIds, @search)", inductionIdParameter, parentIdParameter, typeIdParameter, reffIdParameter, reffIdsParameter, searchParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnDisciplineDDL")]
        public virtual IQueryable<fnDisciplineDDL_Result> fnDisciplineDDL(Nullable<int> inductionId, Nullable<int> parentId, Nullable<int> typeId, Nullable<int> reffId, string reffIds, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var reffIdsParameter = reffIds != null ?
                new ObjectParameter("reffIds", reffIds) :
                new ObjectParameter("reffIds", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnDisciplineDDL_Result>("[DbPrpEntities].[fnDisciplineDDL](@inductionId, @parentId, @typeId, @reffId, @reffIds, @search)", inductionIdParameter, parentIdParameter, typeIdParameter, reffIdParameter, reffIdsParameter, searchParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnDisciplineProgram")]
        public virtual IQueryable<fnDisciplineProgram_Result> fnDisciplineProgram()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnDisciplineProgram_Result>("[DbPrpEntities].[fnDisciplineProgram]()");
        }
    
        [DbFunction("DbPrpEntities", "fnEmailCheckLimitRemaining")]
        public virtual IQueryable<fnEmailCheckLimitRemaining_Result> fnEmailCheckLimitRemaining(Nullable<int> typeId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnEmailCheckLimitRemaining_Result>("[DbPrpEntities].[fnEmailCheckLimitRemaining](@typeId)", typeIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnEmployeeDDL")]
        public virtual IQueryable<fnEmployeeDDL_Result> fnEmployeeDDL(Nullable<int> inductionId, Nullable<int> parentId, Nullable<int> typeId, Nullable<int> reffId, string reffIds, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var reffIdsParameter = reffIds != null ?
                new ObjectParameter("reffIds", reffIds) :
                new ObjectParameter("reffIds", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnEmployeeDDL_Result>("[DbPrpEntities].[fnEmployeeDDL](@inductionId, @parentId, @typeId, @reffId, @reffIds, @search)", inductionIdParameter, parentIdParameter, typeIdParameter, reffIdParameter, reffIdsParameter, searchParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnGetGazatMeritByTypeAndRound")]
        public virtual IQueryable<fnGetGazatMeritByTypeAndRound_Result> fnGetGazatMeritByTypeAndRound(Nullable<int> typeId, Nullable<int> roundNo)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetGazatMeritByTypeAndRound_Result>("[DbPrpEntities].[fnGetGazatMeritByTypeAndRound](@typeId, @roundNo)", typeIdParameter, roundNoParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnGetTblCurrentStatus")]
        public virtual IQueryable<fnGetTblCurrentStatus_Result> fnGetTblCurrentStatus(Nullable<int> statusId)
        {
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetTblCurrentStatus_Result>("[DbPrpEntities].[fnGetTblCurrentStatus](@statusId)", statusIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnGetTblHospitalByUser")]
        public virtual IQueryable<fnGetTblHospitalByUser_Result> fnGetTblHospitalByUser(Nullable<int> adminId)
        {
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetTblHospitalByUser_Result>("[DbPrpEntities].[fnGetTblHospitalByUser](@adminId)", adminIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnGetTblHospitalInduction")]
        public virtual IQueryable<fnGetTblHospitalInduction_Result> fnGetTblHospitalInduction(Nullable<int> hospitalId)
        {
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetTblHospitalInduction_Result>("[DbPrpEntities].[fnGetTblHospitalInduction](@hospitalId)", hospitalIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnGetTblInduction")]
        public virtual IQueryable<fnGetTblInduction_Result> fnGetTblInduction(Nullable<int> inductionId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetTblInduction_Result>("[DbPrpEntities].[fnGetTblInduction](@inductionId)", inductionIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnGetTblLeaveAssigner")]
        public virtual IQueryable<fnGetTblLeaveAssigner_Result> fnGetTblLeaveAssigner(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetTblLeaveAssigner_Result>("[DbPrpEntities].[fnGetTblLeaveAssigner](@id)", idParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnGetTblLeaveProcess")]
        public virtual IQueryable<fnGetTblLeaveProcess_Result> fnGetTblLeaveProcess(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetTblLeaveProcess_Result>("[DbPrpEntities].[fnGetTblLeaveProcess](@id)", idParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnGetTblLeaveStatus")]
        public virtual IQueryable<fnGetTblLeaveStatus_Result> fnGetTblLeaveStatus(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetTblLeaveStatus_Result>("[DbPrpEntities].[fnGetTblLeaveStatus](@id)", idParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnGetTblLeaveType")]
        public virtual IQueryable<fnGetTblLeaveType_Result> fnGetTblLeaveType(Nullable<int> typeId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetTblLeaveType_Result>("[DbPrpEntities].[fnGetTblLeaveType](@typeId)", typeIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnGetTblSpeciality")]
        public virtual IQueryable<fnGetTblSpeciality_Result> fnGetTblSpeciality(Nullable<int> specialityId)
        {
            var specialityIdParameter = specialityId.HasValue ?
                new ObjectParameter("specialityId", specialityId) :
                new ObjectParameter("specialityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetTblSpeciality_Result>("[DbPrpEntities].[fnGetTblSpeciality](@specialityId)", specialityIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnGetTblTypePrgarm")]
        public virtual IQueryable<fnGetTblTypePrgarm_Result> fnGetTblTypePrgarm(Nullable<int> typeId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetTblTypePrgarm_Result>("[DbPrpEntities].[fnGetTblTypePrgarm](@typeId)", typeIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnGetTblTypeProject")]
        public virtual IQueryable<fnGetTblTypeProject_Result> fnGetTblTypeProject(Nullable<int> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetTblTypeProject_Result>("[DbPrpEntities].[fnGetTblTypeProject](@projId)", projIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnGetTblTypeTicker")]
        public virtual IQueryable<fnGetTblTypeTicker_Result> fnGetTblTypeTicker(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetTblTypeTicker_Result>("[DbPrpEntities].[fnGetTblTypeTicker](@id)", idParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnGetTblTypeTickerReff")]
        public virtual IQueryable<fnGetTblTypeTickerReff_Result> fnGetTblTypeTickerReff(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetTblTypeTickerReff_Result>("[DbPrpEntities].[fnGetTblTypeTickerReff](@id)", idParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnGetTypeApplicantHasMerit")]
        public virtual IQueryable<fnGetTypeApplicantHasMerit_Result> fnGetTypeApplicantHasMerit(Nullable<int> applicantId, Nullable<int> round)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var roundParameter = round.HasValue ?
                new ObjectParameter("round", round) :
                new ObjectParameter("round", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetTypeApplicantHasMerit_Result>("[DbPrpEntities].[fnGetTypeApplicantHasMerit](@applicantId, @round)", applicantIdParameter, roundParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnGetTypeApplicantHasMeritForeign")]
        public virtual IQueryable<fnGetTypeApplicantHasMeritForeign_Result> fnGetTypeApplicantHasMeritForeign(Nullable<int> applicantId, Nullable<int> round)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var roundParameter = round.HasValue ?
                new ObjectParameter("round", round) :
                new ObjectParameter("round", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetTypeApplicantHasMeritForeign_Result>("[DbPrpEntities].[fnGetTypeApplicantHasMeritForeign](@applicantId, @round)", applicantIdParameter, roundParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnHospitalDDL")]
        public virtual IQueryable<fnHospitalDDL_Result> fnHospitalDDL(Nullable<int> inductionId, Nullable<int> parentId, Nullable<int> typeId, Nullable<int> reffId, string reffIds, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var reffIdsParameter = reffIds != null ?
                new ObjectParameter("reffIds", reffIds) :
                new ObjectParameter("reffIds", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnHospitalDDL_Result>("[DbPrpEntities].[fnHospitalDDL](@inductionId, @parentId, @typeId, @reffId, @reffIds, @search)", inductionIdParameter, parentIdParameter, typeIdParameter, reffIdParameter, reffIdsParameter, searchParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnInductionDDL")]
        public virtual IQueryable<fnInductionDDL_Result> fnInductionDDL(Nullable<int> inductionId, Nullable<int> parentId, Nullable<int> typeId, Nullable<int> reffId, string reffIds, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var reffIdsParameter = reffIds != null ?
                new ObjectParameter("reffIds", reffIds) :
                new ObjectParameter("reffIds", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnInductionDDL_Result>("[DbPrpEntities].[fnInductionDDL](@inductionId, @parentId, @typeId, @reffId, @reffIds, @search)", inductionIdParameter, parentIdParameter, typeIdParameter, reffIdParameter, reffIdsParameter, searchParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnInstituteDDL")]
        public virtual IQueryable<fnInstituteDDL_Result> fnInstituteDDL(Nullable<int> inductionId, Nullable<int> parentId, Nullable<int> typeId, Nullable<int> reffId, string reffIds, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var reffIdsParameter = reffIds != null ?
                new ObjectParameter("reffIds", reffIds) :
                new ObjectParameter("reffIds", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnInstituteDDL_Result>("[DbPrpEntities].[fnInstituteDDL](@inductionId, @parentId, @typeId, @reffId, @reffIds, @search)", inductionIdParameter, parentIdParameter, typeIdParameter, reffIdParameter, reffIdsParameter, searchParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnRegionDDL")]
        public virtual IQueryable<fnRegionDDL_Result> fnRegionDDL(Nullable<int> inductionId, Nullable<int> parentId, Nullable<int> typeId, Nullable<int> reffId, string reffIds, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var reffIdsParameter = reffIds != null ?
                new ObjectParameter("reffIds", reffIds) :
                new ObjectParameter("reffIds", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnRegionDDL_Result>("[DbPrpEntities].[fnRegionDDL](@inductionId, @parentId, @typeId, @reffId, @reffIds, @search)", inductionIdParameter, parentIdParameter, typeIdParameter, reffIdParameter, reffIdsParameter, searchParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnRemaningJobsSpecialityByType")]
        public virtual IQueryable<fnRemaningJobsSpecialityByType_Result> fnRemaningJobsSpecialityByType(Nullable<int> typeId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnRemaningJobsSpecialityByType_Result>("[DbPrpEntities].[fnRemaningJobsSpecialityByType](@typeId)", typeIdParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnSeatsOfferAndAppliedStatus")]
        public virtual IQueryable<fnSeatsOfferAndAppliedStatus_Result> fnSeatsOfferAndAppliedStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnSeatsOfferAndAppliedStatus_Result>("[DbPrpEntities].[fnSeatsOfferAndAppliedStatus]()");
        }
    
        [DbFunction("DbPrpEntities", "fnSpecialityDDL")]
        public virtual IQueryable<fnSpecialityDDL_Result> fnSpecialityDDL(Nullable<int> inductionId, Nullable<int> parentId, Nullable<int> typeId, Nullable<int> reffId, string reffIds, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var reffIdsParameter = reffIds != null ?
                new ObjectParameter("reffIds", reffIds) :
                new ObjectParameter("reffIds", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnSpecialityDDL_Result>("[DbPrpEntities].[fnSpecialityDDL](@inductionId, @parentId, @typeId, @reffId, @reffIds, @search)", inductionIdParameter, parentIdParameter, typeIdParameter, reffIdParameter, reffIdsParameter, searchParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnSplitString")]
        public virtual IQueryable<fnSplitString_Result> fnSplitString(string str, string spliter)
        {
            var strParameter = str != null ?
                new ObjectParameter("str", str) :
                new ObjectParameter("str", typeof(string));
    
            var spliterParameter = spliter != null ?
                new ObjectParameter("spliter", spliter) :
                new ObjectParameter("spliter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnSplitString_Result>("[DbPrpEntities].[fnSplitString](@str, @spliter)", strParameter, spliterParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnSplitStringByComma")]
        public virtual IQueryable<fnSplitStringByComma_Result> fnSplitStringByComma(string str)
        {
            var strParameter = str != null ?
                new ObjectParameter("str", str) :
                new ObjectParameter("str", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnSplitStringByComma_Result>("[DbPrpEntities].[fnSplitStringByComma](@str)", strParameter);
        }
    
        [DbFunction("DbPrpEntities", "fnUnitDDL")]
        public virtual IQueryable<fnUnitDDL_Result> fnUnitDDL(Nullable<int> inductionId, Nullable<int> parentId, Nullable<int> typeId, Nullable<int> reffId, string reffIds, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var reffIdsParameter = reffIds != null ?
                new ObjectParameter("reffIds", reffIds) :
                new ObjectParameter("reffIds", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnUnitDDL_Result>("[DbPrpEntities].[fnUnitDDL](@inductionId, @parentId, @typeId, @reffId, @reffIds, @search)", inductionIdParameter, parentIdParameter, typeIdParameter, reffIdParameter, reffIdsParameter, searchParameter);
        }
    
        public virtual ObjectResult<BedsSearch_Result> BedsSearch(Nullable<int> top, Nullable<int> pageNum, Nullable<int> inductionId, Nullable<int> hospitalId, Nullable<int> departmentId, Nullable<int> unitId, Nullable<int> programId, Nullable<int> disciplineId, Nullable<int> specialityId)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("unitId", unitId) :
                new ObjectParameter("unitId", typeof(int));
    
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("programId", programId) :
                new ObjectParameter("programId", typeof(int));
    
            var disciplineIdParameter = disciplineId.HasValue ?
                new ObjectParameter("disciplineId", disciplineId) :
                new ObjectParameter("disciplineId", typeof(int));
    
            var specialityIdParameter = specialityId.HasValue ?
                new ObjectParameter("specialityId", specialityId) :
                new ObjectParameter("specialityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BedsSearch_Result>("BedsSearch", topParameter, pageNumParameter, inductionIdParameter, hospitalIdParameter, departmentIdParameter, unitIdParameter, programIdParameter, disciplineIdParameter, specialityIdParameter);
        }
    
        public virtual int ReRunGazetteAggregate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReRunGazetteAggregate");
        }
    
        public virtual int ReRunGazetteAggregateByApplicant(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReRunGazetteAggregateByApplicant", applicantIdParameter);
        }
    
        public virtual int ReRunGazetteAggregateByType(Nullable<int> typeId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReRunGazetteAggregateByType", typeIdParameter);
        }
    
        public virtual int ReRunGazetteDetailByType(Nullable<int> typeId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReRunGazetteDetailByType", typeIdParameter);
        }
    
        public virtual int RunMeritCompleteFCPS(Nullable<int> roundNo, Nullable<int> isComplete)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var isCompleteParameter = isComplete.HasValue ?
                new ObjectParameter("IsComplete", isComplete) :
                new ObjectParameter("IsComplete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RunMeritCompleteFCPS", roundNoParameter, isCompleteParameter);
        }
    
        public virtual int RunMeritCompleteFCPSD(Nullable<int> roundNo, Nullable<int> isComplete)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var isCompleteParameter = isComplete.HasValue ?
                new ObjectParameter("IsComplete", isComplete) :
                new ObjectParameter("IsComplete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RunMeritCompleteFCPSD", roundNoParameter, isCompleteParameter);
        }
    
        public virtual int RunMeritCompleteFCPSDfs(Nullable<int> roundNo, Nullable<int> isComplete)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var isCompleteParameter = isComplete.HasValue ?
                new ObjectParameter("IsComplete", isComplete) :
                new ObjectParameter("IsComplete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RunMeritCompleteFCPSDfs", roundNoParameter, isCompleteParameter);
        }
    
        public virtual int RunMeritCompleteMD(Nullable<int> roundNo, Nullable<int> isComplete)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var isCompleteParameter = isComplete.HasValue ?
                new ObjectParameter("IsComplete", isComplete) :
                new ObjectParameter("IsComplete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RunMeritCompleteMD", roundNoParameter, isCompleteParameter);
        }
    
        public virtual int RunMeritCompleteMDS(Nullable<int> roundNo, Nullable<int> isComplete)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var isCompleteParameter = isComplete.HasValue ?
                new ObjectParameter("IsComplete", isComplete) :
                new ObjectParameter("IsComplete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RunMeritCompleteMDS", roundNoParameter, isCompleteParameter);
        }
    
        public virtual int RunMeritCompleteMS(Nullable<int> roundNo, Nullable<int> isComplete)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var isCompleteParameter = isComplete.HasValue ?
                new ObjectParameter("IsComplete", isComplete) :
                new ObjectParameter("IsComplete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RunMeritCompleteMS", roundNoParameter, isCompleteParameter);
        }
    
        public virtual ObjectResult<spAccountStatusUpdate_Result> spAccountStatusUpdate(Nullable<int> applicantId, Nullable<int> statusId, Nullable<int> adminId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAccountStatusUpdate_Result>("spAccountStatusUpdate", applicantIdParameter, statusIdParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spActionAddUpdate_Result> spActionAddUpdate(Nullable<int> actionId, Nullable<int> applicantId, Nullable<int> specialityJobId, string image, Nullable<int> typeId, Nullable<int> categoryId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> isDocsCollected, Nullable<int> statusId, string remarks, Nullable<int> adminId)
        {
            var actionIdParameter = actionId.HasValue ?
                new ObjectParameter("actionId", actionId) :
                new ObjectParameter("actionId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var specialityJobIdParameter = specialityJobId.HasValue ?
                new ObjectParameter("specialityJobId", specialityJobId) :
                new ObjectParameter("specialityJobId", typeof(int));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var isDocsCollectedParameter = isDocsCollected.HasValue ?
                new ObjectParameter("isDocsCollected", isDocsCollected) :
                new ObjectParameter("isDocsCollected", typeof(bool));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spActionAddUpdate_Result>("spActionAddUpdate", actionIdParameter, applicantIdParameter, specialityJobIdParameter, imageParameter, typeIdParameter, categoryIdParameter, startDateParameter, endDateParameter, isDocsCollectedParameter, statusIdParameter, remarksParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spActionSearch_Result> spActionSearch(Nullable<int> pageNum, Nullable<int> top, Nullable<int> inductionId, Nullable<int> typeId, Nullable<int> instituteId, string search)
        {
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var instituteIdParameter = instituteId.HasValue ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spActionSearch_Result>("spActionSearch", pageNumParameter, topParameter, inductionIdParameter, typeIdParameter, instituteIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spActionStatusAdd_Result> spActionStatusAdd(Nullable<int> actionId, Nullable<int> statusId, string remarks, string image, Nullable<int> adminId)
        {
            var actionIdParameter = actionId.HasValue ?
                new ObjectParameter("actionId", actionId) :
                new ObjectParameter("actionId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spActionStatusAdd_Result>("spActionStatusAdd", actionIdParameter, statusIdParameter, remarksParameter, imageParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spAdminLogin_Result> spAdminLogin(string emailId, string password)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAdminLogin_Result>("spAdminLogin", emailIdParameter, passwordParameter);
        }
    
        public virtual ObjectResult<spApplicantActionGetByApplicantId_Result> spApplicantActionGetByApplicantId(Nullable<int> applicantId, Nullable<int> typeId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantActionGetByApplicantId_Result>("spApplicantActionGetByApplicantId", applicantIdParameter, typeIdParameter);
        }
    
        public virtual ObjectResult<spApplicantAddUpdateInfo_Result> spApplicantAddUpdateInfo(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId, string fatherName, Nullable<int> genderId, Nullable<int> disableId, Nullable<System.DateTime> dob, Nullable<System.DateTime> pmdcExpiryDate, Nullable<System.DateTime> mbbsPassingDate, Nullable<int> countryIdDegreePassing, Nullable<int> dualNationalityType, Nullable<int> countryId, Nullable<int> districtId, string districtName, Nullable<int> domicileProvinceId, Nullable<int> domicileDistrictId, string address, string cnicNo, Nullable<System.DateTime> cnicExpiryDate, string cnicPicFront, string cnicPicBack, string domicilePicFront, string domicilePicBack, string pic, string disableImage)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("fatherName", fatherName) :
                new ObjectParameter("fatherName", typeof(string));
    
            var genderIdParameter = genderId.HasValue ?
                new ObjectParameter("genderId", genderId) :
                new ObjectParameter("genderId", typeof(int));
    
            var disableIdParameter = disableId.HasValue ?
                new ObjectParameter("disableId", disableId) :
                new ObjectParameter("disableId", typeof(int));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var pmdcExpiryDateParameter = pmdcExpiryDate.HasValue ?
                new ObjectParameter("pmdcExpiryDate", pmdcExpiryDate) :
                new ObjectParameter("pmdcExpiryDate", typeof(System.DateTime));
    
            var mbbsPassingDateParameter = mbbsPassingDate.HasValue ?
                new ObjectParameter("mbbsPassingDate", mbbsPassingDate) :
                new ObjectParameter("mbbsPassingDate", typeof(System.DateTime));
    
            var countryIdDegreePassingParameter = countryIdDegreePassing.HasValue ?
                new ObjectParameter("countryIdDegreePassing", countryIdDegreePassing) :
                new ObjectParameter("countryIdDegreePassing", typeof(int));
    
            var dualNationalityTypeParameter = dualNationalityType.HasValue ?
                new ObjectParameter("dualNationalityType", dualNationalityType) :
                new ObjectParameter("dualNationalityType", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("districtId", districtId) :
                new ObjectParameter("districtId", typeof(int));
    
            var districtNameParameter = districtName != null ?
                new ObjectParameter("districtName", districtName) :
                new ObjectParameter("districtName", typeof(string));
    
            var domicileProvinceIdParameter = domicileProvinceId.HasValue ?
                new ObjectParameter("domicileProvinceId", domicileProvinceId) :
                new ObjectParameter("domicileProvinceId", typeof(int));
    
            var domicileDistrictIdParameter = domicileDistrictId.HasValue ?
                new ObjectParameter("domicileDistrictId", domicileDistrictId) :
                new ObjectParameter("domicileDistrictId", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var cnicNoParameter = cnicNo != null ?
                new ObjectParameter("cnicNo", cnicNo) :
                new ObjectParameter("cnicNo", typeof(string));
    
            var cnicExpiryDateParameter = cnicExpiryDate.HasValue ?
                new ObjectParameter("cnicExpiryDate", cnicExpiryDate) :
                new ObjectParameter("cnicExpiryDate", typeof(System.DateTime));
    
            var cnicPicFrontParameter = cnicPicFront != null ?
                new ObjectParameter("cnicPicFront", cnicPicFront) :
                new ObjectParameter("cnicPicFront", typeof(string));
    
            var cnicPicBackParameter = cnicPicBack != null ?
                new ObjectParameter("cnicPicBack", cnicPicBack) :
                new ObjectParameter("cnicPicBack", typeof(string));
    
            var domicilePicFrontParameter = domicilePicFront != null ?
                new ObjectParameter("domicilePicFront", domicilePicFront) :
                new ObjectParameter("domicilePicFront", typeof(string));
    
            var domicilePicBackParameter = domicilePicBack != null ?
                new ObjectParameter("domicilePicBack", domicilePicBack) :
                new ObjectParameter("domicilePicBack", typeof(string));
    
            var picParameter = pic != null ?
                new ObjectParameter("pic", pic) :
                new ObjectParameter("pic", typeof(string));
    
            var disableImageParameter = disableImage != null ?
                new ObjectParameter("disableImage", disableImage) :
                new ObjectParameter("disableImage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantAddUpdateInfo_Result>("spApplicantAddUpdateInfo", inductionIdParameter, phaseIdParameter, applicantIdParameter, fatherNameParameter, genderIdParameter, disableIdParameter, dobParameter, pmdcExpiryDateParameter, mbbsPassingDateParameter, countryIdDegreePassingParameter, dualNationalityTypeParameter, countryIdParameter, districtIdParameter, districtNameParameter, domicileProvinceIdParameter, domicileDistrictIdParameter, addressParameter, cnicNoParameter, cnicExpiryDateParameter, cnicPicFrontParameter, cnicPicBackParameter, domicilePicFrontParameter, domicilePicBackParameter, picParameter, disableImageParameter);
        }
    
        public virtual int spApplicantAddUpdateInfoAdmin(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId, string fatherName, Nullable<int> genderId, Nullable<int> disableId, Nullable<System.DateTime> dob, Nullable<System.DateTime> pmdcExpiryDate, Nullable<System.DateTime> mbbsPassingDate, Nullable<int> countryIdDegreePassing, Nullable<int> countryId, Nullable<int> districtId, string districtName, Nullable<int> domicileProvinceId, Nullable<int> domicileDistrictId, string address, string cnicNo, Nullable<System.DateTime> cnicExpiryDate, string cnicPicFront, string cnicPicBack, string domicilePicFront, string domicilePicBack, string pic, string disableImage, Nullable<int> adminId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("fatherName", fatherName) :
                new ObjectParameter("fatherName", typeof(string));
    
            var genderIdParameter = genderId.HasValue ?
                new ObjectParameter("genderId", genderId) :
                new ObjectParameter("genderId", typeof(int));
    
            var disableIdParameter = disableId.HasValue ?
                new ObjectParameter("disableId", disableId) :
                new ObjectParameter("disableId", typeof(int));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var pmdcExpiryDateParameter = pmdcExpiryDate.HasValue ?
                new ObjectParameter("pmdcExpiryDate", pmdcExpiryDate) :
                new ObjectParameter("pmdcExpiryDate", typeof(System.DateTime));
    
            var mbbsPassingDateParameter = mbbsPassingDate.HasValue ?
                new ObjectParameter("mbbsPassingDate", mbbsPassingDate) :
                new ObjectParameter("mbbsPassingDate", typeof(System.DateTime));
    
            var countryIdDegreePassingParameter = countryIdDegreePassing.HasValue ?
                new ObjectParameter("countryIdDegreePassing", countryIdDegreePassing) :
                new ObjectParameter("countryIdDegreePassing", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("districtId", districtId) :
                new ObjectParameter("districtId", typeof(int));
    
            var districtNameParameter = districtName != null ?
                new ObjectParameter("districtName", districtName) :
                new ObjectParameter("districtName", typeof(string));
    
            var domicileProvinceIdParameter = domicileProvinceId.HasValue ?
                new ObjectParameter("domicileProvinceId", domicileProvinceId) :
                new ObjectParameter("domicileProvinceId", typeof(int));
    
            var domicileDistrictIdParameter = domicileDistrictId.HasValue ?
                new ObjectParameter("domicileDistrictId", domicileDistrictId) :
                new ObjectParameter("domicileDistrictId", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var cnicNoParameter = cnicNo != null ?
                new ObjectParameter("cnicNo", cnicNo) :
                new ObjectParameter("cnicNo", typeof(string));
    
            var cnicExpiryDateParameter = cnicExpiryDate.HasValue ?
                new ObjectParameter("cnicExpiryDate", cnicExpiryDate) :
                new ObjectParameter("cnicExpiryDate", typeof(System.DateTime));
    
            var cnicPicFrontParameter = cnicPicFront != null ?
                new ObjectParameter("cnicPicFront", cnicPicFront) :
                new ObjectParameter("cnicPicFront", typeof(string));
    
            var cnicPicBackParameter = cnicPicBack != null ?
                new ObjectParameter("cnicPicBack", cnicPicBack) :
                new ObjectParameter("cnicPicBack", typeof(string));
    
            var domicilePicFrontParameter = domicilePicFront != null ?
                new ObjectParameter("domicilePicFront", domicilePicFront) :
                new ObjectParameter("domicilePicFront", typeof(string));
    
            var domicilePicBackParameter = domicilePicBack != null ?
                new ObjectParameter("domicilePicBack", domicilePicBack) :
                new ObjectParameter("domicilePicBack", typeof(string));
    
            var picParameter = pic != null ?
                new ObjectParameter("pic", pic) :
                new ObjectParameter("pic", typeof(string));
    
            var disableImageParameter = disableImage != null ?
                new ObjectParameter("disableImage", disableImage) :
                new ObjectParameter("disableImage", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantAddUpdateInfoAdmin", inductionIdParameter, phaseIdParameter, applicantIdParameter, fatherNameParameter, genderIdParameter, disableIdParameter, dobParameter, pmdcExpiryDateParameter, mbbsPassingDateParameter, countryIdDegreePassingParameter, countryIdParameter, districtIdParameter, districtNameParameter, domicileProvinceIdParameter, domicileDistrictIdParameter, addressParameter, cnicNoParameter, cnicExpiryDateParameter, cnicPicFrontParameter, cnicPicBackParameter, domicilePicFrontParameter, domicilePicBackParameter, picParameter, disableImageParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spApplicantAddUpdateInfoDualNational_Result> spApplicantAddUpdateInfoDualNational(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId, Nullable<int> countryId, string embassyCertificate, string languageCertificate, string policeCertificate, string affidavitCertificate)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            var embassyCertificateParameter = embassyCertificate != null ?
                new ObjectParameter("embassyCertificate", embassyCertificate) :
                new ObjectParameter("embassyCertificate", typeof(string));
    
            var languageCertificateParameter = languageCertificate != null ?
                new ObjectParameter("languageCertificate", languageCertificate) :
                new ObjectParameter("languageCertificate", typeof(string));
    
            var policeCertificateParameter = policeCertificate != null ?
                new ObjectParameter("policeCertificate", policeCertificate) :
                new ObjectParameter("policeCertificate", typeof(string));
    
            var affidavitCertificateParameter = affidavitCertificate != null ?
                new ObjectParameter("affidavitCertificate", affidavitCertificate) :
                new ObjectParameter("affidavitCertificate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantAddUpdateInfoDualNational_Result>("spApplicantAddUpdateInfoDualNational", inductionIdParameter, phaseIdParameter, applicantIdParameter, countryIdParameter, embassyCertificateParameter, languageCertificateParameter, policeCertificateParameter, affidavitCertificateParameter);
        }
    
        public virtual int spApplicantAddUpdateInfoDualNationalAdmin(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId, Nullable<int> countryId, string embassyCertificate, string languageCertificate, string policeCertificate, string affidavitCertificate, Nullable<int> adminId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            var embassyCertificateParameter = embassyCertificate != null ?
                new ObjectParameter("embassyCertificate", embassyCertificate) :
                new ObjectParameter("embassyCertificate", typeof(string));
    
            var languageCertificateParameter = languageCertificate != null ?
                new ObjectParameter("languageCertificate", languageCertificate) :
                new ObjectParameter("languageCertificate", typeof(string));
    
            var policeCertificateParameter = policeCertificate != null ?
                new ObjectParameter("policeCertificate", policeCertificate) :
                new ObjectParameter("policeCertificate", typeof(string));
    
            var affidavitCertificateParameter = affidavitCertificate != null ?
                new ObjectParameter("affidavitCertificate", affidavitCertificate) :
                new ObjectParameter("affidavitCertificate", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantAddUpdateInfoDualNationalAdmin", inductionIdParameter, phaseIdParameter, applicantIdParameter, countryIdParameter, embassyCertificateParameter, languageCertificateParameter, policeCertificateParameter, affidavitCertificateParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spApplicantApprovalStatusAddUpdate_Result> spApplicantApprovalStatusAddUpdate(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId, Nullable<int> approvalStatusTypeId, Nullable<int> approvalStatusId, string comments, Nullable<int> adminId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var approvalStatusTypeIdParameter = approvalStatusTypeId.HasValue ?
                new ObjectParameter("approvalStatusTypeId", approvalStatusTypeId) :
                new ObjectParameter("approvalStatusTypeId", typeof(int));
    
            var approvalStatusIdParameter = approvalStatusId.HasValue ?
                new ObjectParameter("approvalStatusId", approvalStatusId) :
                new ObjectParameter("approvalStatusId", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("comments", comments) :
                new ObjectParameter("comments", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantApprovalStatusAddUpdate_Result>("spApplicantApprovalStatusAddUpdate", inductionIdParameter, phaseIdParameter, applicantIdParameter, approvalStatusTypeIdParameter, approvalStatusIdParameter, commentsParameter, adminIdParameter);
        }
    
        public virtual int spApplicantApprovalStatusCount(Nullable<int> reffId, string condition)
        {
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantApprovalStatusCount", reffIdParameter, conditionParameter);
        }
    
        public virtual ObjectResult<spApplicantCertificateAddUpdate_Result> spApplicantCertificateAddUpdate(Nullable<int> applicantCertificateTypeId, Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId, Nullable<int> typeId, Nullable<int> disciplineId, Nullable<int> obtainMarks, Nullable<int> totalMarks, Nullable<System.DateTime> passingDate, string imageCertificate)
        {
            var applicantCertificateTypeIdParameter = applicantCertificateTypeId.HasValue ?
                new ObjectParameter("applicantCertificateTypeId", applicantCertificateTypeId) :
                new ObjectParameter("applicantCertificateTypeId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var disciplineIdParameter = disciplineId.HasValue ?
                new ObjectParameter("disciplineId", disciplineId) :
                new ObjectParameter("disciplineId", typeof(int));
    
            var obtainMarksParameter = obtainMarks.HasValue ?
                new ObjectParameter("obtainMarks", obtainMarks) :
                new ObjectParameter("obtainMarks", typeof(int));
    
            var totalMarksParameter = totalMarks.HasValue ?
                new ObjectParameter("totalMarks", totalMarks) :
                new ObjectParameter("totalMarks", typeof(int));
    
            var passingDateParameter = passingDate.HasValue ?
                new ObjectParameter("passingDate", passingDate) :
                new ObjectParameter("passingDate", typeof(System.DateTime));
    
            var imageCertificateParameter = imageCertificate != null ?
                new ObjectParameter("imageCertificate", imageCertificate) :
                new ObjectParameter("imageCertificate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantCertificateAddUpdate_Result>("spApplicantCertificateAddUpdate", applicantCertificateTypeIdParameter, inductionIdParameter, phaseIdParameter, applicantIdParameter, typeIdParameter, disciplineIdParameter, obtainMarksParameter, totalMarksParameter, passingDateParameter, imageCertificateParameter);
        }
    
        public virtual int spApplicantCertificateAddUpdateAdmin(Nullable<int> applicantCertificateTypeId, Nullable<int> applicantId, Nullable<int> typeId, Nullable<int> certificateTypeId, Nullable<int> disciplineId, Nullable<int> obtainMarks, Nullable<int> totalMarks, Nullable<System.DateTime> passingDate, string imageCertificate, Nullable<int> adminId)
        {
            var applicantCertificateTypeIdParameter = applicantCertificateTypeId.HasValue ?
                new ObjectParameter("applicantCertificateTypeId", applicantCertificateTypeId) :
                new ObjectParameter("applicantCertificateTypeId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var certificateTypeIdParameter = certificateTypeId.HasValue ?
                new ObjectParameter("certificateTypeId", certificateTypeId) :
                new ObjectParameter("certificateTypeId", typeof(int));
    
            var disciplineIdParameter = disciplineId.HasValue ?
                new ObjectParameter("disciplineId", disciplineId) :
                new ObjectParameter("disciplineId", typeof(int));
    
            var obtainMarksParameter = obtainMarks.HasValue ?
                new ObjectParameter("obtainMarks", obtainMarks) :
                new ObjectParameter("obtainMarks", typeof(int));
    
            var totalMarksParameter = totalMarks.HasValue ?
                new ObjectParameter("totalMarks", totalMarks) :
                new ObjectParameter("totalMarks", typeof(int));
    
            var passingDateParameter = passingDate.HasValue ?
                new ObjectParameter("passingDate", passingDate) :
                new ObjectParameter("passingDate", typeof(System.DateTime));
    
            var imageCertificateParameter = imageCertificate != null ?
                new ObjectParameter("imageCertificate", imageCertificate) :
                new ObjectParameter("imageCertificate", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantCertificateAddUpdateAdmin", applicantCertificateTypeIdParameter, applicantIdParameter, typeIdParameter, certificateTypeIdParameter, disciplineIdParameter, obtainMarksParameter, totalMarksParameter, passingDateParameter, imageCertificateParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spApplicantChangePassword_Result> spApplicantChangePassword(Nullable<int> applicantId, string passwordOld, string passwordNew)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var passwordOldParameter = passwordOld != null ?
                new ObjectParameter("passwordOld", passwordOld) :
                new ObjectParameter("passwordOld", typeof(string));
    
            var passwordNewParameter = passwordNew != null ?
                new ObjectParameter("passwordNew", passwordNew) :
                new ObjectParameter("passwordNew", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantChangePassword_Result>("spApplicantChangePassword", applicantIdParameter, passwordOldParameter, passwordNewParameter);
        }
    
        public virtual ObjectResult<spApplicantDataGetHardship_Result> spApplicantDataGetHardship(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantDataGetHardship_Result>("spApplicantDataGetHardship", applicantIdParameter);
        }
    
        public virtual ObjectResult<spApplicantDataGetHardshipAdmin_Result> spApplicantDataGetHardshipAdmin(Nullable<int> applicantId, Nullable<int> hsId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var hsIdParameter = hsId.HasValue ?
                new ObjectParameter("hsId", hsId) :
                new ObjectParameter("hsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantDataGetHardshipAdmin_Result>("spApplicantDataGetHardshipAdmin", applicantIdParameter, hsIdParameter);
        }
    
        public virtual ObjectResult<spApplicantDataGetProfile_Result> spApplicantDataGetProfile(Nullable<int> applicantId, Nullable<int> inductionId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantDataGetProfile_Result>("spApplicantDataGetProfile", applicantIdParameter, inductionIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spApplicantDataGetProfileAdmin(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spApplicantDataGetProfileAdmin", applicantIdParameter);
        }
    
        public virtual int spApplicantDebarStatusUpdate(Nullable<int> applicantId, Nullable<int> adminId, Nullable<int> statusId, string image)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantDebarStatusUpdate", applicantIdParameter, adminIdParameter, statusIdParameter, imageParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spApplicantDegreeAddUpdate(Nullable<int> applicantDegreeDetailId, Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId, Nullable<int> graduateTypeId, Nullable<int> degreeTypeId, Nullable<int> degreeYear, Nullable<int> provinceId, Nullable<int> instituteTypeId, Nullable<int> instituteId, string instituteName, Nullable<decimal> totalMarks, Nullable<decimal> obtainMarks, string imageDegree, string imageDegreeForeignFront, string imageDegreeForeignBack, string imageDegreeMatric, string imageCertificate, string typeIds, Nullable<bool> fcpsExemptionStatus, string fcpsExemptionCertificate)
        {
            var applicantDegreeDetailIdParameter = applicantDegreeDetailId.HasValue ?
                new ObjectParameter("applicantDegreeDetailId", applicantDegreeDetailId) :
                new ObjectParameter("applicantDegreeDetailId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var graduateTypeIdParameter = graduateTypeId.HasValue ?
                new ObjectParameter("graduateTypeId", graduateTypeId) :
                new ObjectParameter("graduateTypeId", typeof(int));
    
            var degreeTypeIdParameter = degreeTypeId.HasValue ?
                new ObjectParameter("degreeTypeId", degreeTypeId) :
                new ObjectParameter("degreeTypeId", typeof(int));
    
            var degreeYearParameter = degreeYear.HasValue ?
                new ObjectParameter("degreeYear", degreeYear) :
                new ObjectParameter("degreeYear", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(int));
    
            var instituteTypeIdParameter = instituteTypeId.HasValue ?
                new ObjectParameter("instituteTypeId", instituteTypeId) :
                new ObjectParameter("instituteTypeId", typeof(int));
    
            var instituteIdParameter = instituteId.HasValue ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(int));
    
            var instituteNameParameter = instituteName != null ?
                new ObjectParameter("instituteName", instituteName) :
                new ObjectParameter("instituteName", typeof(string));
    
            var totalMarksParameter = totalMarks.HasValue ?
                new ObjectParameter("totalMarks", totalMarks) :
                new ObjectParameter("totalMarks", typeof(decimal));
    
            var obtainMarksParameter = obtainMarks.HasValue ?
                new ObjectParameter("obtainMarks", obtainMarks) :
                new ObjectParameter("obtainMarks", typeof(decimal));
    
            var imageDegreeParameter = imageDegree != null ?
                new ObjectParameter("imageDegree", imageDegree) :
                new ObjectParameter("imageDegree", typeof(string));
    
            var imageDegreeForeignFrontParameter = imageDegreeForeignFront != null ?
                new ObjectParameter("imageDegreeForeignFront", imageDegreeForeignFront) :
                new ObjectParameter("imageDegreeForeignFront", typeof(string));
    
            var imageDegreeForeignBackParameter = imageDegreeForeignBack != null ?
                new ObjectParameter("imageDegreeForeignBack", imageDegreeForeignBack) :
                new ObjectParameter("imageDegreeForeignBack", typeof(string));
    
            var imageDegreeMatricParameter = imageDegreeMatric != null ?
                new ObjectParameter("imageDegreeMatric", imageDegreeMatric) :
                new ObjectParameter("imageDegreeMatric", typeof(string));
    
            var imageCertificateParameter = imageCertificate != null ?
                new ObjectParameter("imageCertificate", imageCertificate) :
                new ObjectParameter("imageCertificate", typeof(string));
    
            var typeIdsParameter = typeIds != null ?
                new ObjectParameter("typeIds", typeIds) :
                new ObjectParameter("typeIds", typeof(string));
    
            var fcpsExemptionStatusParameter = fcpsExemptionStatus.HasValue ?
                new ObjectParameter("fcpsExemptionStatus", fcpsExemptionStatus) :
                new ObjectParameter("fcpsExemptionStatus", typeof(bool));
    
            var fcpsExemptionCertificateParameter = fcpsExemptionCertificate != null ?
                new ObjectParameter("fcpsExemptionCertificate", fcpsExemptionCertificate) :
                new ObjectParameter("fcpsExemptionCertificate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spApplicantDegreeAddUpdate", applicantDegreeDetailIdParameter, inductionIdParameter, phaseIdParameter, applicantIdParameter, graduateTypeIdParameter, degreeTypeIdParameter, degreeYearParameter, provinceIdParameter, instituteTypeIdParameter, instituteIdParameter, instituteNameParameter, totalMarksParameter, obtainMarksParameter, imageDegreeParameter, imageDegreeForeignFrontParameter, imageDegreeForeignBackParameter, imageDegreeMatricParameter, imageCertificateParameter, typeIdsParameter, fcpsExemptionStatusParameter, fcpsExemptionCertificateParameter);
        }
    
        public virtual ObjectResult<spApplicantDegreeAddUpdateAdmin_Result> spApplicantDegreeAddUpdateAdmin(Nullable<int> applicantDegreeDetailId, Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId, Nullable<int> graduateTypeId, Nullable<int> degreeTypeId, Nullable<int> degreeYear, Nullable<int> provinceId, Nullable<int> instituteTypeId, Nullable<int> instituteId, string instituteName, Nullable<decimal> totalMarks, Nullable<decimal> obtainMarks, string imageDegree, string imageDegreeForeignFront, string imageDegreeForeignBack, string imageDegreeMatric, string imageCertificate, Nullable<bool> fcpsExemptionStatus, string fcpsExemptionCertificate, Nullable<int> adminId)
        {
            var applicantDegreeDetailIdParameter = applicantDegreeDetailId.HasValue ?
                new ObjectParameter("applicantDegreeDetailId", applicantDegreeDetailId) :
                new ObjectParameter("applicantDegreeDetailId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var graduateTypeIdParameter = graduateTypeId.HasValue ?
                new ObjectParameter("graduateTypeId", graduateTypeId) :
                new ObjectParameter("graduateTypeId", typeof(int));
    
            var degreeTypeIdParameter = degreeTypeId.HasValue ?
                new ObjectParameter("degreeTypeId", degreeTypeId) :
                new ObjectParameter("degreeTypeId", typeof(int));
    
            var degreeYearParameter = degreeYear.HasValue ?
                new ObjectParameter("degreeYear", degreeYear) :
                new ObjectParameter("degreeYear", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(int));
    
            var instituteTypeIdParameter = instituteTypeId.HasValue ?
                new ObjectParameter("instituteTypeId", instituteTypeId) :
                new ObjectParameter("instituteTypeId", typeof(int));
    
            var instituteIdParameter = instituteId.HasValue ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(int));
    
            var instituteNameParameter = instituteName != null ?
                new ObjectParameter("instituteName", instituteName) :
                new ObjectParameter("instituteName", typeof(string));
    
            var totalMarksParameter = totalMarks.HasValue ?
                new ObjectParameter("totalMarks", totalMarks) :
                new ObjectParameter("totalMarks", typeof(decimal));
    
            var obtainMarksParameter = obtainMarks.HasValue ?
                new ObjectParameter("obtainMarks", obtainMarks) :
                new ObjectParameter("obtainMarks", typeof(decimal));
    
            var imageDegreeParameter = imageDegree != null ?
                new ObjectParameter("imageDegree", imageDegree) :
                new ObjectParameter("imageDegree", typeof(string));
    
            var imageDegreeForeignFrontParameter = imageDegreeForeignFront != null ?
                new ObjectParameter("imageDegreeForeignFront", imageDegreeForeignFront) :
                new ObjectParameter("imageDegreeForeignFront", typeof(string));
    
            var imageDegreeForeignBackParameter = imageDegreeForeignBack != null ?
                new ObjectParameter("imageDegreeForeignBack", imageDegreeForeignBack) :
                new ObjectParameter("imageDegreeForeignBack", typeof(string));
    
            var imageDegreeMatricParameter = imageDegreeMatric != null ?
                new ObjectParameter("imageDegreeMatric", imageDegreeMatric) :
                new ObjectParameter("imageDegreeMatric", typeof(string));
    
            var imageCertificateParameter = imageCertificate != null ?
                new ObjectParameter("imageCertificate", imageCertificate) :
                new ObjectParameter("imageCertificate", typeof(string));
    
            var fcpsExemptionStatusParameter = fcpsExemptionStatus.HasValue ?
                new ObjectParameter("fcpsExemptionStatus", fcpsExemptionStatus) :
                new ObjectParameter("fcpsExemptionStatus", typeof(bool));
    
            var fcpsExemptionCertificateParameter = fcpsExemptionCertificate != null ?
                new ObjectParameter("fcpsExemptionCertificate", fcpsExemptionCertificate) :
                new ObjectParameter("fcpsExemptionCertificate", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantDegreeAddUpdateAdmin_Result>("spApplicantDegreeAddUpdateAdmin", applicantDegreeDetailIdParameter, inductionIdParameter, phaseIdParameter, applicantIdParameter, graduateTypeIdParameter, degreeTypeIdParameter, degreeYearParameter, provinceIdParameter, instituteTypeIdParameter, instituteIdParameter, instituteNameParameter, totalMarksParameter, obtainMarksParameter, imageDegreeParameter, imageDegreeForeignFrontParameter, imageDegreeForeignBackParameter, imageDegreeMatricParameter, imageCertificateParameter, fcpsExemptionStatusParameter, fcpsExemptionCertificateParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spApplicantDegreeMarksAddUpdate_Result> spApplicantDegreeMarksAddUpdate(Nullable<int> degreeMarksId, Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId, Nullable<int> graduateTypeId, Nullable<int> year, Nullable<decimal> totalMarks, Nullable<decimal> obtainMarks, Nullable<int> attempt, string imageDMC, Nullable<int> position, string imagePosition)
        {
            var degreeMarksIdParameter = degreeMarksId.HasValue ?
                new ObjectParameter("degreeMarksId", degreeMarksId) :
                new ObjectParameter("degreeMarksId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var graduateTypeIdParameter = graduateTypeId.HasValue ?
                new ObjectParameter("graduateTypeId", graduateTypeId) :
                new ObjectParameter("graduateTypeId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var totalMarksParameter = totalMarks.HasValue ?
                new ObjectParameter("totalMarks", totalMarks) :
                new ObjectParameter("totalMarks", typeof(decimal));
    
            var obtainMarksParameter = obtainMarks.HasValue ?
                new ObjectParameter("obtainMarks", obtainMarks) :
                new ObjectParameter("obtainMarks", typeof(decimal));
    
            var attemptParameter = attempt.HasValue ?
                new ObjectParameter("attempt", attempt) :
                new ObjectParameter("attempt", typeof(int));
    
            var imageDMCParameter = imageDMC != null ?
                new ObjectParameter("imageDMC", imageDMC) :
                new ObjectParameter("imageDMC", typeof(string));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("position", position) :
                new ObjectParameter("position", typeof(int));
    
            var imagePositionParameter = imagePosition != null ?
                new ObjectParameter("imagePosition", imagePosition) :
                new ObjectParameter("imagePosition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantDegreeMarksAddUpdate_Result>("spApplicantDegreeMarksAddUpdate", degreeMarksIdParameter, inductionIdParameter, phaseIdParameter, applicantIdParameter, graduateTypeIdParameter, yearParameter, totalMarksParameter, obtainMarksParameter, attemptParameter, imageDMCParameter, positionParameter, imagePositionParameter);
        }
    
        public virtual int spApplicantDegreeMarksAddUpdateAdmin(Nullable<int> degreeMarksId, Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId, Nullable<int> graduateTypeId, Nullable<int> year, Nullable<decimal> totalMarks, Nullable<decimal> obtainMarks, Nullable<int> attempt, string imageDMC, Nullable<int> adminId)
        {
            var degreeMarksIdParameter = degreeMarksId.HasValue ?
                new ObjectParameter("degreeMarksId", degreeMarksId) :
                new ObjectParameter("degreeMarksId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var graduateTypeIdParameter = graduateTypeId.HasValue ?
                new ObjectParameter("graduateTypeId", graduateTypeId) :
                new ObjectParameter("graduateTypeId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var totalMarksParameter = totalMarks.HasValue ?
                new ObjectParameter("totalMarks", totalMarks) :
                new ObjectParameter("totalMarks", typeof(decimal));
    
            var obtainMarksParameter = obtainMarks.HasValue ?
                new ObjectParameter("obtainMarks", obtainMarks) :
                new ObjectParameter("obtainMarks", typeof(decimal));
    
            var attemptParameter = attempt.HasValue ?
                new ObjectParameter("attempt", attempt) :
                new ObjectParameter("attempt", typeof(int));
    
            var imageDMCParameter = imageDMC != null ?
                new ObjectParameter("imageDMC", imageDMC) :
                new ObjectParameter("imageDMC", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantDegreeMarksAddUpdateAdmin", degreeMarksIdParameter, inductionIdParameter, phaseIdParameter, applicantIdParameter, graduateTypeIdParameter, yearParameter, totalMarksParameter, obtainMarksParameter, attemptParameter, imageDMCParameter, adminIdParameter);
        }
    
        public virtual int spApplicantDegreeMarksDeleteByApplicantId(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId, Nullable<int> graduateTypeId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var graduateTypeIdParameter = graduateTypeId.HasValue ?
                new ObjectParameter("graduateTypeId", graduateTypeId) :
                new ObjectParameter("graduateTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantDegreeMarksDeleteByApplicantId", inductionIdParameter, phaseIdParameter, applicantIdParameter, graduateTypeIdParameter);
        }
    
        public virtual int spApplicantDegreeMarksMakeAccurate(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantDegreeMarksMakeAccurate", applicantIdParameter);
        }
    
        public virtual int spApplicantDegreeSpecialityDeleteByStatus(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId, Nullable<bool> isFCPS, Nullable<bool> isMSMD)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var isFCPSParameter = isFCPS.HasValue ?
                new ObjectParameter("isFCPS", isFCPS) :
                new ObjectParameter("isFCPS", typeof(bool));
    
            var isMSMDParameter = isMSMD.HasValue ?
                new ObjectParameter("isMSMD", isMSMD) :
                new ObjectParameter("isMSMD", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantDegreeSpecialityDeleteByStatus", inductionIdParameter, phaseIdParameter, applicantIdParameter, isFCPSParameter, isMSMDParameter);
        }
    
        public virtual ObjectResult<spApplicantDistinctionAddUpdate_Result> spApplicantDistinctionAddUpdate(Nullable<int> applicantDistinctionId, Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId, string subject, Nullable<int> year, Nullable<int> position, string imageDistinction, string instituteId)
        {
            var applicantDistinctionIdParameter = applicantDistinctionId.HasValue ?
                new ObjectParameter("applicantDistinctionId", applicantDistinctionId) :
                new ObjectParameter("applicantDistinctionId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("subject", subject) :
                new ObjectParameter("subject", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("position", position) :
                new ObjectParameter("position", typeof(int));
    
            var imageDistinctionParameter = imageDistinction != null ?
                new ObjectParameter("imageDistinction", imageDistinction) :
                new ObjectParameter("imageDistinction", typeof(string));
    
            var instituteIdParameter = instituteId != null ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantDistinctionAddUpdate_Result>("spApplicantDistinctionAddUpdate", applicantDistinctionIdParameter, inductionIdParameter, phaseIdParameter, applicantIdParameter, subjectParameter, yearParameter, positionParameter, imageDistinctionParameter, instituteIdParameter);
        }
    
        public virtual ObjectResult<spApplicantDistinctionAddUpdateAdmin_Result> spApplicantDistinctionAddUpdateAdmin(Nullable<int> applicantDistinctionId, Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId, string subject, Nullable<int> year, Nullable<int> position, string imageDistinction, Nullable<int> adminId)
        {
            var applicantDistinctionIdParameter = applicantDistinctionId.HasValue ?
                new ObjectParameter("applicantDistinctionId", applicantDistinctionId) :
                new ObjectParameter("applicantDistinctionId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("subject", subject) :
                new ObjectParameter("subject", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("position", position) :
                new ObjectParameter("position", typeof(int));
    
            var imageDistinctionParameter = imageDistinction != null ?
                new ObjectParameter("imageDistinction", imageDistinction) :
                new ObjectParameter("imageDistinction", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantDistinctionAddUpdateAdmin_Result>("spApplicantDistinctionAddUpdateAdmin", applicantDistinctionIdParameter, inductionIdParameter, phaseIdParameter, applicantIdParameter, subjectParameter, yearParameter, positionParameter, imageDistinctionParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spApplicantDistinctionDeleteByApplicant_Result> spApplicantDistinctionDeleteByApplicant(Nullable<int> applicantDistinctionId, Nullable<int> applicantId)
        {
            var applicantDistinctionIdParameter = applicantDistinctionId.HasValue ?
                new ObjectParameter("applicantDistinctionId", applicantDistinctionId) :
                new ObjectParameter("applicantDistinctionId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantDistinctionDeleteByApplicant_Result>("spApplicantDistinctionDeleteByApplicant", applicantDistinctionIdParameter, applicantIdParameter);
        }
    
        public virtual ObjectResult<spApplicantExperienceAddUpdate_Result> spApplicantExperienceAddUpdate(Nullable<int> applicantExperienceId, Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId, Nullable<int> levelId, Nullable<int> levelTypeId, string instituteName, Nullable<int> instituteId, Nullable<int> provinceId, Nullable<int> typeId, Nullable<System.DateTime> startDated, Nullable<System.DateTime> endDate, Nullable<bool> isCurrent, string imageExperience)
        {
            var applicantExperienceIdParameter = applicantExperienceId.HasValue ?
                new ObjectParameter("applicantExperienceId", applicantExperienceId) :
                new ObjectParameter("applicantExperienceId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("levelId", levelId) :
                new ObjectParameter("levelId", typeof(int));
    
            var levelTypeIdParameter = levelTypeId.HasValue ?
                new ObjectParameter("levelTypeId", levelTypeId) :
                new ObjectParameter("levelTypeId", typeof(int));
    
            var instituteNameParameter = instituteName != null ?
                new ObjectParameter("instituteName", instituteName) :
                new ObjectParameter("instituteName", typeof(string));
    
            var instituteIdParameter = instituteId.HasValue ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var startDatedParameter = startDated.HasValue ?
                new ObjectParameter("startDated", startDated) :
                new ObjectParameter("startDated", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var isCurrentParameter = isCurrent.HasValue ?
                new ObjectParameter("isCurrent", isCurrent) :
                new ObjectParameter("isCurrent", typeof(bool));
    
            var imageExperienceParameter = imageExperience != null ?
                new ObjectParameter("imageExperience", imageExperience) :
                new ObjectParameter("imageExperience", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantExperienceAddUpdate_Result>("spApplicantExperienceAddUpdate", applicantExperienceIdParameter, inductionIdParameter, phaseIdParameter, applicantIdParameter, levelIdParameter, levelTypeIdParameter, instituteNameParameter, instituteIdParameter, provinceIdParameter, typeIdParameter, startDatedParameter, endDateParameter, isCurrentParameter, imageExperienceParameter);
        }
    
        public virtual ObjectResult<spApplicantExperienceAddUpdateAdmin_Result> spApplicantExperienceAddUpdateAdmin(Nullable<int> applicantExperienceId, Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId, Nullable<int> levelId, Nullable<int> levelTypeId, string instituteName, Nullable<int> instituteId, Nullable<int> provinceId, Nullable<int> typeId, Nullable<System.DateTime> startDated, Nullable<System.DateTime> endDate, Nullable<bool> isCurrent, string imageExperience, Nullable<int> adminId)
        {
            var applicantExperienceIdParameter = applicantExperienceId.HasValue ?
                new ObjectParameter("applicantExperienceId", applicantExperienceId) :
                new ObjectParameter("applicantExperienceId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("levelId", levelId) :
                new ObjectParameter("levelId", typeof(int));
    
            var levelTypeIdParameter = levelTypeId.HasValue ?
                new ObjectParameter("levelTypeId", levelTypeId) :
                new ObjectParameter("levelTypeId", typeof(int));
    
            var instituteNameParameter = instituteName != null ?
                new ObjectParameter("instituteName", instituteName) :
                new ObjectParameter("instituteName", typeof(string));
    
            var instituteIdParameter = instituteId.HasValue ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var startDatedParameter = startDated.HasValue ?
                new ObjectParameter("startDated", startDated) :
                new ObjectParameter("startDated", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var isCurrentParameter = isCurrent.HasValue ?
                new ObjectParameter("isCurrent", isCurrent) :
                new ObjectParameter("isCurrent", typeof(bool));
    
            var imageExperienceParameter = imageExperience != null ?
                new ObjectParameter("imageExperience", imageExperience) :
                new ObjectParameter("imageExperience", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantExperienceAddUpdateAdmin_Result>("spApplicantExperienceAddUpdateAdmin", applicantExperienceIdParameter, inductionIdParameter, phaseIdParameter, applicantIdParameter, levelIdParameter, levelTypeIdParameter, instituteNameParameter, instituteIdParameter, provinceIdParameter, typeIdParameter, startDatedParameter, endDateParameter, isCurrentParameter, imageExperienceParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spApplicantExperienceByApplicant_Result> spApplicantExperienceByApplicant(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantExperienceByApplicant_Result>("spApplicantExperienceByApplicant", inductionIdParameter, phaseIdParameter, applicantIdParameter);
        }
    
        public virtual ObjectResult<spApplicantExperienceDeleteByApplicant_Result> spApplicantExperienceDeleteByApplicant(Nullable<int> applicantExperienceId)
        {
            var applicantExperienceIdParameter = applicantExperienceId.HasValue ?
                new ObjectParameter("applicantExperienceId", applicantExperienceId) :
                new ObjectParameter("applicantExperienceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantExperienceDeleteByApplicant_Result>("spApplicantExperienceDeleteByApplicant", applicantExperienceIdParameter);
        }
    
        public virtual int spApplicantExperienceUpdateMonthByApplicant(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantExperienceUpdateMonthByApplicant", applicantIdParameter);
        }
    
        public virtual ObjectResult<spApplicantForTraineeYear_Result> spApplicantForTraineeYear(Nullable<int> inductionId, Nullable<int> hospitalId, Nullable<int> employeeId, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantForTraineeYear_Result>("spApplicantForTraineeYear", inductionIdParameter, hospitalIdParameter, employeeIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spApplicantGetAllByStatus_Result> spApplicantGetAllByStatus(Nullable<int> inductionId, Nullable<int> top, Nullable<int> pageNum, Nullable<int> statusTypeId, Nullable<int> statusId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantGetAllByStatus_Result>("spApplicantGetAllByStatus", inductionIdParameter, topParameter, pageNumParameter, statusTypeIdParameter, statusIdParameter);
        }
    
        public virtual int spApplicantGetByApplicantNo(string applicantNo, Nullable<int> transactionType)
        {
            var applicantNoParameter = applicantNo != null ?
                new ObjectParameter("applicantNo", applicantNo) :
                new ObjectParameter("applicantNo", typeof(string));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("transactionType", transactionType) :
                new ObjectParameter("transactionType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantGetByApplicantNo", applicantNoParameter, transactionTypeParameter);
        }
    
        public virtual ObjectResult<spApplicantGetById_Result> spApplicantGetById(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantGetById_Result>("spApplicantGetById", applicantIdParameter);
        }
    
        public virtual ObjectResult<spApplicantGetByIdAdmin_Result> spApplicantGetByIdAdmin(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantGetByIdAdmin_Result>("spApplicantGetByIdAdmin", applicantIdParameter);
        }
    
        public virtual ObjectResult<spApplicantGetBySearch_Result> spApplicantGetBySearch(string search, string condition)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantGetBySearch_Result>("spApplicantGetBySearch", searchParameter, conditionParameter);
        }
    
        public virtual int spApplicantGetBySearchVerification(string search, string condition)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantGetBySearchVerification", searchParameter, conditionParameter);
        }
    
        public virtual ObjectResult<spApplicantGetList_Result> spApplicantGetList(Nullable<int> accountStatusId, Nullable<int> applicationStatusId, Nullable<int> facultyId, string condition)
        {
            var accountStatusIdParameter = accountStatusId.HasValue ?
                new ObjectParameter("accountStatusId", accountStatusId) :
                new ObjectParameter("accountStatusId", typeof(int));
    
            var applicationStatusIdParameter = applicationStatusId.HasValue ?
                new ObjectParameter("applicationStatusId", applicationStatusId) :
                new ObjectParameter("applicationStatusId", typeof(int));
    
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("facultyId", facultyId) :
                new ObjectParameter("facultyId", typeof(int));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantGetList_Result>("spApplicantGetList", accountStatusIdParameter, applicationStatusIdParameter, facultyIdParameter, conditionParameter);
        }
    
        public virtual ObjectResult<spApplicantHouseJobAddUpdate_Result> spApplicantHouseJobAddUpdate(Nullable<int> houseJodId, Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId, Nullable<int> countryId, Nullable<int> provinceId, Nullable<int> typeId, Nullable<bool> isSame, Nullable<int> hospitalId, string hospital, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string image)
        {
            var houseJodIdParameter = houseJodId.HasValue ?
                new ObjectParameter("houseJodId", houseJodId) :
                new ObjectParameter("houseJodId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var isSameParameter = isSame.HasValue ?
                new ObjectParameter("isSame", isSame) :
                new ObjectParameter("isSame", typeof(bool));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var hospitalParameter = hospital != null ?
                new ObjectParameter("hospital", hospital) :
                new ObjectParameter("hospital", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantHouseJobAddUpdate_Result>("spApplicantHouseJobAddUpdate", houseJodIdParameter, inductionIdParameter, phaseIdParameter, applicantIdParameter, countryIdParameter, provinceIdParameter, typeIdParameter, isSameParameter, hospitalIdParameter, hospitalParameter, startDateParameter, endDateParameter, imageParameter);
        }
    
        public virtual ObjectResult<spApplicantHouseJobAddUpdateAdmin_Result> spApplicantHouseJobAddUpdateAdmin(Nullable<int> houseJodId, Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId, Nullable<int> provinceId, Nullable<int> typeId, Nullable<int> hospitalId, string hospital, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string image, Nullable<int> isSame, Nullable<int> adminId, Nullable<int> countryId)
        {
            var houseJodIdParameter = houseJodId.HasValue ?
                new ObjectParameter("houseJodId", houseJodId) :
                new ObjectParameter("houseJodId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var hospitalParameter = hospital != null ?
                new ObjectParameter("hospital", hospital) :
                new ObjectParameter("hospital", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            var isSameParameter = isSame.HasValue ?
                new ObjectParameter("isSame", isSame) :
                new ObjectParameter("isSame", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantHouseJobAddUpdateAdmin_Result>("spApplicantHouseJobAddUpdateAdmin", houseJodIdParameter, inductionIdParameter, phaseIdParameter, applicantIdParameter, provinceIdParameter, typeIdParameter, hospitalIdParameter, hospitalParameter, startDateParameter, endDateParameter, imageParameter, isSameParameter, adminIdParameter, countryIdParameter);
        }
    
        public virtual int spApplicantHouseJobDeleteByApplicant(Nullable<int> houseJodId)
        {
            var houseJodIdParameter = houseJodId.HasValue ?
                new ObjectParameter("houseJodId", houseJodId) :
                new ObjectParameter("houseJodId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantHouseJobDeleteByApplicant", houseJodIdParameter);
        }
    
        public virtual ObjectResult<spApplicantHouseJobGetByApplicant_Result> spApplicantHouseJobGetByApplicant(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantHouseJobGetByApplicant_Result>("spApplicantHouseJobGetByApplicant", applicantIdParameter);
        }
    
        public virtual ObjectResult<spApplicantIsExist_Result> spApplicantIsExist(Nullable<int> id, string search, string condition)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantIsExist_Result>("spApplicantIsExist", idParameter, searchParameter, conditionParameter);
        }
    
        public virtual int spApplicantListVerify(Nullable<int> statusId, string condition)
        {
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantListVerify", statusIdParameter, conditionParameter);
        }
    
        public virtual ObjectResult<spApplicantListVerifyExport_Result> spApplicantListVerifyExport(Nullable<int> statusId)
        {
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantListVerifyExport_Result>("spApplicantListVerifyExport", statusIdParameter);
        }
    
        public virtual ObjectResult<spApplicantLogin_Result> spApplicantLogin(string emailId, string password)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantLogin_Result>("spApplicantLogin", emailIdParameter, passwordParameter);
        }
    
        public virtual ObjectResult<spApplicantLoginByPhf_Result> spApplicantLoginByPhf(string emailId, Nullable<int> typeId)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantLoginByPhf_Result>("spApplicantLoginByPhf", emailIdParameter, typeIdParameter);
        }
    
        public virtual ObjectResult<spApplicantLoginHs_Result> spApplicantLoginHs(string emailId, string password)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantLoginHs_Result>("spApplicantLoginHs", emailIdParameter, passwordParameter);
        }
    
        public virtual int spApplicantLoginNew(string emailId, string password)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantLoginNew", emailIdParameter, passwordParameter);
        }
    
        public virtual int spApplicantPushToDebarList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantPushToDebarList");
        }
    
        public virtual ObjectResult<spApplicantRegister_Result> spApplicantRegister(string name, string pmdcNo, string emailId, string password, string contactNumber, Nullable<int> network, Nullable<int> levelId, Nullable<int> facultyId, string pic, Nullable<int> inductionId, Nullable<int> adminId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var pmdcNoParameter = pmdcNo != null ?
                new ObjectParameter("pmdcNo", pmdcNo) :
                new ObjectParameter("pmdcNo", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("contactNumber", contactNumber) :
                new ObjectParameter("contactNumber", typeof(string));
    
            var networkParameter = network.HasValue ?
                new ObjectParameter("network", network) :
                new ObjectParameter("network", typeof(int));
    
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("levelId", levelId) :
                new ObjectParameter("levelId", typeof(int));
    
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("facultyId", facultyId) :
                new ObjectParameter("facultyId", typeof(int));
    
            var picParameter = pic != null ?
                new ObjectParameter("pic", pic) :
                new ObjectParameter("pic", typeof(string));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantRegister_Result>("spApplicantRegister", nameParameter, pmdcNoParameter, emailIdParameter, passwordParameter, contactNumberParameter, networkParameter, levelIdParameter, facultyIdParameter, picParameter, inductionIdParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spApplicantResearchPaperAddUpdate_Result> spApplicantResearchPaperAddUpdate(Nullable<int> applicantResearchId, Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId, string name, Nullable<int> authorId, Nullable<int> publishStatusId, string link, string webLink, string imageLetter, Nullable<int> researchJournalId)
        {
            var applicantResearchIdParameter = applicantResearchId.HasValue ?
                new ObjectParameter("applicantResearchId", applicantResearchId) :
                new ObjectParameter("applicantResearchId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var authorIdParameter = authorId.HasValue ?
                new ObjectParameter("authorId", authorId) :
                new ObjectParameter("authorId", typeof(int));
    
            var publishStatusIdParameter = publishStatusId.HasValue ?
                new ObjectParameter("publishStatusId", publishStatusId) :
                new ObjectParameter("publishStatusId", typeof(int));
    
            var linkParameter = link != null ?
                new ObjectParameter("link", link) :
                new ObjectParameter("link", typeof(string));
    
            var webLinkParameter = webLink != null ?
                new ObjectParameter("webLink", webLink) :
                new ObjectParameter("webLink", typeof(string));
    
            var imageLetterParameter = imageLetter != null ?
                new ObjectParameter("imageLetter", imageLetter) :
                new ObjectParameter("imageLetter", typeof(string));
    
            var researchJournalIdParameter = researchJournalId.HasValue ?
                new ObjectParameter("researchJournalId", researchJournalId) :
                new ObjectParameter("researchJournalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantResearchPaperAddUpdate_Result>("spApplicantResearchPaperAddUpdate", applicantResearchIdParameter, inductionIdParameter, phaseIdParameter, applicantIdParameter, nameParameter, authorIdParameter, publishStatusIdParameter, linkParameter, webLinkParameter, imageLetterParameter, researchJournalIdParameter);
        }
    
        public virtual int spApplicantResearchPaperAddUpdateAdmin(Nullable<int> applicantResearchId, Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId, string name, Nullable<int> authorId, Nullable<int> publishStatusId, string link, string webLink, string imageLetter, Nullable<int> researchJournalId, Nullable<bool> isActive, Nullable<int> adminId)
        {
            var applicantResearchIdParameter = applicantResearchId.HasValue ?
                new ObjectParameter("applicantResearchId", applicantResearchId) :
                new ObjectParameter("applicantResearchId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var authorIdParameter = authorId.HasValue ?
                new ObjectParameter("authorId", authorId) :
                new ObjectParameter("authorId", typeof(int));
    
            var publishStatusIdParameter = publishStatusId.HasValue ?
                new ObjectParameter("publishStatusId", publishStatusId) :
                new ObjectParameter("publishStatusId", typeof(int));
    
            var linkParameter = link != null ?
                new ObjectParameter("link", link) :
                new ObjectParameter("link", typeof(string));
    
            var webLinkParameter = webLink != null ?
                new ObjectParameter("webLink", webLink) :
                new ObjectParameter("webLink", typeof(string));
    
            var imageLetterParameter = imageLetter != null ?
                new ObjectParameter("imageLetter", imageLetter) :
                new ObjectParameter("imageLetter", typeof(string));
    
            var researchJournalIdParameter = researchJournalId.HasValue ?
                new ObjectParameter("researchJournalId", researchJournalId) :
                new ObjectParameter("researchJournalId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantResearchPaperAddUpdateAdmin", applicantResearchIdParameter, inductionIdParameter, phaseIdParameter, applicantIdParameter, nameParameter, authorIdParameter, publishStatusIdParameter, linkParameter, webLinkParameter, imageLetterParameter, researchJournalIdParameter, isActiveParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spApplicantResearchPaperByApplicant_Result> spApplicantResearchPaperByApplicant(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantResearchPaperByApplicant_Result>("spApplicantResearchPaperByApplicant", inductionIdParameter, phaseIdParameter, applicantIdParameter);
        }
    
        public virtual int spApplicantResearchPaperDeleteByApplicant(Nullable<int> applicantResearchId)
        {
            var applicantResearchIdParameter = applicantResearchId.HasValue ?
                new ObjectParameter("applicantResearchId", applicantResearchId) :
                new ObjectParameter("applicantResearchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantResearchPaperDeleteByApplicant", applicantResearchIdParameter);
        }
    
        public virtual ObjectResult<spApplicantResearchPaperSearch_Result> spApplicantResearchPaperSearch(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> top, Nullable<int> pageNum, Nullable<int> researchJournalId, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var researchJournalIdParameter = researchJournalId.HasValue ?
                new ObjectParameter("researchJournalId", researchJournalId) :
                new ObjectParameter("researchJournalId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantResearchPaperSearch_Result>("spApplicantResearchPaperSearch", inductionIdParameter, phaseIdParameter, topParameter, pageNumParameter, researchJournalIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spApplicantSearch_Result> spApplicantSearch(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> top, Nullable<int> pageNum, Nullable<int> statusTypeId, Nullable<int> statusId, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantSearch_Result>("spApplicantSearch", inductionIdParameter, phaseIdParameter, topParameter, pageNumParameter, statusTypeIdParameter, statusIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spApplicantSearchByAdmin_Result> spApplicantSearchByAdmin(Nullable<int> pageNum, Nullable<int> top, Nullable<int> userId, Nullable<int> hospitalId, string search)
        {
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantSearchByAdmin_Result>("spApplicantSearchByAdmin", pageNumParameter, topParameter, userIdParameter, hospitalIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spApplicantSearchSimple_Result> spApplicantSearchSimple(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> top, Nullable<int> pageNum, Nullable<int> statusTypeId, Nullable<int> statusId, string name, string pmdcNo, string emailid, string contactNumber, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var pmdcNoParameter = pmdcNo != null ?
                new ObjectParameter("pmdcNo", pmdcNo) :
                new ObjectParameter("pmdcNo", typeof(string));
    
            var emailidParameter = emailid != null ?
                new ObjectParameter("emailid", emailid) :
                new ObjectParameter("emailid", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("contactNumber", contactNumber) :
                new ObjectParameter("contactNumber", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantSearchSimple_Result>("spApplicantSearchSimple", inductionIdParameter, phaseIdParameter, topParameter, pageNumParameter, statusTypeIdParameter, statusIdParameter, nameParameter, pmdcNoParameter, emailidParameter, contactNumberParameter, searchParameter);
        }
    
        public virtual int spApplicantSelectedSet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantSelectedSet");
        }
    
        public virtual ObjectResult<spApplicantSpecialityWithMeritMarks_Result> spApplicantSpecialityWithMeritMarks(Nullable<int> roundNo, Nullable<int> applicantId, Nullable<int> inductionId)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantSpecialityWithMeritMarks_Result>("spApplicantSpecialityWithMeritMarks", roundNoParameter, applicantIdParameter, inductionIdParameter);
        }
    
        public virtual int spApplicantSpecialityWithMeritMarksAdmin(Nullable<int> applicantId, Nullable<int> roundNo)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantSpecialityWithMeritMarksAdmin", applicantIdParameter, roundNoParameter);
        }
    
        public virtual ObjectResult<spApplicantSpecialityWithMeritMarksBk_Result> spApplicantSpecialityWithMeritMarksBk(Nullable<int> roundNo, Nullable<int> applicantId, Nullable<int> inductionId)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantSpecialityWithMeritMarksBk_Result>("spApplicantSpecialityWithMeritMarksBk", roundNoParameter, applicantIdParameter, inductionIdParameter);
        }
    
        public virtual ObjectResult<spApplicantSpecialityWithMeritMarksFCPS_Result> spApplicantSpecialityWithMeritMarksFCPS(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantSpecialityWithMeritMarksFCPS_Result>("spApplicantSpecialityWithMeritMarksFCPS", applicantIdParameter);
        }
    
        public virtual ObjectResult<spApplicantSpecilityAddUpdate_Result> spApplicantSpecilityAddUpdate(Nullable<int> applicantSpecilityId, Nullable<int> specialityJobId, Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId, Nullable<int> preferenceNo, Nullable<int> typeId, Nullable<int> specialityId, Nullable<int> hospitalId)
        {
            var applicantSpecilityIdParameter = applicantSpecilityId.HasValue ?
                new ObjectParameter("applicantSpecilityId", applicantSpecilityId) :
                new ObjectParameter("applicantSpecilityId", typeof(int));
    
            var specialityJobIdParameter = specialityJobId.HasValue ?
                new ObjectParameter("specialityJobId", specialityJobId) :
                new ObjectParameter("specialityJobId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var preferenceNoParameter = preferenceNo.HasValue ?
                new ObjectParameter("preferenceNo", preferenceNo) :
                new ObjectParameter("preferenceNo", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var specialityIdParameter = specialityId.HasValue ?
                new ObjectParameter("specialityId", specialityId) :
                new ObjectParameter("specialityId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantSpecilityAddUpdate_Result>("spApplicantSpecilityAddUpdate", applicantSpecilityIdParameter, specialityJobIdParameter, inductionIdParameter, phaseIdParameter, applicantIdParameter, preferenceNoParameter, typeIdParameter, specialityIdParameter, hospitalIdParameter);
        }
    
        public virtual ObjectResult<spApplicantSpecilityAddUpdateOld_Result> spApplicantSpecilityAddUpdateOld(Nullable<int> applicantSpecilityId, Nullable<int> applicantId, Nullable<int> preferenceNo, Nullable<int> typeId, Nullable<int> specialityId, Nullable<int> hospitalId)
        {
            var applicantSpecilityIdParameter = applicantSpecilityId.HasValue ?
                new ObjectParameter("applicantSpecilityId", applicantSpecilityId) :
                new ObjectParameter("applicantSpecilityId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var preferenceNoParameter = preferenceNo.HasValue ?
                new ObjectParameter("preferenceNo", preferenceNo) :
                new ObjectParameter("preferenceNo", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var specialityIdParameter = specialityId.HasValue ?
                new ObjectParameter("specialityId", specialityId) :
                new ObjectParameter("specialityId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantSpecilityAddUpdateOld_Result>("spApplicantSpecilityAddUpdateOld", applicantSpecilityIdParameter, applicantIdParameter, preferenceNoParameter, typeIdParameter, specialityIdParameter, hospitalIdParameter);
        }
    
        public virtual ObjectResult<spApplicantSpecilityByApplicant_Result> spApplicantSpecilityByApplicant(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantSpecilityByApplicant_Result>("spApplicantSpecilityByApplicant", inductionIdParameter, phaseIdParameter, applicantIdParameter);
        }
    
        public virtual ObjectResult<spApplicantSpecilityCheckPreferenceNo_Result> spApplicantSpecilityCheckPreferenceNo(Nullable<int> applicantSpecilityId, Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId, Nullable<int> preferenceNo, Nullable<int> typeId, Nullable<int> specialityId)
        {
            var applicantSpecilityIdParameter = applicantSpecilityId.HasValue ?
                new ObjectParameter("applicantSpecilityId", applicantSpecilityId) :
                new ObjectParameter("applicantSpecilityId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var preferenceNoParameter = preferenceNo.HasValue ?
                new ObjectParameter("preferenceNo", preferenceNo) :
                new ObjectParameter("preferenceNo", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var specialityIdParameter = specialityId.HasValue ?
                new ObjectParameter("specialityId", specialityId) :
                new ObjectParameter("specialityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantSpecilityCheckPreferenceNo_Result>("spApplicantSpecilityCheckPreferenceNo", applicantSpecilityIdParameter, inductionIdParameter, phaseIdParameter, applicantIdParameter, preferenceNoParameter, typeIdParameter, specialityIdParameter);
        }
    
        public virtual ObjectResult<spApplicantSpecilityCheckSameInstituteMarks_Result> spApplicantSpecilityCheckSameInstituteMarks(Nullable<int> inductionId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantSpecilityCheckSameInstituteMarks_Result>("spApplicantSpecilityCheckSameInstituteMarks", inductionIdParameter);
        }
    
        public virtual ObjectResult<spApplicantSpecilityDeleteByApplicant_Result> spApplicantSpecilityDeleteByApplicant(Nullable<int> applicantSpecilityId, Nullable<int> applicantId)
        {
            var applicantSpecilityIdParameter = applicantSpecilityId.HasValue ?
                new ObjectParameter("applicantSpecilityId", applicantSpecilityId) :
                new ObjectParameter("applicantSpecilityId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantSpecilityDeleteByApplicant_Result>("spApplicantSpecilityDeleteByApplicant", applicantSpecilityIdParameter, applicantIdParameter);
        }
    
        public virtual ObjectResult<spApplicantSpecilityGetByParam_Result> spApplicantSpecilityGetByParam(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantSpecilityGetByParam_Result>("spApplicantSpecilityGetByParam", applicantIdParameter);
        }
    
        public virtual ObjectResult<spApplicantSpecilityWithMarksByApplicant_Result> spApplicantSpecilityWithMarksByApplicant(Nullable<int> applicantId, Nullable<int> inductionId, Nullable<int> phaseId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantSpecilityWithMarksByApplicant_Result>("spApplicantSpecilityWithMarksByApplicant", applicantIdParameter, inductionIdParameter, phaseIdParameter);
        }
    
        public virtual ObjectResult<spApplicantSpecilityWithMarksByApplicantBk_Result> spApplicantSpecilityWithMarksByApplicantBk(Nullable<int> applicantId, Nullable<int> inductionId, Nullable<int> phaseId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantSpecilityWithMarksByApplicantBk_Result>("spApplicantSpecilityWithMarksByApplicantBk", applicantIdParameter, inductionIdParameter, phaseIdParameter);
        }
    
        public virtual ObjectResult<spApplicantSpecilityWithMarksByApplicantFinal_Result> spApplicantSpecilityWithMarksByApplicantFinal(Nullable<int> applicantId, Nullable<int> inductionId, Nullable<int> phaseId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantSpecilityWithMarksByApplicantFinal_Result>("spApplicantSpecilityWithMarksByApplicantFinal", applicantIdParameter, inductionIdParameter, phaseIdParameter);
        }
    
        public virtual ObjectResult<spApplicantSpecilityWithMarksByApplicantParam_Result> spApplicantSpecilityWithMarksByApplicantParam(Nullable<int> applicantId, Nullable<int> inductionId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantSpecilityWithMarksByApplicantParam_Result>("spApplicantSpecilityWithMarksByApplicantParam", applicantIdParameter, inductionIdParameter);
        }
    
        public virtual int spApplicantStatusAdd(Nullable<int> inductionId, Nullable<int> applicantId, Nullable<int> statusTypeId, Nullable<int> status)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantStatusAdd", inductionIdParameter, applicantIdParameter, statusTypeIdParameter, statusParameter);
        }
    
        public virtual int spApplicantStatusCreateHistory(Nullable<int> applicationStatusId)
        {
            var applicationStatusIdParameter = applicationStatusId.HasValue ?
                new ObjectParameter("applicationStatusId", applicationStatusId) :
                new ObjectParameter("applicationStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantStatusCreateHistory", applicationStatusIdParameter);
        }
    
        public virtual ObjectResult<spApplicantStatusGetAll_Result> spApplicantStatusGetAll(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> statusTypeId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantStatusGetAll_Result>("spApplicantStatusGetAll", inductionIdParameter, phaseIdParameter, statusTypeIdParameter);
        }
    
        public virtual ObjectResult<spApplicantStatusJoining_Result> spApplicantStatusJoining(Nullable<int> applicantId, Nullable<int> statusTypeId, Nullable<int> statusId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantStatusJoining_Result>("spApplicantStatusJoining", applicantIdParameter, statusTypeIdParameter, statusIdParameter);
        }
    
        public virtual int spApplicantStatusSetDebar(Nullable<int> inductionId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantStatusSetDebar", inductionIdParameter);
        }
    
        public virtual ObjectResult<spApplicantStatusUpdate_Result> spApplicantStatusUpdate(Nullable<int> applicantId, Nullable<int> statusTypeId, Nullable<int> statusId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantStatusUpdate_Result>("spApplicantStatusUpdate", applicantIdParameter, statusTypeIdParameter, statusIdParameter);
        }
    
        public virtual ObjectResult<spApplicantStatusUpdateAmendment_Result> spApplicantStatusUpdateAmendment(Nullable<int> applicantId, Nullable<int> statusTypeId, Nullable<int> statusId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantStatusUpdateAmendment_Result>("spApplicantStatusUpdateAmendment", applicantIdParameter, statusTypeIdParameter, statusIdParameter);
        }
    
        public virtual ObjectResult<spApplicantStatusUpdateMerit_Result> spApplicantStatusUpdateMerit(Nullable<int> applicantId, Nullable<int> statusTypeId, Nullable<int> statusId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantStatusUpdateMerit_Result>("spApplicantStatusUpdateMerit", applicantIdParameter, statusTypeIdParameter, statusIdParameter);
        }
    
        public virtual ObjectResult<spApplicantStatusUpdateProfile_Result> spApplicantStatusUpdateProfile(Nullable<int> applicantId, Nullable<int> statusTypeId, Nullable<int> statusId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantStatusUpdateProfile_Result>("spApplicantStatusUpdateProfile", applicantIdParameter, statusTypeIdParameter, statusIdParameter);
        }
    
        public virtual ObjectResult<spApplicantStatusUpdateRemoveFromDebar_Result> spApplicantStatusUpdateRemoveFromDebar(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantStatusUpdateRemoveFromDebar_Result>("spApplicantStatusUpdateRemoveFromDebar", applicantIdParameter);
        }
    
        public virtual ObjectResult<spApplicantStatusUpdateReOpen_Result> spApplicantStatusUpdateReOpen(Nullable<int> applicantId, Nullable<int> statusTypeId, Nullable<int> statusId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantStatusUpdateReOpen_Result>("spApplicantStatusUpdateReOpen", applicantIdParameter, statusTypeIdParameter, statusIdParameter);
        }
    
        public virtual ObjectResult<spApplicantStatusUpdateVerification_Result> spApplicantStatusUpdateVerification(Nullable<int> applicantId, Nullable<int> statusTypeId, Nullable<int> statusId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantStatusUpdateVerification_Result>("spApplicantStatusUpdateVerification", applicantIdParameter, statusTypeIdParameter, statusIdParameter);
        }
    
        public virtual ObjectResult<spApplicantSupervisorStatusGetAll_Result> spApplicantSupervisorStatusGetAll(Nullable<int> adminId)
        {
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantSupervisorStatusGetAll_Result>("spApplicantSupervisorStatusGetAll", adminIdParameter);
        }
    
        public virtual ObjectResult<spApplicantUpdate_Result> spApplicantUpdate(Nullable<int> applicantId, string name, string pmdcNo, string emailId, string contactNumber, Nullable<int> adminId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var pmdcNoParameter = pmdcNo != null ?
                new ObjectParameter("pmdcNo", pmdcNo) :
                new ObjectParameter("pmdcNo", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("contactNumber", contactNumber) :
                new ObjectParameter("contactNumber", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantUpdate_Result>("spApplicantUpdate", applicantIdParameter, nameParameter, pmdcNoParameter, emailIdParameter, contactNumberParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spApplicantUpdateAdmin_Result> spApplicantUpdateAdmin(Nullable<int> applicantId, string name, string pmdcNo, string emailId, string contactNumber, Nullable<int> facultyId, Nullable<int> adminId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var pmdcNoParameter = pmdcNo != null ?
                new ObjectParameter("pmdcNo", pmdcNo) :
                new ObjectParameter("pmdcNo", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("contactNumber", contactNumber) :
                new ObjectParameter("contactNumber", typeof(string));
    
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("facultyId", facultyId) :
                new ObjectParameter("facultyId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantUpdateAdmin_Result>("spApplicantUpdateAdmin", applicantIdParameter, nameParameter, pmdcNoParameter, emailIdParameter, contactNumberParameter, facultyIdParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spApplicantVoucherAddUpdate_Result> spApplicantVoucherAddUpdate(Nullable<int> applicantId, Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> amount, string branchCode, string voucherImage, string ibn, string accountNo, string accountTitle, Nullable<System.DateTime> submittedDate)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var branchCodeParameter = branchCode != null ?
                new ObjectParameter("branchCode", branchCode) :
                new ObjectParameter("branchCode", typeof(string));
    
            var voucherImageParameter = voucherImage != null ?
                new ObjectParameter("voucherImage", voucherImage) :
                new ObjectParameter("voucherImage", typeof(string));
    
            var ibnParameter = ibn != null ?
                new ObjectParameter("ibn", ibn) :
                new ObjectParameter("ibn", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("accountNo", accountNo) :
                new ObjectParameter("accountNo", typeof(string));
    
            var accountTitleParameter = accountTitle != null ?
                new ObjectParameter("accountTitle", accountTitle) :
                new ObjectParameter("accountTitle", typeof(string));
    
            var submittedDateParameter = submittedDate.HasValue ?
                new ObjectParameter("submittedDate", submittedDate) :
                new ObjectParameter("submittedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantVoucherAddUpdate_Result>("spApplicantVoucherAddUpdate", applicantIdParameter, inductionIdParameter, phaseIdParameter, amountParameter, branchCodeParameter, voucherImageParameter, ibnParameter, accountNoParameter, accountTitleParameter, submittedDateParameter);
        }
    
        public virtual ObjectResult<spApplicantVoucherAddUpdateAdmin_Result> spApplicantVoucherAddUpdateAdmin(Nullable<int> applicantId, Nullable<int> amount, string branchCode, string voucherImage, string ibn, string accountNo, string accountTitle, Nullable<System.DateTime> submittedDate, Nullable<int> adminId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var branchCodeParameter = branchCode != null ?
                new ObjectParameter("branchCode", branchCode) :
                new ObjectParameter("branchCode", typeof(string));
    
            var voucherImageParameter = voucherImage != null ?
                new ObjectParameter("voucherImage", voucherImage) :
                new ObjectParameter("voucherImage", typeof(string));
    
            var ibnParameter = ibn != null ?
                new ObjectParameter("ibn", ibn) :
                new ObjectParameter("ibn", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("accountNo", accountNo) :
                new ObjectParameter("accountNo", typeof(string));
    
            var accountTitleParameter = accountTitle != null ?
                new ObjectParameter("accountTitle", accountTitle) :
                new ObjectParameter("accountTitle", typeof(string));
    
            var submittedDateParameter = submittedDate.HasValue ?
                new ObjectParameter("submittedDate", submittedDate) :
                new ObjectParameter("submittedDate", typeof(System.DateTime));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicantVoucherAddUpdateAdmin_Result>("spApplicantVoucherAddUpdateAdmin", applicantIdParameter, amountParameter, branchCodeParameter, voucherImageParameter, ibnParameter, accountNoParameter, accountTitleParameter, submittedDateParameter, adminIdParameter);
        }
    
        public virtual int spApplicantVoucherAddUpdateBank(string applicantNo, Nullable<decimal> amount, string transactionIdBank, Nullable<int> statusBank, Nullable<int> transactionType)
        {
            var applicantNoParameter = applicantNo != null ?
                new ObjectParameter("applicantNo", applicantNo) :
                new ObjectParameter("applicantNo", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var transactionIdBankParameter = transactionIdBank != null ?
                new ObjectParameter("transactionIdBank", transactionIdBank) :
                new ObjectParameter("transactionIdBank", typeof(string));
    
            var statusBankParameter = statusBank.HasValue ?
                new ObjectParameter("statusBank", statusBank) :
                new ObjectParameter("statusBank", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("transactionType", transactionType) :
                new ObjectParameter("transactionType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantVoucherAddUpdateBank", applicantNoParameter, amountParameter, transactionIdBankParameter, statusBankParameter, transactionTypeParameter);
        }
    
        public virtual int spApplicantVoucherGetByApplicantNo(string applicantNo, Nullable<int> transactionType)
        {
            var applicantNoParameter = applicantNo != null ?
                new ObjectParameter("applicantNo", applicantNo) :
                new ObjectParameter("applicantNo", typeof(string));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("transactionType", transactionType) :
                new ObjectParameter("transactionType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicantVoucherGetByApplicantNo", applicantNoParameter, transactionTypeParameter);
        }
    
        public virtual int spApplicationAmendmentStatusGetById(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplicationAmendmentStatusGetById", applicantIdParameter);
        }
    
        public virtual ObjectResult<spApplicationApprovalStatusGetById_Result> spApplicationApprovalStatusGetById(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicationApprovalStatusGetById_Result>("spApplicationApprovalStatusGetById", inductionIdParameter, phaseIdParameter, applicantIdParameter);
        }
    
        public virtual ObjectResult<spApplicationApprovalStatusGetByTypeAndId_Result> spApplicationApprovalStatusGetByTypeAndId(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> approvalStatusTypeId, Nullable<int> applicantId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var approvalStatusTypeIdParameter = approvalStatusTypeId.HasValue ?
                new ObjectParameter("approvalStatusTypeId", approvalStatusTypeId) :
                new ObjectParameter("approvalStatusTypeId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicationApprovalStatusGetByTypeAndId_Result>("spApplicationApprovalStatusGetByTypeAndId", inductionIdParameter, phaseIdParameter, approvalStatusTypeIdParameter, applicantIdParameter);
        }
    
        public virtual ObjectResult<spApplicationReopen_Result> spApplicationReopen(Nullable<int> applicantId, Nullable<int> status)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicationReopen_Result>("spApplicationReopen", applicantIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<spApplicationStatusGet_Result> spApplicationStatusGet(Nullable<int> applicantId, Nullable<int> statusTypeId, Nullable<int> inductionId, Nullable<int> phaseId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicationStatusGet_Result>("spApplicationStatusGet", applicantIdParameter, statusTypeIdParameter, inductionIdParameter, phaseIdParameter);
        }
    
        public virtual ObjectResult<spApplicationStatusGetAll_Result> spApplicationStatusGetAll(Nullable<int> applicantId, Nullable<int> inductionId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplicationStatusGetAll_Result>("spApplicationStatusGetAll", applicantIdParameter, inductionIdParameter);
        }
    
        public virtual ObjectResult<spBedsAddUpdate_Result> spBedsAddUpdate(Nullable<int> bedId, Nullable<int> inductionId, Nullable<int> hospitalId, Nullable<int> departmentId, Nullable<int> unitId, Nullable<int> disciplineId, Nullable<int> specialityId, Nullable<int> bedsER, Nullable<int> bedsICU, Nullable<int> bedsOther, Nullable<int> bedsWards, string remarksN, string imageN, Nullable<int> bedsDep, string remarksDep, string imageDep, Nullable<int> adminId)
        {
            var bedIdParameter = bedId.HasValue ?
                new ObjectParameter("bedId", bedId) :
                new ObjectParameter("bedId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("unitId", unitId) :
                new ObjectParameter("unitId", typeof(int));
    
            var disciplineIdParameter = disciplineId.HasValue ?
                new ObjectParameter("disciplineId", disciplineId) :
                new ObjectParameter("disciplineId", typeof(int));
    
            var specialityIdParameter = specialityId.HasValue ?
                new ObjectParameter("specialityId", specialityId) :
                new ObjectParameter("specialityId", typeof(int));
    
            var bedsERParameter = bedsER.HasValue ?
                new ObjectParameter("bedsER", bedsER) :
                new ObjectParameter("bedsER", typeof(int));
    
            var bedsICUParameter = bedsICU.HasValue ?
                new ObjectParameter("bedsICU", bedsICU) :
                new ObjectParameter("bedsICU", typeof(int));
    
            var bedsOtherParameter = bedsOther.HasValue ?
                new ObjectParameter("bedsOther", bedsOther) :
                new ObjectParameter("bedsOther", typeof(int));
    
            var bedsWardsParameter = bedsWards.HasValue ?
                new ObjectParameter("bedsWards", bedsWards) :
                new ObjectParameter("bedsWards", typeof(int));
    
            var remarksNParameter = remarksN != null ?
                new ObjectParameter("remarksN", remarksN) :
                new ObjectParameter("remarksN", typeof(string));
    
            var imageNParameter = imageN != null ?
                new ObjectParameter("imageN", imageN) :
                new ObjectParameter("imageN", typeof(string));
    
            var bedsDepParameter = bedsDep.HasValue ?
                new ObjectParameter("bedsDep", bedsDep) :
                new ObjectParameter("bedsDep", typeof(int));
    
            var remarksDepParameter = remarksDep != null ?
                new ObjectParameter("remarksDep", remarksDep) :
                new ObjectParameter("remarksDep", typeof(string));
    
            var imageDepParameter = imageDep != null ?
                new ObjectParameter("imageDep", imageDep) :
                new ObjectParameter("imageDep", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spBedsAddUpdate_Result>("spBedsAddUpdate", bedIdParameter, inductionIdParameter, hospitalIdParameter, departmentIdParameter, unitIdParameter, disciplineIdParameter, specialityIdParameter, bedsERParameter, bedsICUParameter, bedsOtherParameter, bedsWardsParameter, remarksNParameter, imageNParameter, bedsDepParameter, remarksDepParameter, imageDepParameter, adminIdParameter);
        }
    
        public virtual int spBedsCreateHistory(Nullable<int> bedId)
        {
            var bedIdParameter = bedId.HasValue ?
                new ObjectParameter("bedId", bedId) :
                new ObjectParameter("bedId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spBedsCreateHistory", bedIdParameter);
        }
    
        public virtual ObjectResult<spBedsDelete_Result> spBedsDelete(Nullable<int> hospitalId, Nullable<int> bedId)
        {
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var bedIdParameter = bedId.HasValue ?
                new ObjectParameter("bedId", bedId) :
                new ObjectParameter("bedId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spBedsDelete_Result>("spBedsDelete", hospitalIdParameter, bedIdParameter);
        }
    
        public virtual ObjectResult<spBedsReportWithApprovalStatus_Result> spBedsReportWithApprovalStatus(Nullable<int> hospitalId, string search)
        {
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spBedsReportWithApprovalStatus_Result>("spBedsReportWithApprovalStatus", hospitalIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spCalenderLevel_Result> spCalenderLevel(Nullable<int> levelId, Nullable<int> inductionId)
        {
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("levelId", levelId) :
                new ObjectParameter("levelId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCalenderLevel_Result>("spCalenderLevel", levelIdParameter, inductionIdParameter);
        }
    
        public virtual ObjectResult<spCalenderLevelGetByLevelAndInduction_Result> spCalenderLevelGetByLevelAndInduction(Nullable<int> levelId, Nullable<int> inductionId)
        {
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("levelId", levelId) :
                new ObjectParameter("levelId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCalenderLevelGetByLevelAndInduction_Result>("spCalenderLevelGetByLevelAndInduction", levelIdParameter, inductionIdParameter);
        }
    
        public virtual ObjectResult<spCalenderStatusGetByStep_Result> spCalenderStatusGetByStep(Nullable<int> calendarId)
        {
            var calendarIdParameter = calendarId.HasValue ?
                new ObjectParameter("calendarId", calendarId) :
                new ObjectParameter("calendarId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCalenderStatusGetByStep_Result>("spCalenderStatusGetByStep", calendarIdParameter);
        }
    
        public virtual ObjectResult<spCheckDebarApplicant_Result> spCheckDebarApplicant(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCheckDebarApplicant_Result>("spCheckDebarApplicant", applicantIdParameter);
        }
    
        public virtual ObjectResult<spCheckMeritStep01_Result> spCheckMeritStep01(Nullable<int> roundNo, Nullable<int> typeId)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCheckMeritStep01_Result>("spCheckMeritStep01", roundNoParameter, typeIdParameter);
        }
    
        public virtual int spConsentAddNotChosenRemaning(Nullable<int> inductionId, Nullable<int> roundId, Nullable<int> typeId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var roundIdParameter = roundId.HasValue ?
                new ObjectParameter("roundId", roundId) :
                new ObjectParameter("roundId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spConsentAddNotChosenRemaning", inductionIdParameter, roundIdParameter, typeIdParameter);
        }
    
        public virtual ObjectResult<spConsentAddUpdate_Result> spConsentAddUpdate(Nullable<int> roundId, Nullable<int> applicantId, Nullable<int> typeId, Nullable<int> consentTypeId, Nullable<int> detailId, string img, string otp, string mobileNumber)
        {
            var roundIdParameter = roundId.HasValue ?
                new ObjectParameter("roundId", roundId) :
                new ObjectParameter("roundId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var consentTypeIdParameter = consentTypeId.HasValue ?
                new ObjectParameter("consentTypeId", consentTypeId) :
                new ObjectParameter("consentTypeId", typeof(int));
    
            var detailIdParameter = detailId.HasValue ?
                new ObjectParameter("detailId", detailId) :
                new ObjectParameter("detailId", typeof(int));
    
            var imgParameter = img != null ?
                new ObjectParameter("img", img) :
                new ObjectParameter("img", typeof(string));
    
            var otpParameter = otp != null ?
                new ObjectParameter("otp", otp) :
                new ObjectParameter("otp", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("mobileNumber", mobileNumber) :
                new ObjectParameter("mobileNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConsentAddUpdate_Result>("spConsentAddUpdate", roundIdParameter, applicantIdParameter, typeIdParameter, consentTypeIdParameter, detailIdParameter, imgParameter, otpParameter, mobileNumberParameter);
        }
    
        public virtual ObjectResult<spConsentCheckBeforeNextRoundMeritStart_Result> spConsentCheckBeforeNextRoundMeritStart(Nullable<int> inductionId, Nullable<int> roundNo)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConsentCheckBeforeNextRoundMeritStart_Result>("spConsentCheckBeforeNextRoundMeritStart", inductionIdParameter, roundNoParameter);
        }
    
        public virtual int spConsentGetByApplicant(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spConsentGetByApplicant", applicantIdParameter);
        }
    
        public virtual ObjectResult<spConstantAddUpdate_Result> spConstantAddUpdate(Nullable<int> constantId, Nullable<int> id, string name, string code, Nullable<int> value, string nameDisplay, string shortDesc, string detail, Nullable<int> sortOrder, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<int> parentId, Nullable<int> typeId, Nullable<int> adminId)
        {
            var constantIdParameter = constantId.HasValue ?
                new ObjectParameter("constantId", constantId) :
                new ObjectParameter("constantId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(int));
    
            var nameDisplayParameter = nameDisplay != null ?
                new ObjectParameter("nameDisplay", nameDisplay) :
                new ObjectParameter("nameDisplay", typeof(string));
    
            var shortDescParameter = shortDesc != null ?
                new ObjectParameter("shortDesc", shortDesc) :
                new ObjectParameter("shortDesc", typeof(string));
    
            var detailParameter = detail != null ?
                new ObjectParameter("detail", detail) :
                new ObjectParameter("detail", typeof(string));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("isDeleted", isDeleted) :
                new ObjectParameter("isDeleted", typeof(bool));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConstantAddUpdate_Result>("spConstantAddUpdate", constantIdParameter, idParameter, nameParameter, codeParameter, valueParameter, nameDisplayParameter, shortDescParameter, detailParameter, sortOrderParameter, isActiveParameter, isDeletedParameter, parentIdParameter, typeIdParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spConstantForDDL_Result> spConstantForDDL(Nullable<int> typeId, Nullable<int> parentId, Nullable<int> reffId, Nullable<int> userId, string reffIds, string condition)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var reffIdsParameter = reffIds != null ?
                new ObjectParameter("reffIds", reffIds) :
                new ObjectParameter("reffIds", typeof(string));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConstantForDDL_Result>("spConstantForDDL", typeIdParameter, parentIdParameter, reffIdParameter, userIdParameter, reffIdsParameter, conditionParameter);
        }
    
        public virtual ObjectResult<spConstantGetByParam_Result> spConstantGetByParam(Nullable<int> typeId, Nullable<int> parentId, string search)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConstantGetByParam_Result>("spConstantGetByParam", typeIdParameter, parentIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spConstantGetByType_Result> spConstantGetByType(Nullable<int> typeId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConstantGetByType_Result>("spConstantGetByType", typeIdParameter);
        }
    
        public virtual ObjectResult<spConstantSearch_Result> spConstantSearch(Nullable<int> typeId, Nullable<int> parentId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConstantSearch_Result>("spConstantSearch", typeIdParameter, parentIdParameter);
        }
    
        public virtual ObjectResult<spContactAnswer_Result> spContactAnswer(Nullable<int> contactId, string answer, Nullable<int> adminId)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("contactId", contactId) :
                new ObjectParameter("contactId", typeof(int));
    
            var answerParameter = answer != null ?
                new ObjectParameter("answer", answer) :
                new ObjectParameter("answer", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spContactAnswer_Result>("spContactAnswer", contactIdParameter, answerParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spContactAnswerListGetById_Result> spContactAnswerListGetById(Nullable<int> contactId, Nullable<int> adminId)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("contactId", contactId) :
                new ObjectParameter("contactId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spContactAnswerListGetById_Result>("spContactAnswerListGetById", contactIdParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spContactAttendece_Result> spContactAttendece(Nullable<int> top, Nullable<int> pageNum, Nullable<int> typeId, string search)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spContactAttendece_Result>("spContactAttendece", topParameter, pageNumParameter, typeIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spContactAttendence_Result> spContactAttendence(Nullable<int> contactIdAttendenceId, Nullable<int> contactId, Nullable<int> inductionId, Nullable<int> applicantId, Nullable<int> isSelf, Nullable<int> relationId, Nullable<int> attendenceNo, Nullable<int> adminId)
        {
            var contactIdAttendenceIdParameter = contactIdAttendenceId.HasValue ?
                new ObjectParameter("contactIdAttendenceId", contactIdAttendenceId) :
                new ObjectParameter("contactIdAttendenceId", typeof(int));
    
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("contactId", contactId) :
                new ObjectParameter("contactId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var isSelfParameter = isSelf.HasValue ?
                new ObjectParameter("isSelf", isSelf) :
                new ObjectParameter("isSelf", typeof(int));
    
            var relationIdParameter = relationId.HasValue ?
                new ObjectParameter("relationId", relationId) :
                new ObjectParameter("relationId", typeof(int));
    
            var attendenceNoParameter = attendenceNo.HasValue ?
                new ObjectParameter("attendenceNo", attendenceNo) :
                new ObjectParameter("attendenceNo", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spContactAttendence_Result>("spContactAttendence", contactIdAttendenceIdParameter, contactIdParameter, inductionIdParameter, applicantIdParameter, isSelfParameter, relationIdParameter, attendenceNoParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spContactAttendenceCurrentForAttendnce_Result> spContactAttendenceCurrentForAttendnce(Nullable<int> top, Nullable<int> pageNum, Nullable<int> typeId, string search)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spContactAttendenceCurrentForAttendnce_Result>("spContactAttendenceCurrentForAttendnce", topParameter, pageNumParameter, typeIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spContactAttendenceCurrentForStatus_Result> spContactAttendenceCurrentForStatus(Nullable<int> top, Nullable<int> pageNum, Nullable<int> typeId, string search)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spContactAttendenceCurrentForStatus_Result>("spContactAttendenceCurrentForStatus", topParameter, pageNumParameter, typeIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spContactAttendencePrint_Result> spContactAttendencePrint(Nullable<int> start, Nullable<int> end, Nullable<int> typeId)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spContactAttendencePrint_Result>("spContactAttendencePrint", startParameter, endParameter, typeIdParameter);
        }
    
        public virtual ObjectResult<spContactAttendenceSearch_Result> spContactAttendenceSearch(Nullable<int> top, Nullable<int> pageNum, Nullable<int> typeId, string search)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spContactAttendenceSearch_Result>("spContactAttendenceSearch", topParameter, pageNumParameter, typeIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spContactAttendenceStatusPrint_Result> spContactAttendenceStatusPrint(Nullable<int> start, Nullable<int> end, Nullable<int> typeId, Nullable<int> dayNo)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var dayNoParameter = dayNo.HasValue ?
                new ObjectParameter("dayNo", dayNo) :
                new ObjectParameter("dayNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spContactAttendenceStatusPrint_Result>("spContactAttendenceStatusPrint", startParameter, endParameter, typeIdParameter, dayNoParameter);
        }
    
        public virtual ObjectResult<spContactDocsAdd_Result> spContactDocsAdd(Nullable<int> typeId, Nullable<int> contactId, string images)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("contactId", contactId) :
                new ObjectParameter("contactId", typeof(int));
    
            var imagesParameter = images != null ?
                new ObjectParameter("images", images) :
                new ObjectParameter("images", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spContactDocsAdd_Result>("spContactDocsAdd", typeIdParameter, contactIdParameter, imagesParameter);
        }
    
        public virtual ObjectResult<spContactQuestion_Result> spContactQuestion(Nullable<int> projId, Nullable<int> typeId, string name, Nullable<int> applicantId, string pmdcNo, string emailId, string info, string title, string question)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var pmdcNoParameter = pmdcNo != null ?
                new ObjectParameter("pmdcNo", pmdcNo) :
                new ObjectParameter("pmdcNo", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var infoParameter = info != null ?
                new ObjectParameter("info", info) :
                new ObjectParameter("info", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var questionParameter = question != null ?
                new ObjectParameter("question", question) :
                new ObjectParameter("question", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spContactQuestion_Result>("spContactQuestion", projIdParameter, typeIdParameter, nameParameter, applicantIdParameter, pmdcNoParameter, emailIdParameter, infoParameter, titleParameter, questionParameter);
        }
    
        public virtual ObjectResult<spContactQuestionGetById_Result> spContactQuestionGetById(Nullable<int> contactId, Nullable<int> adminId)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("contactId", contactId) :
                new ObjectParameter("contactId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spContactQuestionGetById_Result>("spContactQuestionGetById", contactIdParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spContactQuestionGetNoReplied_Result> spContactQuestionGetNoReplied(Nullable<int> adminId)
        {
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spContactQuestionGetNoReplied_Result>("spContactQuestionGetNoReplied", adminIdParameter);
        }
    
        public virtual ObjectResult<spContactQuestionSearch_Result> spContactQuestionSearch(Nullable<int> top, Nullable<int> pageNum, Nullable<int> inductionId, Nullable<int> typeId, string search, Nullable<int> adminId)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spContactQuestionSearch_Result>("spContactQuestionSearch", topParameter, pageNumParameter, inductionIdParameter, typeIdParameter, searchParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spContactStatus_Result> spContactStatus(Nullable<int> inductionId, Nullable<int> typeId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spContactStatus_Result>("spContactStatus", inductionIdParameter, typeIdParameter);
        }
    
        public virtual ObjectResult<spContactStatusAddUpdate_Result> spContactStatusAddUpdate(Nullable<int> id, Nullable<int> contactId, string comments, Nullable<int> statusId, Nullable<int> adminId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("contactId", contactId) :
                new ObjectParameter("contactId", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("comments", comments) :
                new ObjectParameter("comments", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spContactStatusAddUpdate_Result>("spContactStatusAddUpdate", idParameter, contactIdParameter, commentsParameter, statusIdParameter, adminIdParameter);
        }
    
        public virtual int spDDL(Nullable<int> inductionId, Nullable<int> parentId, Nullable<int> typeId, Nullable<int> reffId, string reffIds, string section, string orderby, string orderType, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var reffIdsParameter = reffIds != null ?
                new ObjectParameter("reffIds", reffIds) :
                new ObjectParameter("reffIds", typeof(string));
    
            var sectionParameter = section != null ?
                new ObjectParameter("section", section) :
                new ObjectParameter("section", typeof(string));
    
            var orderbyParameter = orderby != null ?
                new ObjectParameter("orderby", orderby) :
                new ObjectParameter("orderby", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("orderType", orderType) :
                new ObjectParameter("orderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDDL", inductionIdParameter, parentIdParameter, typeIdParameter, reffIdParameter, reffIdsParameter, sectionParameter, orderbyParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<string> spDecryptString(string password)
        {
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spDecryptString", passwordParameter);
        }
    
        public virtual ObjectResult<spDepartmentAddUpdate_Result> spDepartmentAddUpdate(Nullable<int> departmentId, string name, string code, Nullable<int> typeId, Nullable<bool> isActive, Nullable<int> adminId)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDepartmentAddUpdate_Result>("spDepartmentAddUpdate", departmentIdParameter, nameParameter, codeParameter, typeIdParameter, isActiveParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spDepartmentForHospital_Result> spDepartmentForHospital(Nullable<int> hospitalId)
        {
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDepartmentForHospital_Result>("spDepartmentForHospital", hospitalIdParameter);
        }
    
        public virtual ObjectResult<spDepartmentHospitalAddUpdate_Result> spDepartmentHospitalAddUpdate(Nullable<int> hospitalId, string ids, Nullable<int> adminId)
        {
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var idsParameter = ids != null ?
                new ObjectParameter("ids", ids) :
                new ObjectParameter("ids", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDepartmentHospitalAddUpdate_Result>("spDepartmentHospitalAddUpdate", hospitalIdParameter, idsParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spDisciplineAddUpdate_Result> spDisciplineAddUpdate(Nullable<int> disciplineId, string name, string code, Nullable<int> typeId, Nullable<int> adminId, string typeIds)
        {
            var disciplineIdParameter = disciplineId.HasValue ?
                new ObjectParameter("disciplineId", disciplineId) :
                new ObjectParameter("disciplineId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            var typeIdsParameter = typeIds != null ?
                new ObjectParameter("typeIds", typeIds) :
                new ObjectParameter("typeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDisciplineAddUpdate_Result>("spDisciplineAddUpdate", disciplineIdParameter, nameParameter, codeParameter, typeIdParameter, adminIdParameter, typeIdsParameter);
        }
    
        public virtual ObjectResult<spDisciplineGetById_Result> spDisciplineGetById(Nullable<int> disciplineId)
        {
            var disciplineIdParameter = disciplineId.HasValue ?
                new ObjectParameter("disciplineId", disciplineId) :
                new ObjectParameter("disciplineId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDisciplineGetById_Result>("spDisciplineGetById", disciplineIdParameter);
        }
    
        public virtual ObjectResult<spDisciplineSearch_Result> spDisciplineSearch(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDisciplineSearch_Result>("spDisciplineSearch", searchParameter);
        }
    
        public virtual ObjectResult<spDsbSeatsStatus_Result> spDsbSeatsStatus(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> top, Nullable<int> pageNum, Nullable<int> typeId, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDsbSeatsStatus_Result>("spDsbSeatsStatus", inductionIdParameter, phaseIdParameter, topParameter, pageNumParameter, typeIdParameter, searchParameter);
        }
    
        public virtual int spEmailProcessAdd(Nullable<int> applicantId, Nullable<int> typeId, string keyword, Nullable<int> adminId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmailProcessAdd", applicantIdParameter, typeIdParameter, keywordParameter, adminIdParameter);
        }
    
        public virtual int spEmailProcessAddBulk(Nullable<int> typeId, Nullable<int> adminId, string keyword)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmailProcessAddBulk", typeIdParameter, adminIdParameter, keywordParameter);
        }
    
        public virtual int spEmailProcessByTypeRemaningSendEmail(Nullable<int> typeId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmailProcessByTypeRemaningSendEmail", typeIdParameter);
        }
    
        public virtual ObjectResult<spEmailProcessGetAllRemaninig_Result> spEmailProcessGetAllRemaninig()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmailProcessGetAllRemaninig_Result>("spEmailProcessGetAllRemaninig");
        }
    
        public virtual int spEmailProcessGetByApplicantAndType(Nullable<int> applicantId, Nullable<int> typeId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmailProcessGetByApplicantAndType", applicantIdParameter, typeIdParameter);
        }
    
        public virtual int spEmailProcessGetByType(Nullable<int> typeId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmailProcessGetByType", typeIdParameter);
        }
    
        public virtual ObjectResult<spEmailProcessGetInfoByType_Result> spEmailProcessGetInfoByType(Nullable<int> inductionId, Nullable<int> applicantId, Nullable<int> typeId, string reffIds1, string reffIds2, string reffIds3, string reffIds4, string reffIds5, string search, Nullable<bool> isView)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var reffIds1Parameter = reffIds1 != null ?
                new ObjectParameter("reffIds1", reffIds1) :
                new ObjectParameter("reffIds1", typeof(string));
    
            var reffIds2Parameter = reffIds2 != null ?
                new ObjectParameter("reffIds2", reffIds2) :
                new ObjectParameter("reffIds2", typeof(string));
    
            var reffIds3Parameter = reffIds3 != null ?
                new ObjectParameter("reffIds3", reffIds3) :
                new ObjectParameter("reffIds3", typeof(string));
    
            var reffIds4Parameter = reffIds4 != null ?
                new ObjectParameter("reffIds4", reffIds4) :
                new ObjectParameter("reffIds4", typeof(string));
    
            var reffIds5Parameter = reffIds5 != null ?
                new ObjectParameter("reffIds5", reffIds5) :
                new ObjectParameter("reffIds5", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var isViewParameter = isView.HasValue ?
                new ObjectParameter("isView", isView) :
                new ObjectParameter("isView", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmailProcessGetInfoByType_Result>("spEmailProcessGetInfoByType", inductionIdParameter, applicantIdParameter, typeIdParameter, reffIds1Parameter, reffIds2Parameter, reffIds3Parameter, reffIds4Parameter, reffIds5Parameter, searchParameter, isViewParameter);
        }
    
        public virtual ObjectResult<spEmailProcessGetInfoByTypeBk_Result> spEmailProcessGetInfoByTypeBk(Nullable<int> inductionId, Nullable<int> applicantId, Nullable<int> typeId, string reffIds1, string reffIds2, string reffIds3, string reffIds4, string reffIds5, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var reffIds1Parameter = reffIds1 != null ?
                new ObjectParameter("reffIds1", reffIds1) :
                new ObjectParameter("reffIds1", typeof(string));
    
            var reffIds2Parameter = reffIds2 != null ?
                new ObjectParameter("reffIds2", reffIds2) :
                new ObjectParameter("reffIds2", typeof(string));
    
            var reffIds3Parameter = reffIds3 != null ?
                new ObjectParameter("reffIds3", reffIds3) :
                new ObjectParameter("reffIds3", typeof(string));
    
            var reffIds4Parameter = reffIds4 != null ?
                new ObjectParameter("reffIds4", reffIds4) :
                new ObjectParameter("reffIds4", typeof(string));
    
            var reffIds5Parameter = reffIds5 != null ?
                new ObjectParameter("reffIds5", reffIds5) :
                new ObjectParameter("reffIds5", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmailProcessGetInfoByTypeBk_Result>("spEmailProcessGetInfoByTypeBk", inductionIdParameter, applicantIdParameter, typeIdParameter, reffIds1Parameter, reffIds2Parameter, reffIds3Parameter, reffIds4Parameter, reffIds5Parameter, searchParameter);
        }
    
        public virtual ObjectResult<spEmailProcessGetRemaning_Result> spEmailProcessGetRemaning()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmailProcessGetRemaning_Result>("spEmailProcessGetRemaning");
        }
    
        public virtual ObjectResult<spEmailProcessUpdateStatus_Result> spEmailProcessUpdateStatus(Nullable<int> emailProcessId, Nullable<int> typeId, Nullable<int> applicantId, Nullable<int> isProcess, Nullable<int> isSent, string emailId, string body, string resp, Nullable<int> adminId)
        {
            var emailProcessIdParameter = emailProcessId.HasValue ?
                new ObjectParameter("emailProcessId", emailProcessId) :
                new ObjectParameter("emailProcessId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var isProcessParameter = isProcess.HasValue ?
                new ObjectParameter("isProcess", isProcess) :
                new ObjectParameter("isProcess", typeof(int));
    
            var isSentParameter = isSent.HasValue ?
                new ObjectParameter("isSent", isSent) :
                new ObjectParameter("isSent", typeof(int));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("body", body) :
                new ObjectParameter("body", typeof(string));
    
            var respParameter = resp != null ?
                new ObjectParameter("resp", resp) :
                new ObjectParameter("resp", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmailProcessUpdateStatus_Result>("spEmailProcessUpdateStatus", emailProcessIdParameter, typeIdParameter, applicantIdParameter, isProcessParameter, isSentParameter, emailIdParameter, bodyParameter, respParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spEmailProcessUpdateStatusByProcessIds_Result> spEmailProcessUpdateStatusByProcessIds(string emailProcessIds)
        {
            var emailProcessIdsParameter = emailProcessIds != null ?
                new ObjectParameter("emailProcessIds", emailProcessIds) :
                new ObjectParameter("emailProcessIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmailProcessUpdateStatusByProcessIds_Result>("spEmailProcessUpdateStatusByProcessIds", emailProcessIdsParameter);
        }
    
        public virtual ObjectResult<spEmailStatusAddUpdate_Result> spEmailStatusAddUpdate(Nullable<int> emailStatusId, Nullable<int> applicantId, Nullable<int> typeId, Nullable<int> statusId, string statusMessage, string body, Nullable<int> adminId, Nullable<System.DateTime> sechduleDate)
        {
            var emailStatusIdParameter = emailStatusId.HasValue ?
                new ObjectParameter("emailStatusId", emailStatusId) :
                new ObjectParameter("emailStatusId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var statusMessageParameter = statusMessage != null ?
                new ObjectParameter("statusMessage", statusMessage) :
                new ObjectParameter("statusMessage", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("body", body) :
                new ObjectParameter("body", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            var sechduleDateParameter = sechduleDate.HasValue ?
                new ObjectParameter("sechduleDate", sechduleDate) :
                new ObjectParameter("sechduleDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmailStatusAddUpdate_Result>("spEmailStatusAddUpdate", emailStatusIdParameter, applicantIdParameter, typeIdParameter, statusIdParameter, statusMessageParameter, bodyParameter, adminIdParameter, sechduleDateParameter);
        }
    
        public virtual int spEmailStatusRemaningRecords(string condition)
        {
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmailStatusRemaningRecords", conditionParameter);
        }
    
        public virtual ObjectResult<spEmailTemplateAddUpdate_Result> spEmailTemplateAddUpdate(Nullable<int> tempId, Nullable<int> typeId, Nullable<int> inductionId, string title, string subject, string body, Nullable<bool> isActive, Nullable<int> adminId)
        {
            var tempIdParameter = tempId.HasValue ?
                new ObjectParameter("tempId", tempId) :
                new ObjectParameter("tempId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("subject", subject) :
                new ObjectParameter("subject", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("body", body) :
                new ObjectParameter("body", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmailTemplateAddUpdate_Result>("spEmailTemplateAddUpdate", tempIdParameter, typeIdParameter, inductionIdParameter, titleParameter, subjectParameter, bodyParameter, isActiveParameter, adminIdParameter);
        }
    
        public virtual int spEmailTemplateByTypeId(Nullable<int> typeId, Nullable<int> inductionId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmailTemplateByTypeId", typeIdParameter, inductionIdParameter);
        }
    
        public virtual ObjectResult<spEmailTemplateGetInfoById_Result> spEmailTemplateGetInfoById(Nullable<int> tempId, Nullable<int> typeId)
        {
            var tempIdParameter = tempId.HasValue ?
                new ObjectParameter("tempId", tempId) :
                new ObjectParameter("tempId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmailTemplateGetInfoById_Result>("spEmailTemplateGetInfoById", tempIdParameter, typeIdParameter);
        }
    
        public virtual ObjectResult<spEmailTemplateSearch_Result> spEmailTemplateSearch(Nullable<int> inductionId, Nullable<int> typeId, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmailTemplateSearch_Result>("spEmailTemplateSearch", inductionIdParameter, typeIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spEmployeeAddUpdate_Result> spEmployeeAddUpdate(Nullable<int> employeeId, string name, Nullable<int> genderId, Nullable<int> relationId, string relationName, Nullable<int> martialStatusId, string cellNo, string cnic, Nullable<int> districtId, string address, Nullable<int> designationId, Nullable<int> degreeId, Nullable<int> hospitalId, Nullable<System.DateTime> joiningDate, string image, Nullable<bool> isActive, Nullable<int> yearExerience, string programIds, string rtmcNumber, string imageRTMC, Nullable<int> statusApproval, string uhsNumber, string imageUHS, Nullable<int> statusApprovalUHS, Nullable<int> adminId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var genderIdParameter = genderId.HasValue ?
                new ObjectParameter("genderId", genderId) :
                new ObjectParameter("genderId", typeof(int));
    
            var relationIdParameter = relationId.HasValue ?
                new ObjectParameter("relationId", relationId) :
                new ObjectParameter("relationId", typeof(int));
    
            var relationNameParameter = relationName != null ?
                new ObjectParameter("relationName", relationName) :
                new ObjectParameter("relationName", typeof(string));
    
            var martialStatusIdParameter = martialStatusId.HasValue ?
                new ObjectParameter("martialStatusId", martialStatusId) :
                new ObjectParameter("martialStatusId", typeof(int));
    
            var cellNoParameter = cellNo != null ?
                new ObjectParameter("cellNo", cellNo) :
                new ObjectParameter("cellNo", typeof(string));
    
            var cnicParameter = cnic != null ?
                new ObjectParameter("cnic", cnic) :
                new ObjectParameter("cnic", typeof(string));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("districtId", districtId) :
                new ObjectParameter("districtId", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var designationIdParameter = designationId.HasValue ?
                new ObjectParameter("designationId", designationId) :
                new ObjectParameter("designationId", typeof(int));
    
            var degreeIdParameter = degreeId.HasValue ?
                new ObjectParameter("degreeId", degreeId) :
                new ObjectParameter("degreeId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var joiningDateParameter = joiningDate.HasValue ?
                new ObjectParameter("joiningDate", joiningDate) :
                new ObjectParameter("joiningDate", typeof(System.DateTime));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var yearExerienceParameter = yearExerience.HasValue ?
                new ObjectParameter("yearExerience", yearExerience) :
                new ObjectParameter("yearExerience", typeof(int));
    
            var programIdsParameter = programIds != null ?
                new ObjectParameter("programIds", programIds) :
                new ObjectParameter("programIds", typeof(string));
    
            var rtmcNumberParameter = rtmcNumber != null ?
                new ObjectParameter("rtmcNumber", rtmcNumber) :
                new ObjectParameter("rtmcNumber", typeof(string));
    
            var imageRTMCParameter = imageRTMC != null ?
                new ObjectParameter("imageRTMC", imageRTMC) :
                new ObjectParameter("imageRTMC", typeof(string));
    
            var statusApprovalParameter = statusApproval.HasValue ?
                new ObjectParameter("statusApproval", statusApproval) :
                new ObjectParameter("statusApproval", typeof(int));
    
            var uhsNumberParameter = uhsNumber != null ?
                new ObjectParameter("uhsNumber", uhsNumber) :
                new ObjectParameter("uhsNumber", typeof(string));
    
            var imageUHSParameter = imageUHS != null ?
                new ObjectParameter("imageUHS", imageUHS) :
                new ObjectParameter("imageUHS", typeof(string));
    
            var statusApprovalUHSParameter = statusApprovalUHS.HasValue ?
                new ObjectParameter("statusApprovalUHS", statusApprovalUHS) :
                new ObjectParameter("statusApprovalUHS", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmployeeAddUpdate_Result>("spEmployeeAddUpdate", employeeIdParameter, nameParameter, genderIdParameter, relationIdParameter, relationNameParameter, martialStatusIdParameter, cellNoParameter, cnicParameter, districtIdParameter, addressParameter, designationIdParameter, degreeIdParameter, hospitalIdParameter, joiningDateParameter, imageParameter, isActiveParameter, yearExerienceParameter, programIdsParameter, rtmcNumberParameter, imageRTMCParameter, statusApprovalParameter, uhsNumberParameter, imageUHSParameter, statusApprovalUHSParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spEmployeeAttachHospital_Result> spEmployeeAttachHospital(Nullable<int> employeeId, Nullable<int> hospitalId, Nullable<int> adminId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmployeeAttachHospital_Result>("spEmployeeAttachHospital", employeeIdParameter, hospitalIdParameter, adminIdParameter);
        }
    
        public virtual int spEmployeeCreateHistory(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmployeeCreateHistory", employeeIdParameter);
        }
    
        public virtual ObjectResult<spEmployeeDelete_Result> spEmployeeDelete(Nullable<int> hospitalId, Nullable<int> employeeId)
        {
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmployeeDelete_Result>("spEmployeeDelete", hospitalIdParameter, employeeIdParameter);
        }
    
        public virtual ObjectResult<spEmployeeExperienceAddUpdate_Result> spEmployeeExperienceAddUpdate(Nullable<int> id, Nullable<int> employeeId, Nullable<int> typeId, Nullable<int> hospitalId, string hospitalName, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd, Nullable<bool> isCurrent, Nullable<int> executionType, Nullable<int> adminId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var hospitalNameParameter = hospitalName != null ?
                new ObjectParameter("hospitalName", hospitalName) :
                new ObjectParameter("hospitalName", typeof(string));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("dateStart", dateStart) :
                new ObjectParameter("dateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("dateEnd", dateEnd) :
                new ObjectParameter("dateEnd", typeof(System.DateTime));
    
            var isCurrentParameter = isCurrent.HasValue ?
                new ObjectParameter("isCurrent", isCurrent) :
                new ObjectParameter("isCurrent", typeof(bool));
    
            var executionTypeParameter = executionType.HasValue ?
                new ObjectParameter("executionType", executionType) :
                new ObjectParameter("executionType", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmployeeExperienceAddUpdate_Result>("spEmployeeExperienceAddUpdate", idParameter, employeeIdParameter, typeIdParameter, hospitalIdParameter, hospitalNameParameter, dateStartParameter, dateEndParameter, isCurrentParameter, executionTypeParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spEmployeeExperienceGet_Result> spEmployeeExperienceGet(Nullable<int> employeeId, Nullable<int> hospitalId, Nullable<int> adminId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmployeeExperienceGet_Result>("spEmployeeExperienceGet", employeeIdParameter, hospitalIdParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spEmployeeExperienceGetAllByParam_Result> spEmployeeExperienceGetAllByParam(Nullable<int> inductionId, Nullable<int> levelId, Nullable<int> levelTypeId, Nullable<int> statusTypeId, Nullable<int> statusId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("levelId", levelId) :
                new ObjectParameter("levelId", typeof(int));
    
            var levelTypeIdParameter = levelTypeId.HasValue ?
                new ObjectParameter("levelTypeId", levelTypeId) :
                new ObjectParameter("levelTypeId", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmployeeExperienceGetAllByParam_Result>("spEmployeeExperienceGetAllByParam", inductionIdParameter, levelIdParameter, levelTypeIdParameter, statusTypeIdParameter, statusIdParameter);
        }
    
        public virtual ObjectResult<spEmployeeExperienceGetAllPreInit_Result> spEmployeeExperienceGetAllPreInit(Nullable<int> inductionId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmployeeExperienceGetAllPreInit_Result>("spEmployeeExperienceGetAllPreInit", inductionIdParameter);
        }
    
        public virtual ObjectResult<spEmployeeIsExistsCellNo_Result> spEmployeeIsExistsCellNo(Nullable<int> hospitalId, Nullable<int> employeeId, string cellNo)
        {
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(int));
    
            var cellNoParameter = cellNo != null ?
                new ObjectParameter("cellNo", cellNo) :
                new ObjectParameter("cellNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmployeeIsExistsCellNo_Result>("spEmployeeIsExistsCellNo", hospitalIdParameter, employeeIdParameter, cellNoParameter);
        }
    
        public virtual ObjectResult<spEmployeeIsExistsCNIC_Result> spEmployeeIsExistsCNIC(Nullable<int> hospitalId, Nullable<int> employeeId, string cnic)
        {
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(int));
    
            var cnicParameter = cnic != null ?
                new ObjectParameter("cnic", cnic) :
                new ObjectParameter("cnic", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmployeeIsExistsCNIC_Result>("spEmployeeIsExistsCNIC", hospitalIdParameter, employeeIdParameter, cnicParameter);
        }
    
        public virtual ObjectResult<spEmployeeReportWithTraineeCount_Result> spEmployeeReportWithTraineeCount(Nullable<int> hospitalId, string search)
        {
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmployeeReportWithTraineeCount_Result>("spEmployeeReportWithTraineeCount", hospitalIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spEmployeeSearch_Result> spEmployeeSearch(Nullable<int> top, Nullable<int> pageNo, Nullable<int> hospitalId, Nullable<int> adminId, string search, Nullable<int> fetchTypeId)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("pageNo", pageNo) :
                new ObjectParameter("pageNo", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var fetchTypeIdParameter = fetchTypeId.HasValue ?
                new ObjectParameter("fetchTypeId", fetchTypeId) :
                new ObjectParameter("fetchTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmployeeSearch_Result>("spEmployeeSearch", topParameter, pageNoParameter, hospitalIdParameter, adminIdParameter, searchParameter, fetchTypeIdParameter);
        }
    
        public virtual ObjectResult<spEmployeeSearchReport_Result> spEmployeeSearchReport(Nullable<int> top, Nullable<int> pageNum, Nullable<int> adminId, Nullable<int> hospitalId, Nullable<int> genderId, Nullable<int> degreeId, Nullable<int> designationId, Nullable<int> specialityId, Nullable<int> reportTypeId, string search)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var genderIdParameter = genderId.HasValue ?
                new ObjectParameter("genderId", genderId) :
                new ObjectParameter("genderId", typeof(int));
    
            var degreeIdParameter = degreeId.HasValue ?
                new ObjectParameter("degreeId", degreeId) :
                new ObjectParameter("degreeId", typeof(int));
    
            var designationIdParameter = designationId.HasValue ?
                new ObjectParameter("designationId", designationId) :
                new ObjectParameter("designationId", typeof(int));
    
            var specialityIdParameter = specialityId.HasValue ?
                new ObjectParameter("specialityId", specialityId) :
                new ObjectParameter("specialityId", typeof(int));
    
            var reportTypeIdParameter = reportTypeId.HasValue ?
                new ObjectParameter("reportTypeId", reportTypeId) :
                new ObjectParameter("reportTypeId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmployeeSearchReport_Result>("spEmployeeSearchReport", topParameter, pageNumParameter, adminIdParameter, hospitalIdParameter, genderIdParameter, degreeIdParameter, designationIdParameter, specialityIdParameter, reportTypeIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spEmployeeSpecialityAddUpdate_Result> spEmployeeSpecialityAddUpdate(Nullable<int> id, Nullable<int> hospitalId, Nullable<int> employeeId, Nullable<int> typeId, Nullable<int> disciplineId, Nullable<int> specialityId, Nullable<int> adminId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var disciplineIdParameter = disciplineId.HasValue ?
                new ObjectParameter("disciplineId", disciplineId) :
                new ObjectParameter("disciplineId", typeof(int));
    
            var specialityIdParameter = specialityId.HasValue ?
                new ObjectParameter("specialityId", specialityId) :
                new ObjectParameter("specialityId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmployeeSpecialityAddUpdate_Result>("spEmployeeSpecialityAddUpdate", idParameter, hospitalIdParameter, employeeIdParameter, typeIdParameter, disciplineIdParameter, specialityIdParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spEmployeeTraineeAddUpdate_Result> spEmployeeTraineeAddUpdate(Nullable<int> inductionId, Nullable<int> applicantId, Nullable<int> employeeId, Nullable<int> hospitalId, Nullable<bool> isActive, Nullable<int> statusId, Nullable<int> adminId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmployeeTraineeAddUpdate_Result>("spEmployeeTraineeAddUpdate", inductionIdParameter, applicantIdParameter, employeeIdParameter, hospitalIdParameter, isActiveParameter, statusIdParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<string> spEncryptString(string password)
        {
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spEncryptString", passwordParameter);
        }
    
        public virtual int spExperienceContinuousMarksCalculateAdhocByApplicantId(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spExperienceContinuousMarksCalculateAdhocByApplicantId", applicantIdParameter);
        }
    
        public virtual int spExperienceContinuousMarksCalculateByApplicantId(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spExperienceContinuousMarksCalculateByApplicantId", applicantIdParameter);
        }
    
        public virtual int spExperienceContinuousMarksCalculateByApplicantIdBK(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spExperienceContinuousMarksCalculateByApplicantIdBK", applicantIdParameter);
        }
    
        public virtual int spExperienceMonthCalculateRunCycle()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spExperienceMonthCalculateRunCycle");
        }
    
        public virtual ObjectResult<spExtensionAddUpdate_Result> spExtensionAddUpdate(Nullable<int> applicantExtensionId, Nullable<int> applicantId, string imageApplicantion, Nullable<int> approvalBySupervisor, string imagePER, string imageNOC, string imagePMDC, string imageExtensionOrder, string imageJoiningOrder, string imageDoc1, string imageDoc2, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string remarks, Nullable<int> adminId, Nullable<int> noMonths, string imageInductionOrder, string rtmcUhsNo, string imageTothc, string imageJoat)
        {
            var applicantExtensionIdParameter = applicantExtensionId.HasValue ?
                new ObjectParameter("applicantExtensionId", applicantExtensionId) :
                new ObjectParameter("applicantExtensionId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var imageApplicantionParameter = imageApplicantion != null ?
                new ObjectParameter("imageApplicantion", imageApplicantion) :
                new ObjectParameter("imageApplicantion", typeof(string));
    
            var approvalBySupervisorParameter = approvalBySupervisor.HasValue ?
                new ObjectParameter("approvalBySupervisor", approvalBySupervisor) :
                new ObjectParameter("approvalBySupervisor", typeof(int));
    
            var imagePERParameter = imagePER != null ?
                new ObjectParameter("imagePER", imagePER) :
                new ObjectParameter("imagePER", typeof(string));
    
            var imageNOCParameter = imageNOC != null ?
                new ObjectParameter("imageNOC", imageNOC) :
                new ObjectParameter("imageNOC", typeof(string));
    
            var imagePMDCParameter = imagePMDC != null ?
                new ObjectParameter("imagePMDC", imagePMDC) :
                new ObjectParameter("imagePMDC", typeof(string));
    
            var imageExtensionOrderParameter = imageExtensionOrder != null ?
                new ObjectParameter("imageExtensionOrder", imageExtensionOrder) :
                new ObjectParameter("imageExtensionOrder", typeof(string));
    
            var imageJoiningOrderParameter = imageJoiningOrder != null ?
                new ObjectParameter("imageJoiningOrder", imageJoiningOrder) :
                new ObjectParameter("imageJoiningOrder", typeof(string));
    
            var imageDoc1Parameter = imageDoc1 != null ?
                new ObjectParameter("imageDoc1", imageDoc1) :
                new ObjectParameter("imageDoc1", typeof(string));
    
            var imageDoc2Parameter = imageDoc2 != null ?
                new ObjectParameter("imageDoc2", imageDoc2) :
                new ObjectParameter("imageDoc2", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            var noMonthsParameter = noMonths.HasValue ?
                new ObjectParameter("noMonths", noMonths) :
                new ObjectParameter("noMonths", typeof(int));
    
            var imageInductionOrderParameter = imageInductionOrder != null ?
                new ObjectParameter("imageInductionOrder", imageInductionOrder) :
                new ObjectParameter("imageInductionOrder", typeof(string));
    
            var rtmcUhsNoParameter = rtmcUhsNo != null ?
                new ObjectParameter("rtmcUhsNo", rtmcUhsNo) :
                new ObjectParameter("rtmcUhsNo", typeof(string));
    
            var imageTothcParameter = imageTothc != null ?
                new ObjectParameter("imageTothc", imageTothc) :
                new ObjectParameter("imageTothc", typeof(string));
    
            var imageJoatParameter = imageJoat != null ?
                new ObjectParameter("imageJoat", imageJoat) :
                new ObjectParameter("imageJoat", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spExtensionAddUpdate_Result>("spExtensionAddUpdate", applicantExtensionIdParameter, applicantIdParameter, imageApplicantionParameter, approvalBySupervisorParameter, imagePERParameter, imageNOCParameter, imagePMDCParameter, imageExtensionOrderParameter, imageJoiningOrderParameter, imageDoc1Parameter, imageDoc2Parameter, startDateParameter, endDateParameter, remarksParameter, adminIdParameter, noMonthsParameter, imageInductionOrderParameter, rtmcUhsNoParameter, imageTothcParameter, imageJoatParameter);
        }
    
        public virtual ObjectResult<spExtensionApprovalAddUpdate_Result> spExtensionApprovalAddUpdate(Nullable<int> actionId, Nullable<int> applicantId, Nullable<int> applicantLeaveId, string remarks, Nullable<int> adminId)
        {
            var actionIdParameter = actionId.HasValue ?
                new ObjectParameter("actionId", actionId) :
                new ObjectParameter("actionId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var applicantLeaveIdParameter = applicantLeaveId.HasValue ?
                new ObjectParameter("applicantLeaveId", applicantLeaveId) :
                new ObjectParameter("applicantLeaveId", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spExtensionApprovalAddUpdate_Result>("spExtensionApprovalAddUpdate", actionIdParameter, applicantIdParameter, applicantLeaveIdParameter, remarksParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spExtensionApprovalSearch_Result> spExtensionApprovalSearch(Nullable<int> pageNum, Nullable<int> top, Nullable<int> inductionId, Nullable<int> typeId, Nullable<int> instituteId, string search)
        {
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var instituteIdParameter = instituteId.HasValue ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spExtensionApprovalSearch_Result>("spExtensionApprovalSearch", pageNumParameter, topParameter, inductionIdParameter, typeIdParameter, instituteIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spFeedbackSearch_Result> spFeedbackSearch(Nullable<int> top, Nullable<int> pageNum, string search, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFeedbackSearch_Result>("spFeedbackSearch", topParameter, pageNumParameter, searchParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<spFrontDeskSearch_Result> spFrontDeskSearch(Nullable<int> top, Nullable<int> pageNo, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> projId, string search, Nullable<int> fetchTypeId)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("pageNo", pageNo) :
                new ObjectParameter("pageNo", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var fetchTypeIdParameter = fetchTypeId.HasValue ?
                new ObjectParameter("fetchTypeId", fetchTypeId) :
                new ObjectParameter("fetchTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFrontDeskSearch_Result>("spFrontDeskSearch", topParameter, pageNoParameter, startDateParameter, endDateParameter, projIdParameter, searchParameter, fetchTypeIdParameter);
        }
    
        public virtual ObjectResult<spGazatGetAllByTypeExport_Result> spGazatGetAllByTypeExport(Nullable<int> typeId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGazatGetAllByTypeExport_Result>("spGazatGetAllByTypeExport", typeIdParameter);
        }
    
        public virtual ObjectResult<spGazatGetAllByTypeView_Result> spGazatGetAllByTypeView(Nullable<int> top, Nullable<int> pageNum, Nullable<int> typeId, Nullable<int> inductionId, string search)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGazatGetAllByTypeView_Result>("spGazatGetAllByTypeView", topParameter, pageNumParameter, typeIdParameter, inductionIdParameter, searchParameter);
        }
    
        public virtual int spGazatGetAllByTypeView_bk(Nullable<int> top, Nullable<int> pageNum, Nullable<int> typeId, string search)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGazatGetAllByTypeView_bk", topParameter, pageNumParameter, typeIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spGazatGetAllByTypeViewBK_Result> spGazatGetAllByTypeViewBK(Nullable<int> top, Nullable<int> pageNum, Nullable<int> typeId, Nullable<int> inductionId, string search)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGazatGetAllByTypeViewBK_Result>("spGazatGetAllByTypeViewBK", topParameter, pageNumParameter, typeIdParameter, inductionIdParameter, searchParameter);
        }
    
        public virtual int spGazatGetAllByTypeViewExport(Nullable<int> typeId, string search)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGazatGetAllByTypeViewExport", typeIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spGetApplicantThoseWasInServiceHospitalSepeciality_Result> spGetApplicantThoseWasInServiceHospitalSepeciality()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetApplicantThoseWasInServiceHospitalSepeciality_Result>("spGetApplicantThoseWasInServiceHospitalSepeciality");
        }
    
        public virtual ObjectResult<spGetApplicationHasAmedmentAndNotSentEmail_Result> spGetApplicationHasAmedmentAndNotSentEmail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetApplicationHasAmedmentAndNotSentEmail_Result>("spGetApplicationHasAmedmentAndNotSentEmail");
        }
    
        public virtual ObjectResult<spGetExtensionData_Result> spGetExtensionData(Nullable<int> applicantId, Nullable<int> applicantLeaveId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var applicantLeaveIdParameter = applicantLeaveId.HasValue ?
                new ObjectParameter("applicantLeaveId", applicantLeaveId) :
                new ObjectParameter("applicantLeaveId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetExtensionData_Result>("spGetExtensionData", applicantIdParameter, applicantLeaveIdParameter);
        }
    
        public virtual ObjectResult<spGetLeaveData_Result> spGetLeaveData(Nullable<int> applicantId, Nullable<int> applicantLeaveId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var applicantLeaveIdParameter = applicantLeaveId.HasValue ?
                new ObjectParameter("applicantLeaveId", applicantLeaveId) :
                new ObjectParameter("applicantLeaveId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLeaveData_Result>("spGetLeaveData", applicantIdParameter, applicantLeaveIdParameter);
        }
    
        public virtual ObjectResult<spGetTypeApplicantHasMerit_Result> spGetTypeApplicantHasMerit(Nullable<int> applicantId, Nullable<int> round)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var roundParameter = round.HasValue ?
                new ObjectParameter("round", round) :
                new ObjectParameter("round", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetTypeApplicantHasMerit_Result>("spGetTypeApplicantHasMerit", applicantIdParameter, roundParameter);
        }
    
        public virtual int spGrievanceAddUpdate(Nullable<int> grievanceId, Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId, Nullable<int> typeId, Nullable<int> verficationTypeId, string checkListIds, string title, string detail)
        {
            var grievanceIdParameter = grievanceId.HasValue ?
                new ObjectParameter("grievanceId", grievanceId) :
                new ObjectParameter("grievanceId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var verficationTypeIdParameter = verficationTypeId.HasValue ?
                new ObjectParameter("verficationTypeId", verficationTypeId) :
                new ObjectParameter("verficationTypeId", typeof(int));
    
            var checkListIdsParameter = checkListIds != null ?
                new ObjectParameter("checkListIds", checkListIds) :
                new ObjectParameter("checkListIds", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var detailParameter = detail != null ?
                new ObjectParameter("detail", detail) :
                new ObjectParameter("detail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGrievanceAddUpdate", grievanceIdParameter, inductionIdParameter, phaseIdParameter, applicantIdParameter, typeIdParameter, verficationTypeIdParameter, checkListIdsParameter, titleParameter, detailParameter);
        }
    
        public virtual int spGrievanceAttendenceAddUpdate(Nullable<int> grievanceActionId, Nullable<int> grievanceId, Nullable<int> isSelf, Nullable<int> relationId, Nullable<int> attendenceNo, Nullable<int> adminIdAttendece)
        {
            var grievanceActionIdParameter = grievanceActionId.HasValue ?
                new ObjectParameter("grievanceActionId", grievanceActionId) :
                new ObjectParameter("grievanceActionId", typeof(int));
    
            var grievanceIdParameter = grievanceId.HasValue ?
                new ObjectParameter("grievanceId", grievanceId) :
                new ObjectParameter("grievanceId", typeof(int));
    
            var isSelfParameter = isSelf.HasValue ?
                new ObjectParameter("isSelf", isSelf) :
                new ObjectParameter("isSelf", typeof(int));
    
            var relationIdParameter = relationId.HasValue ?
                new ObjectParameter("relationId", relationId) :
                new ObjectParameter("relationId", typeof(int));
    
            var attendenceNoParameter = attendenceNo.HasValue ?
                new ObjectParameter("attendenceNo", attendenceNo) :
                new ObjectParameter("attendenceNo", typeof(int));
    
            var adminIdAttendeceParameter = adminIdAttendece.HasValue ?
                new ObjectParameter("adminIdAttendece", adminIdAttendece) :
                new ObjectParameter("adminIdAttendece", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGrievanceAttendenceAddUpdate", grievanceActionIdParameter, grievanceIdParameter, isSelfParameter, relationIdParameter, attendenceNoParameter, adminIdAttendeceParameter);
        }
    
        public virtual int spGrievanceDetailSearch(Nullable<int> top, Nullable<int> pageNum, string search, Nullable<int> grievanceTypeId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var grievanceTypeIdParameter = grievanceTypeId.HasValue ?
                new ObjectParameter("grievanceTypeId", grievanceTypeId) :
                new ObjectParameter("grievanceTypeId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGrievanceDetailSearch", topParameter, pageNumParameter, searchParameter, grievanceTypeIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<spGrievancePrint_Result> spGrievancePrint(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> typeId, Nullable<System.DateTime> dated)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var datedParameter = dated.HasValue ?
                new ObjectParameter("dated", dated) :
                new ObjectParameter("dated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGrievancePrint_Result>("spGrievancePrint", inductionIdParameter, phaseIdParameter, typeIdParameter, datedParameter);
        }
    
        public virtual int spGrievanceRemarksAddUpdate(Nullable<int> grievanceRemarksId, Nullable<int> grievanceId, string title, Nullable<int> typeId, string remarks, Nullable<int> adminId)
        {
            var grievanceRemarksIdParameter = grievanceRemarksId.HasValue ?
                new ObjectParameter("grievanceRemarksId", grievanceRemarksId) :
                new ObjectParameter("grievanceRemarksId", typeof(int));
    
            var grievanceIdParameter = grievanceId.HasValue ?
                new ObjectParameter("grievanceId", grievanceId) :
                new ObjectParameter("grievanceId", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGrievanceRemarksAddUpdate", grievanceRemarksIdParameter, grievanceIdParameter, titleParameter, typeIdParameter, remarksParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spGrievanceSearch_Result> spGrievanceSearch(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> top, Nullable<int> pageNum, Nullable<int> typeId, Nullable<int> verficationTypeId, string checkListIds, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var verficationTypeIdParameter = verficationTypeId.HasValue ?
                new ObjectParameter("verficationTypeId", verficationTypeId) :
                new ObjectParameter("verficationTypeId", typeof(int));
    
            var checkListIdsParameter = checkListIds != null ?
                new ObjectParameter("checkListIds", checkListIds) :
                new ObjectParameter("checkListIds", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGrievanceSearch_Result>("spGrievanceSearch", inductionIdParameter, phaseIdParameter, topParameter, pageNumParameter, typeIdParameter, verficationTypeIdParameter, checkListIdsParameter, searchParameter);
        }
    
        public virtual ObjectResult<spGrievanceSearchAttendece_Result> spGrievanceSearchAttendece(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> top, Nullable<int> pageNum, Nullable<int> typeId, Nullable<int> verficationTypeId, string checkListIds, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var verficationTypeIdParameter = verficationTypeId.HasValue ?
                new ObjectParameter("verficationTypeId", verficationTypeId) :
                new ObjectParameter("verficationTypeId", typeof(int));
    
            var checkListIdsParameter = checkListIds != null ?
                new ObjectParameter("checkListIds", checkListIds) :
                new ObjectParameter("checkListIds", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGrievanceSearchAttendece_Result>("spGrievanceSearchAttendece", inductionIdParameter, phaseIdParameter, topParameter, pageNumParameter, typeIdParameter, verficationTypeIdParameter, checkListIdsParameter, searchParameter);
        }
    
        public virtual int spGrievanceSearchLatest(Nullable<int> top, Nullable<int> pageNum, string search, Nullable<int> grievanceTypeId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var grievanceTypeIdParameter = grievanceTypeId.HasValue ?
                new ObjectParameter("grievanceTypeId", grievanceTypeId) :
                new ObjectParameter("grievanceTypeId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGrievanceSearchLatest", topParameter, pageNumParameter, searchParameter, grievanceTypeIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<spHardshipSeatsStatusByApplicant_Result> spHardshipSeatsStatusByApplicant(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spHardshipSeatsStatusByApplicant_Result>("spHardshipSeatsStatusByApplicant", applicantIdParameter);
        }
    
        public virtual ObjectResult<spHardshipSeatsStatusByApplicantUI_Result> spHardshipSeatsStatusByApplicantUI(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spHardshipSeatsStatusByApplicantUI_Result>("spHardshipSeatsStatusByApplicantUI", applicantIdParameter);
        }
    
        public virtual ObjectResult<spHistoryApplicantViewByInduction_Result> spHistoryApplicantViewByInduction(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spHistoryApplicantViewByInduction_Result>("spHistoryApplicantViewByInduction", applicantIdParameter);
        }
    
        public virtual ObjectResult<spHospitalDisciplineAddUpdate_Result> spHospitalDisciplineAddUpdate(Nullable<int> id, Nullable<int> hospitalId, Nullable<int> typeId, Nullable<int> disciplineId, Nullable<int> specialityId, Nullable<bool> isApproved, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd, string remarks, string certificateImage, Nullable<int> adminId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var disciplineIdParameter = disciplineId.HasValue ?
                new ObjectParameter("disciplineId", disciplineId) :
                new ObjectParameter("disciplineId", typeof(int));
    
            var specialityIdParameter = specialityId.HasValue ?
                new ObjectParameter("specialityId", specialityId) :
                new ObjectParameter("specialityId", typeof(int));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("isApproved", isApproved) :
                new ObjectParameter("isApproved", typeof(bool));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("dateStart", dateStart) :
                new ObjectParameter("dateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("dateEnd", dateEnd) :
                new ObjectParameter("dateEnd", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var certificateImageParameter = certificateImage != null ?
                new ObjectParameter("certificateImage", certificateImage) :
                new ObjectParameter("certificateImage", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spHospitalDisciplineAddUpdate_Result>("spHospitalDisciplineAddUpdate", idParameter, hospitalIdParameter, typeIdParameter, disciplineIdParameter, specialityIdParameter, isApprovedParameter, dateStartParameter, dateEndParameter, remarksParameter, certificateImageParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spHospitalDisciplineDelete_Result> spHospitalDisciplineDelete(Nullable<int> hospitalId, Nullable<int> id)
        {
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spHospitalDisciplineDelete_Result>("spHospitalDisciplineDelete", hospitalIdParameter, idParameter);
        }
    
        public virtual ObjectResult<spHospitalDisciplineSearch_Result> spHospitalDisciplineSearch(Nullable<int> hospitalId)
        {
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spHospitalDisciplineSearch_Result>("spHospitalDisciplineSearch", hospitalIdParameter);
        }
    
        public virtual ObjectResult<spHospitalForDDL_Result> spHospitalForDDL(Nullable<int> instituteId, Nullable<int> typeId, Nullable<int> userId, Nullable<int> reffId, string reffIds, string condition)
        {
            var instituteIdParameter = instituteId.HasValue ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var reffIdsParameter = reffIds != null ?
                new ObjectParameter("reffIds", reffIds) :
                new ObjectParameter("reffIds", typeof(string));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spHospitalForDDL_Result>("spHospitalForDDL", instituteIdParameter, typeIdParameter, userIdParameter, reffIdParameter, reffIdsParameter, conditionParameter);
        }
    
        public virtual ObjectResult<spHospitalForInstitute_Result> spHospitalForInstitute(Nullable<int> instituteId)
        {
            var instituteIdParameter = instituteId.HasValue ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spHospitalForInstitute_Result>("spHospitalForInstitute", instituteIdParameter);
        }
    
        public virtual int spHospitalInstituteAddUpdate(Nullable<int> instituteId, Nullable<int> adminId, string hospitalIds)
        {
            var instituteIdParameter = instituteId.HasValue ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            var hospitalIdsParameter = hospitalIds != null ?
                new ObjectParameter("hospitalIds", hospitalIds) :
                new ObjectParameter("hospitalIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spHospitalInstituteAddUpdate", instituteIdParameter, adminIdParameter, hospitalIdsParameter);
        }
    
        public virtual ObjectResult<spHospitalSearch_Result> spHospitalSearch(Nullable<int> top, Nullable<int> pageNum, Nullable<int> regionId, Nullable<int> levelId, Nullable<int> typeId, string search)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("regionId", regionId) :
                new ObjectParameter("regionId", typeof(int));
    
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("levelId", levelId) :
                new ObjectParameter("levelId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spHospitalSearch_Result>("spHospitalSearch", topParameter, pageNumParameter, regionIdParameter, levelIdParameter, typeIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> spHospitalSpecialityGetByParam(Nullable<int> hospitalId, string search)
        {
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("spHospitalSpecialityGetByParam", hospitalIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spHospitalTraineeCountReport_Result> spHospitalTraineeCountReport(Nullable<int> top, Nullable<int> pageNum, Nullable<int> statusId, Nullable<int> hospitalId, string search)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spHospitalTraineeCountReport_Result>("spHospitalTraineeCountReport", topParameter, pageNumParameter, statusIdParameter, hospitalIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spHsAddUpdate_Result> spHsAddUpdate(Nullable<int> hsId, string name, string startDate, string endDate, Nullable<int> startH, Nullable<int> startM, Nullable<int> endH, Nullable<int> endM, Nullable<bool> isCompleted, Nullable<int> adminId)
        {
            var hsIdParameter = hsId.HasValue ?
                new ObjectParameter("hsId", hsId) :
                new ObjectParameter("hsId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            var startHParameter = startH.HasValue ?
                new ObjectParameter("startH", startH) :
                new ObjectParameter("startH", typeof(int));
    
            var startMParameter = startM.HasValue ?
                new ObjectParameter("startM", startM) :
                new ObjectParameter("startM", typeof(int));
    
            var endHParameter = endH.HasValue ?
                new ObjectParameter("endH", endH) :
                new ObjectParameter("endH", typeof(int));
    
            var endMParameter = endM.HasValue ?
                new ObjectParameter("endM", endM) :
                new ObjectParameter("endM", typeof(int));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("isCompleted", isCompleted) :
                new ObjectParameter("isCompleted", typeof(bool));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spHsAddUpdate_Result>("spHsAddUpdate", hsIdParameter, nameParameter, startDateParameter, endDateParameter, startHParameter, startMParameter, endHParameter, endMParameter, isCompletedParameter, adminIdParameter);
        }
    
        public virtual int spHsApplicationAddUpdate(Nullable<int> hsId, Nullable<int> applicantId, Nullable<int> hsAppId, Nullable<int> typeId, string detail)
        {
            var hsIdParameter = hsId.HasValue ?
                new ObjectParameter("hsId", hsId) :
                new ObjectParameter("hsId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var hsAppIdParameter = hsAppId.HasValue ?
                new ObjectParameter("hsAppId", hsAppId) :
                new ObjectParameter("hsAppId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var detailParameter = detail != null ?
                new ObjectParameter("detail", detail) :
                new ObjectParameter("detail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spHsApplicationAddUpdate", hsIdParameter, applicantIdParameter, hsAppIdParameter, typeIdParameter, detailParameter);
        }
    
        public virtual int spHsApplicationDocsAddUpdate(Nullable<int> hsId, Nullable<int> applicantId, Nullable<int> hsAppId)
        {
            var hsIdParameter = hsId.HasValue ?
                new ObjectParameter("hsId", hsId) :
                new ObjectParameter("hsId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var hsAppIdParameter = hsAppId.HasValue ?
                new ObjectParameter("hsAppId", hsAppId) :
                new ObjectParameter("hsAppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spHsApplicationDocsAddUpdate", hsIdParameter, applicantIdParameter, hsAppIdParameter);
        }
    
        public virtual ObjectResult<spHsById_Result> spHsById(Nullable<int> hsId)
        {
            var hsIdParameter = hsId.HasValue ?
                new ObjectParameter("hsId", hsId) :
                new ObjectParameter("hsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spHsById_Result>("spHsById", hsIdParameter);
        }
    
        public virtual ObjectResult<spHsStepAddUpdate_Result> spHsStepAddUpdate(Nullable<int> stepId, Nullable<int> stepIdNew, string title, string detail, Nullable<int> sortOrder, Nullable<int> adminId)
        {
            var stepIdParameter = stepId.HasValue ?
                new ObjectParameter("stepId", stepId) :
                new ObjectParameter("stepId", typeof(int));
    
            var stepIdNewParameter = stepIdNew.HasValue ?
                new ObjectParameter("stepIdNew", stepIdNew) :
                new ObjectParameter("stepIdNew", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var detailParameter = detail != null ?
                new ObjectParameter("detail", detail) :
                new ObjectParameter("detail", typeof(string));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spHsStepAddUpdate_Result>("spHsStepAddUpdate", stepIdParameter, stepIdNewParameter, titleParameter, detailParameter, sortOrderParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spHsStepById_Result> spHsStepById(Nullable<int> stepId)
        {
            var stepIdParameter = stepId.HasValue ?
                new ObjectParameter("stepId", stepId) :
                new ObjectParameter("stepId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spHsStepById_Result>("spHsStepById", stepIdParameter);
        }
    
        public virtual ObjectResult<spHsStepCalendarAddUpdate_Result> spHsStepCalendarAddUpdate(Nullable<int> hsId, Nullable<int> stepId, string startDate, Nullable<int> startH, Nullable<int> startM, string endDate, Nullable<int> endH, Nullable<int> endM, string duration, Nullable<int> statusId, Nullable<int> adminId)
        {
            var hsIdParameter = hsId.HasValue ?
                new ObjectParameter("hsId", hsId) :
                new ObjectParameter("hsId", typeof(int));
    
            var stepIdParameter = stepId.HasValue ?
                new ObjectParameter("stepId", stepId) :
                new ObjectParameter("stepId", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(string));
    
            var startHParameter = startH.HasValue ?
                new ObjectParameter("startH", startH) :
                new ObjectParameter("startH", typeof(int));
    
            var startMParameter = startM.HasValue ?
                new ObjectParameter("startM", startM) :
                new ObjectParameter("startM", typeof(int));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            var endHParameter = endH.HasValue ?
                new ObjectParameter("endH", endH) :
                new ObjectParameter("endH", typeof(int));
    
            var endMParameter = endM.HasValue ?
                new ObjectParameter("endM", endM) :
                new ObjectParameter("endM", typeof(int));
    
            var durationParameter = duration != null ?
                new ObjectParameter("duration", duration) :
                new ObjectParameter("duration", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spHsStepCalendarAddUpdate_Result>("spHsStepCalendarAddUpdate", hsIdParameter, stepIdParameter, startDateParameter, startHParameter, startMParameter, endDateParameter, endHParameter, endMParameter, durationParameter, statusIdParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spHsStepCalendarById_Result> spHsStepCalendarById(Nullable<int> hsId)
        {
            var hsIdParameter = hsId.HasValue ?
                new ObjectParameter("hsId", hsId) :
                new ObjectParameter("hsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spHsStepCalendarById_Result>("spHsStepCalendarById", hsIdParameter);
        }
    
        public virtual ObjectResult<spHsStepSearch_Result> spHsStepSearch(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spHsStepSearch_Result>("spHsStepSearch", searchParameter);
        }
    
        public virtual int spImportApplicantCertificateData(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spImportApplicantCertificateData", inductionIdParameter, phaseIdParameter, applicantIdParameter);
        }
    
        public virtual int spImportApplicantData(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spImportApplicantData", inductionIdParameter, phaseIdParameter, applicantIdParameter);
        }
    
        public virtual int spImportApplicantDegreeData(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spImportApplicantDegreeData", inductionIdParameter, phaseIdParameter, applicantIdParameter);
        }
    
        public virtual int spImportApplicantDegreeMarksData(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spImportApplicantDegreeMarksData", inductionIdParameter, phaseIdParameter, applicantIdParameter);
        }
    
        public virtual int spImportApplicantDistinctionData(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spImportApplicantDistinctionData", inductionIdParameter, phaseIdParameter, applicantIdParameter);
        }
    
        public virtual int spImportApplicantExperienceData(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spImportApplicantExperienceData", inductionIdParameter, phaseIdParameter, applicantIdParameter);
        }
    
        public virtual int spImportApplicantInfoData(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spImportApplicantInfoData", inductionIdParameter, phaseIdParameter, applicantIdParameter);
        }
    
        public virtual int spImportApplicantResearchPaperData(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spImportApplicantResearchPaperData", inductionIdParameter, phaseIdParameter, applicantIdParameter);
        }
    
        public virtual ObjectResult<spInductionCalendarGetById_Result> spInductionCalendarGetById(Nullable<int> levelId, Nullable<int> inductionId)
        {
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("levelId", levelId) :
                new ObjectParameter("levelId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInductionCalendarGetById_Result>("spInductionCalendarGetById", levelIdParameter, inductionIdParameter);
        }
    
        public virtual ObjectResult<spInductionCalendarUpdate_Result> spInductionCalendarUpdate(Nullable<int> levelId, Nullable<int> inductionId, Nullable<int> calenderId, Nullable<int> days, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> statusId, Nullable<int> adminId)
        {
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("levelId", levelId) :
                new ObjectParameter("levelId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var calenderIdParameter = calenderId.HasValue ?
                new ObjectParameter("calenderId", calenderId) :
                new ObjectParameter("calenderId", typeof(int));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInductionCalendarUpdate_Result>("spInductionCalendarUpdate", levelIdParameter, inductionIdParameter, calenderIdParameter, daysParameter, startDateParameter, endDateParameter, statusIdParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spInductionForDDL_Result> spInductionForDDL(Nullable<int> userId, string reffIds, string condition)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var reffIdsParameter = reffIds != null ?
                new ObjectParameter("reffIds", reffIds) :
                new ObjectParameter("reffIds", typeof(string));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInductionForDDL_Result>("spInductionForDDL", userIdParameter, reffIdsParameter, conditionParameter);
        }
    
        public virtual int spInstitueHospitalAddUpdate(Nullable<int> hospitalId, Nullable<int> adminId, string instituteIds)
        {
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            var instituteIdsParameter = instituteIds != null ?
                new ObjectParameter("instituteIds", instituteIds) :
                new ObjectParameter("instituteIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInstitueHospitalAddUpdate", hospitalIdParameter, adminIdParameter, instituteIdsParameter);
        }
    
        public virtual ObjectResult<spInstituteForDDL_Result> spInstituteForDDL(Nullable<int> hospitalId, Nullable<int> regionId, Nullable<int> typeId, Nullable<int> userId, string reffIds, string condition)
        {
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("regionId", regionId) :
                new ObjectParameter("regionId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var reffIdsParameter = reffIds != null ?
                new ObjectParameter("reffIds", reffIds) :
                new ObjectParameter("reffIds", typeof(string));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInstituteForDDL_Result>("spInstituteForDDL", hospitalIdParameter, regionIdParameter, typeIdParameter, userIdParameter, reffIdsParameter, conditionParameter);
        }
    
        public virtual ObjectResult<spInstituteHospitalGetDashBoardData_Result> spInstituteHospitalGetDashBoardData(Nullable<int> instituteId, Nullable<int> hospitalId, string condition)
        {
            var instituteIdParameter = instituteId.HasValue ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInstituteHospitalGetDashBoardData_Result>("spInstituteHospitalGetDashBoardData", instituteIdParameter, hospitalIdParameter, conditionParameter);
        }
    
        public virtual ObjectResult<spJobGetCount_Result> spJobGetCount(Nullable<int> typeId, Nullable<int> hospitalId, Nullable<int> specialityId, string condition)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var specialityIdParameter = specialityId.HasValue ?
                new ObjectParameter("specialityId", specialityId) :
                new ObjectParameter("specialityId", typeof(int));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spJobGetCount_Result>("spJobGetCount", typeIdParameter, hospitalIdParameter, specialityIdParameter, conditionParameter);
        }
    
        public virtual ObjectResult<spJoinedApplicantByHospitalSearch_Result> spJoinedApplicantByHospitalSearch(Nullable<int> pageNum, Nullable<int> top, Nullable<int> inductionId, Nullable<int> typeId, Nullable<int> specialityId, Nullable<int> hospitalId, Nullable<int> statusId, Nullable<int> attachStatusId, string search, Nullable<int> adminId, Nullable<int> fetchTypeId)
        {
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var specialityIdParameter = specialityId.HasValue ?
                new ObjectParameter("specialityId", specialityId) :
                new ObjectParameter("specialityId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var attachStatusIdParameter = attachStatusId.HasValue ?
                new ObjectParameter("attachStatusId", attachStatusId) :
                new ObjectParameter("attachStatusId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            var fetchTypeIdParameter = fetchTypeId.HasValue ?
                new ObjectParameter("fetchTypeId", fetchTypeId) :
                new ObjectParameter("fetchTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spJoinedApplicantByHospitalSearch_Result>("spJoinedApplicantByHospitalSearch", pageNumParameter, topParameter, inductionIdParameter, typeIdParameter, specialityIdParameter, hospitalIdParameter, statusIdParameter, attachStatusIdParameter, searchParameter, adminIdParameter, fetchTypeIdParameter);
        }
    
        public virtual ObjectResult<spJoinedApplicantSearch_Result> spJoinedApplicantSearch(Nullable<int> pageNum, Nullable<int> top, Nullable<int> userId, Nullable<int> inductionId, Nullable<int> instituteId, string search)
        {
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var instituteIdParameter = instituteId.HasValue ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spJoinedApplicantSearch_Result>("spJoinedApplicantSearch", pageNumParameter, topParameter, userIdParameter, inductionIdParameter, instituteIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spJoiningAddUpdate_Result> spJoiningAddUpdate(Nullable<int> applicantId, Nullable<int> specialityJobId, Nullable<System.DateTime> joiningDate, string image, Nullable<int> adminId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var specialityJobIdParameter = specialityJobId.HasValue ?
                new ObjectParameter("specialityJobId", specialityJobId) :
                new ObjectParameter("specialityJobId", typeof(int));
    
            var joiningDateParameter = joiningDate.HasValue ?
                new ObjectParameter("joiningDate", joiningDate) :
                new ObjectParameter("joiningDate", typeof(System.DateTime));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spJoiningAddUpdate_Result>("spJoiningAddUpdate", applicantIdParameter, specialityJobIdParameter, joiningDateParameter, imageParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spJoiningApplicantByHospitalSearch_Result> spJoiningApplicantByHospitalSearch(Nullable<int> pageNum, Nullable<int> top, Nullable<int> userId, Nullable<int> specialityId, Nullable<int> hospitalId, Nullable<int> attachStatusId, Nullable<int> inductionId, Nullable<int> typeId, string search)
        {
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var specialityIdParameter = specialityId.HasValue ?
                new ObjectParameter("specialityId", specialityId) :
                new ObjectParameter("specialityId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var attachStatusIdParameter = attachStatusId.HasValue ?
                new ObjectParameter("attachStatusId", attachStatusId) :
                new ObjectParameter("attachStatusId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spJoiningApplicantByHospitalSearch_Result>("spJoiningApplicantByHospitalSearch", pageNumParameter, topParameter, userIdParameter, specialityIdParameter, hospitalIdParameter, attachStatusIdParameter, inductionIdParameter, typeIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spJoiningCountByInstituteHospitalWise_Result> spJoiningCountByInstituteHospitalWise(Nullable<int> instituteId)
        {
            var instituteIdParameter = instituteId.HasValue ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spJoiningCountByInstituteHospitalWise_Result>("spJoiningCountByInstituteHospitalWise", instituteIdParameter);
        }
    
        public virtual ObjectResult<spJoiningCountInstituteHospitalWise_Result> spJoiningCountInstituteHospitalWise(Nullable<int> instituteId)
        {
            var instituteIdParameter = instituteId.HasValue ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spJoiningCountInstituteHospitalWise_Result>("spJoiningCountInstituteHospitalWise", instituteIdParameter);
        }
    
        public virtual ObjectResult<spJoiningCountInstituteWise_Result> spJoiningCountInstituteWise()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spJoiningCountInstituteWise_Result>("spJoiningCountInstituteWise");
        }
    
        public virtual ObjectResult<spJoiningCountInstituteWiseNew_Result> spJoiningCountInstituteWiseNew()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spJoiningCountInstituteWiseNew_Result>("spJoiningCountInstituteWiseNew");
        }
    
        public virtual ObjectResult<spJoiningGetAll_Result> spJoiningGetAll(Nullable<int> top, Nullable<int> pageNum, Nullable<int> joinStatus, string search)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var joinStatusParameter = joinStatus.HasValue ?
                new ObjectParameter("joinStatus", joinStatus) :
                new ObjectParameter("joinStatus", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spJoiningGetAll_Result>("spJoiningGetAll", topParameter, pageNumParameter, joinStatusParameter, searchParameter);
        }
    
        public virtual ObjectResult<spJoiningGetByHospital_Result> spJoiningGetByHospital(Nullable<int> userId, Nullable<int> hospitalId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spJoiningGetByHospital_Result>("spJoiningGetByHospital", userIdParameter, hospitalIdParameter);
        }
    
        public virtual ObjectResult<spJoiningGetByInstitute_Result> spJoiningGetByInstitute(Nullable<int> inductionId, Nullable<int> userId, Nullable<int> instituteId, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var instituteIdParameter = instituteId.HasValue ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spJoiningGetByInstitute_Result>("spJoiningGetByInstitute", inductionIdParameter, userIdParameter, instituteIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spJoiningSearch_Result> spJoiningSearch(Nullable<int> inductionId, Nullable<int> pageNum, Nullable<int> top, Nullable<int> typeId, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spJoiningSearch_Result>("spJoiningSearch", inductionIdParameter, pageNumParameter, topParameter, typeIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spJoiningSearchGetByInstitute_Result> spJoiningSearchGetByInstitute(Nullable<int> inductionId, Nullable<int> pageNum, Nullable<int> top, Nullable<int> userId, Nullable<int> instituteId, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var instituteIdParameter = instituteId.HasValue ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spJoiningSearchGetByInstitute_Result>("spJoiningSearchGetByInstitute", inductionIdParameter, pageNumParameter, topParameter, userIdParameter, instituteIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spLeaveAddUpdate_Result> spLeaveAddUpdate(Nullable<int> leaveId, Nullable<int> hospitalId, Nullable<int> applicantId, Nullable<int> typeId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<System.DateTime> eddDate, Nullable<int> noOfDays, Nullable<int> assignToTypeId, Nullable<int> processId, Nullable<int> assignToId, Nullable<int> statusId, string remarks, Nullable<int> adminId)
        {
            var leaveIdParameter = leaveId.HasValue ?
                new ObjectParameter("leaveId", leaveId) :
                new ObjectParameter("leaveId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var eddDateParameter = eddDate.HasValue ?
                new ObjectParameter("eddDate", eddDate) :
                new ObjectParameter("eddDate", typeof(System.DateTime));
    
            var noOfDaysParameter = noOfDays.HasValue ?
                new ObjectParameter("noOfDays", noOfDays) :
                new ObjectParameter("noOfDays", typeof(int));
    
            var assignToTypeIdParameter = assignToTypeId.HasValue ?
                new ObjectParameter("assignToTypeId", assignToTypeId) :
                new ObjectParameter("assignToTypeId", typeof(int));
    
            var processIdParameter = processId.HasValue ?
                new ObjectParameter("processId", processId) :
                new ObjectParameter("processId", typeof(int));
    
            var assignToIdParameter = assignToId.HasValue ?
                new ObjectParameter("assignToId", assignToId) :
                new ObjectParameter("assignToId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLeaveAddUpdate_Result>("spLeaveAddUpdate", leaveIdParameter, hospitalIdParameter, applicantIdParameter, typeIdParameter, startDateParameter, endDateParameter, eddDateParameter, noOfDaysParameter, assignToTypeIdParameter, processIdParameter, assignToIdParameter, statusIdParameter, remarksParameter, adminIdParameter);
        }
    
        public virtual int spLeaveAddUpdateDocs(Nullable<int> leaveId, Nullable<int> applicantId, Nullable<int> typeId, Nullable<int> adminId)
        {
            var leaveIdParameter = leaveId.HasValue ?
                new ObjectParameter("leaveId", leaveId) :
                new ObjectParameter("leaveId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLeaveAddUpdateDocs", leaveIdParameter, applicantIdParameter, typeIdParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spLeaveApplicantAddUpdate_Result> spLeaveApplicantAddUpdate(Nullable<int> applicantLeaveId, Nullable<int> actionId, Nullable<int> applicantId, string image, string imageAffidavit, string imageMedical, string imageMaternity, string imagePGAC, string imageForwarding, string imageSurety, Nullable<int> typeId, Nullable<int> ddlDoxTaken, Nullable<int> categoryId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> isDocsCollected, Nullable<int> statusId, string remarks, Nullable<int> adminId, string imageAttorney, string imageVisa, string imagePurpose, string imageRTMC, string imagePreviousLeaveReport, Nullable<System.DateTime> edd)
        {
            var applicantLeaveIdParameter = applicantLeaveId.HasValue ?
                new ObjectParameter("applicantLeaveId", applicantLeaveId) :
                new ObjectParameter("applicantLeaveId", typeof(int));
    
            var actionIdParameter = actionId.HasValue ?
                new ObjectParameter("actionId", actionId) :
                new ObjectParameter("actionId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            var imageAffidavitParameter = imageAffidavit != null ?
                new ObjectParameter("imageAffidavit", imageAffidavit) :
                new ObjectParameter("imageAffidavit", typeof(string));
    
            var imageMedicalParameter = imageMedical != null ?
                new ObjectParameter("imageMedical", imageMedical) :
                new ObjectParameter("imageMedical", typeof(string));
    
            var imageMaternityParameter = imageMaternity != null ?
                new ObjectParameter("imageMaternity", imageMaternity) :
                new ObjectParameter("imageMaternity", typeof(string));
    
            var imagePGACParameter = imagePGAC != null ?
                new ObjectParameter("imagePGAC", imagePGAC) :
                new ObjectParameter("imagePGAC", typeof(string));
    
            var imageForwardingParameter = imageForwarding != null ?
                new ObjectParameter("imageForwarding", imageForwarding) :
                new ObjectParameter("imageForwarding", typeof(string));
    
            var imageSuretyParameter = imageSurety != null ?
                new ObjectParameter("imageSurety", imageSurety) :
                new ObjectParameter("imageSurety", typeof(string));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var ddlDoxTakenParameter = ddlDoxTaken.HasValue ?
                new ObjectParameter("ddlDoxTaken", ddlDoxTaken) :
                new ObjectParameter("ddlDoxTaken", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var isDocsCollectedParameter = isDocsCollected.HasValue ?
                new ObjectParameter("isDocsCollected", isDocsCollected) :
                new ObjectParameter("isDocsCollected", typeof(bool));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            var imageAttorneyParameter = imageAttorney != null ?
                new ObjectParameter("imageAttorney", imageAttorney) :
                new ObjectParameter("imageAttorney", typeof(string));
    
            var imageVisaParameter = imageVisa != null ?
                new ObjectParameter("imageVisa", imageVisa) :
                new ObjectParameter("imageVisa", typeof(string));
    
            var imagePurposeParameter = imagePurpose != null ?
                new ObjectParameter("imagePurpose", imagePurpose) :
                new ObjectParameter("imagePurpose", typeof(string));
    
            var imageRTMCParameter = imageRTMC != null ?
                new ObjectParameter("imageRTMC", imageRTMC) :
                new ObjectParameter("imageRTMC", typeof(string));
    
            var imagePreviousLeaveReportParameter = imagePreviousLeaveReport != null ?
                new ObjectParameter("imagePreviousLeaveReport", imagePreviousLeaveReport) :
                new ObjectParameter("imagePreviousLeaveReport", typeof(string));
    
            var eddParameter = edd.HasValue ?
                new ObjectParameter("edd", edd) :
                new ObjectParameter("edd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLeaveApplicantAddUpdate_Result>("spLeaveApplicantAddUpdate", applicantLeaveIdParameter, actionIdParameter, applicantIdParameter, imageParameter, imageAffidavitParameter, imageMedicalParameter, imageMaternityParameter, imagePGACParameter, imageForwardingParameter, imageSuretyParameter, typeIdParameter, ddlDoxTakenParameter, categoryIdParameter, startDateParameter, endDateParameter, isDocsCollectedParameter, statusIdParameter, remarksParameter, adminIdParameter, imageAttorneyParameter, imageVisaParameter, imagePurposeParameter, imageRTMCParameter, imagePreviousLeaveReportParameter, eddParameter);
        }
    
        public virtual ObjectResult<spLeaveApplicantCount_Result> spLeaveApplicantCount(Nullable<int> top, Nullable<int> pageNo, Nullable<int> inductionId, Nullable<int> reffId, Nullable<int> adminId, Nullable<int> noOfLeave, string search)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("pageNo", pageNo) :
                new ObjectParameter("pageNo", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            var noOfLeaveParameter = noOfLeave.HasValue ?
                new ObjectParameter("noOfLeave", noOfLeave) :
                new ObjectParameter("noOfLeave", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLeaveApplicantCount_Result>("spLeaveApplicantCount", topParameter, pageNoParameter, inductionIdParameter, reffIdParameter, adminIdParameter, noOfLeaveParameter, searchParameter);
        }
    
        public virtual ObjectResult<spLeaveApplicantSearch_Result> spLeaveApplicantSearch(Nullable<int> top, Nullable<int> pageNum, Nullable<int> inductionId, Nullable<int> typeId, Nullable<int> instituteId, string search)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var instituteIdParameter = instituteId.HasValue ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLeaveApplicantSearch_Result>("spLeaveApplicantSearch", topParameter, pageNumParameter, inductionIdParameter, typeIdParameter, instituteIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spLeaveApprovalAddUpdate_Result> spLeaveApprovalAddUpdate(Nullable<int> actionId, Nullable<int> applicantId, Nullable<int> applicantLeaveId, string remarks, Nullable<int> adminId)
        {
            var actionIdParameter = actionId.HasValue ?
                new ObjectParameter("actionId", actionId) :
                new ObjectParameter("actionId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var applicantLeaveIdParameter = applicantLeaveId.HasValue ?
                new ObjectParameter("applicantLeaveId", applicantLeaveId) :
                new ObjectParameter("applicantLeaveId", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLeaveApprovalAddUpdate_Result>("spLeaveApprovalAddUpdate", actionIdParameter, applicantIdParameter, applicantLeaveIdParameter, remarksParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spLeaveApprovalListSearch_Result> spLeaveApprovalListSearch(Nullable<int> pageNum, Nullable<int> top, Nullable<int> reffId, Nullable<int> inductionId, Nullable<int> typeId, Nullable<int> instituteId, Nullable<int> phaseId, string search)
        {
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var instituteIdParameter = instituteId.HasValue ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLeaveApprovalListSearch_Result>("spLeaveApprovalListSearch", pageNumParameter, topParameter, reffIdParameter, inductionIdParameter, typeIdParameter, instituteIdParameter, phaseIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spLeaveApprovalSearch_Result> spLeaveApprovalSearch(Nullable<int> pageNum, Nullable<int> top, Nullable<int> reffId, Nullable<int> inductionId, Nullable<int> typeId, Nullable<int> instituteId, string search)
        {
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var instituteIdParameter = instituteId.HasValue ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLeaveApprovalSearch_Result>("spLeaveApprovalSearch", pageNumParameter, topParameter, reffIdParameter, inductionIdParameter, typeIdParameter, instituteIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spLeaveGetAllByApplicant(Nullable<int> top, Nullable<int> pageNo, Nullable<int> applicantId)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("pageNo", pageNo) :
                new ObjectParameter("pageNo", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spLeaveGetAllByApplicant", topParameter, pageNoParameter, applicantIdParameter);
        }
    
        public virtual ObjectResult<spLeaveGetById_Result> spLeaveGetById(Nullable<int> applicantId, Nullable<int> leaveId, Nullable<int> adminId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var leaveIdParameter = leaveId.HasValue ?
                new ObjectParameter("leaveId", leaveId) :
                new ObjectParameter("leaveId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLeaveGetById_Result>("spLeaveGetById", applicantIdParameter, leaveIdParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spLeaveHistoryStatusByApplicant_Result> spLeaveHistoryStatusByApplicant(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLeaveHistoryStatusByApplicant_Result>("spLeaveHistoryStatusByApplicant", applicantIdParameter);
        }
    
        public virtual ObjectResult<spLeaveSearch_Result> spLeaveSearch(Nullable<int> top, Nullable<int> pageNo, Nullable<int> inductionId, Nullable<int> instituteId, Nullable<int> hospitalId, Nullable<int> typeId, Nullable<int> statusId, Nullable<int> fetchTypeId, string search)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("pageNo", pageNo) :
                new ObjectParameter("pageNo", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var instituteIdParameter = instituteId.HasValue ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var fetchTypeIdParameter = fetchTypeId.HasValue ?
                new ObjectParameter("fetchTypeId", fetchTypeId) :
                new ObjectParameter("fetchTypeId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLeaveSearch_Result>("spLeaveSearch", topParameter, pageNoParameter, inductionIdParameter, instituteIdParameter, hospitalIdParameter, typeIdParameter, statusIdParameter, fetchTypeIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spLeaveSearchCheck_Result> spLeaveSearchCheck(Nullable<int> pageNum, Nullable<int> top, Nullable<int> inductionId, Nullable<int> typeId, Nullable<int> instituteId, string search)
        {
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var instituteIdParameter = instituteId.HasValue ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLeaveSearchCheck_Result>("spLeaveSearchCheck", pageNumParameter, topParameter, inductionIdParameter, typeIdParameter, instituteIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spLeaveValidate_Result> spLeaveValidate(Nullable<int> applicantId, Nullable<int> leaveId, Nullable<int> typeId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> adminId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var leaveIdParameter = leaveId.HasValue ?
                new ObjectParameter("leaveId", leaveId) :
                new ObjectParameter("leaveId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLeaveValidate_Result>("spLeaveValidate", applicantIdParameter, leaveIdParameter, typeIdParameter, startDateParameter, endDateParameter, adminIdParameter);
        }
    
        public virtual int spMarksCalculateAllAttemptGraduateForigen(Nullable<int> statusTypeId)
        {
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMarksCalculateAllAttemptGraduateForigen", statusTypeIdParameter);
        }
    
        public virtual int spMarksCalculateAllAttemptGraduateLocal(Nullable<int> statusTypeId)
        {
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMarksCalculateAllAttemptGraduateLocal", statusTypeIdParameter);
        }
    
        public virtual int spMarksCalculateAllCertificate(Nullable<int> statusTypeId)
        {
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMarksCalculateAllCertificate", statusTypeIdParameter);
        }
    
        public virtual int spMarksCalculateAllDegreeGraduateForigen(Nullable<int> statusTypeId)
        {
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMarksCalculateAllDegreeGraduateForigen", statusTypeIdParameter);
        }
    
        public virtual int spMarksCalculateAllDegreeGraduateLocal(Nullable<int> statusTypeId)
        {
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMarksCalculateAllDegreeGraduateLocal", statusTypeIdParameter);
        }
    
        public virtual int spMarksCalculateAllHouseJob(Nullable<int> statusTypeId)
        {
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMarksCalculateAllHouseJob", statusTypeIdParameter);
        }
    
        public virtual int spMarksCalculateAllResearchPaper(Nullable<int> statusTypeId)
        {
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMarksCalculateAllResearchPaper", statusTypeIdParameter);
        }
    
        public virtual int spMarksCalculateCertificate(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMarksCalculateCertificate", applicantIdParameter);
        }
    
        public virtual int spMarksCalculateCertificateByDetailId(Nullable<int> applicantId, Nullable<int> applicantCertificateTypeId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var applicantCertificateTypeIdParameter = applicantCertificateTypeId.HasValue ?
                new ObjectParameter("applicantCertificateTypeId", applicantCertificateTypeId) :
                new ObjectParameter("applicantCertificateTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMarksCalculateCertificateByDetailId", applicantIdParameter, applicantCertificateTypeIdParameter);
        }
    
        public virtual int spMarksCalculateEducation(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMarksCalculateEducation", applicantIdParameter);
        }
    
        public virtual int spMarksCalculateEducationAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMarksCalculateEducationAll");
        }
    
        public virtual int spMarksCalculateExperience(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMarksCalculateExperience", applicantIdParameter);
        }
    
        public virtual int spMarksCalculateHouseJob(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMarksCalculateHouseJob", applicantIdParameter);
        }
    
        public virtual int spMarksCalculateHouseJobAll(Nullable<int> statusTypeId)
        {
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMarksCalculateHouseJobAll", statusTypeIdParameter);
        }
    
        public virtual int spMarksCalculateHouseJobDetail(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMarksCalculateHouseJobDetail", applicantIdParameter);
        }
    
        public virtual int spMarksCalculateHouseJobDetailAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMarksCalculateHouseJobDetailAll");
        }
    
        public virtual int spMarksCalculateHouseJobRev1(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMarksCalculateHouseJobRev1", applicantIdParameter);
        }
    
        public virtual int spMarksCalculateHouseJobRunCycle()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMarksCalculateHouseJobRunCycle");
        }
    
        public virtual int spMarksCalculateResearchPaper(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMarksCalculateResearchPaper", applicantIdParameter);
        }
    
        public virtual ObjectResult<spMarksDetailByApplicant_Result> spMarksDetailByApplicant(Nullable<int> inductionId, Nullable<int> applicantId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMarksDetailByApplicant_Result>("spMarksDetailByApplicant", inductionIdParameter, applicantIdParameter);
        }
    
        public virtual ObjectResult<spMarksDetailByApplicant_old_Result> spMarksDetailByApplicant_old(Nullable<int> inductionId, Nullable<int> applicantId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMarksDetailByApplicant_old_Result>("spMarksDetailByApplicant_old", inductionIdParameter, applicantIdParameter);
        }
    
        public virtual int spMarksExpectedCalculateByApplicant(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMarksExpectedCalculateByApplicant", applicantIdParameter);
        }
    
        public virtual ObjectResult<spMarksGetAccumulativeByApplicant_Result> spMarksGetAccumulativeByApplicant(Nullable<int> applicantId, Nullable<int> inductionId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMarksGetAccumulativeByApplicant_Result>("spMarksGetAccumulativeByApplicant", applicantIdParameter, inductionIdParameter);
        }
    
        public virtual int spMarksGetProfileByApplicant(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> applicantId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMarksGetProfileByApplicant", inductionIdParameter, phaseIdParameter, applicantIdParameter);
        }
    
        public virtual int spMenuAccessAddUpdate(Nullable<int> userId, string menuIds)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var menuIdsParameter = menuIds != null ?
                new ObjectParameter("menuIds", menuIds) :
                new ObjectParameter("menuIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMenuAccessAddUpdate", userIdParameter, menuIdsParameter);
        }
    
        public virtual ObjectResult<spMenuForDDL_Result> spMenuForDDL(Nullable<int> typeId, Nullable<int> parentId, Nullable<int> reffId, Nullable<int> userId, string reffIds, string condition)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var reffIdsParameter = reffIds != null ?
                new ObjectParameter("reffIds", reffIds) :
                new ObjectParameter("reffIds", typeof(string));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMenuForDDL_Result>("spMenuForDDL", typeIdParameter, parentIdParameter, reffIdParameter, userIdParameter, reffIdsParameter, conditionParameter);
        }
    
        public virtual ObjectResult<spMenuGetAllForUser_Result> spMenuGetAllForUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMenuGetAllForUser_Result>("spMenuGetAllForUser", userIdParameter);
        }
    
        public virtual ObjectResult<spMenuGetAllForUserType_Result> spMenuGetAllForUserType(Nullable<int> typeId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMenuGetAllForUserType_Result>("spMenuGetAllForUserType", typeIdParameter);
        }
    
        public virtual ObjectResult<spMenuGetByUserId_Result> spMenuGetByUserId(Nullable<int> userId, Nullable<int> appId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("appId", appId) :
                new ObjectParameter("appId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMenuGetByUserId_Result>("spMenuGetByUserId", userIdParameter, appIdParameter);
        }
    
        public virtual ObjectResult<spMenuGetRightByUrl_Result> spMenuGetRightByUrl(string url, Nullable<int> userId, Nullable<int> appId)
        {
            var urlParameter = url != null ?
                new ObjectParameter("url", url) :
                new ObjectParameter("url", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("appId", appId) :
                new ObjectParameter("appId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMenuGetRightByUrl_Result>("spMenuGetRightByUrl", urlParameter, userIdParameter, appIdParameter);
        }
    
        public virtual ObjectResult<spMenuSearch_Result> spMenuSearch(Nullable<int> appId, Nullable<int> parentId)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("appId", appId) :
                new ObjectParameter("appId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMenuSearch_Result>("spMenuSearch", appIdParameter, parentIdParameter);
        }
    
        public virtual int spMenuSetDefaultRights(Nullable<int> typeId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMenuSetDefaultRights", typeIdParameter);
        }
    
        public virtual int spMenuUserTypeAddUpdate(Nullable<int> typeId, string menuIds)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var menuIdsParameter = menuIds != null ?
                new ObjectParameter("menuIds", menuIds) :
                new ObjectParameter("menuIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMenuUserTypeAddUpdate", typeIdParameter, menuIdsParameter);
        }
    
        public virtual int spMeritApplicantFinalUpdateConsnet(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMeritApplicantFinalUpdateConsnet", roundNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spMeritConsentStatusByApplicant(Nullable<int> inductionId, Nullable<int> applicantId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spMeritConsentStatusByApplicant", inductionIdParameter, applicantIdParameter);
        }
    
        public virtual int spMeritFixStep08(Nullable<int> roundNo, Nullable<int> typeId)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMeritFixStep08", roundNoParameter, typeIdParameter);
        }
    
        public virtual int spMeritFixStep11(Nullable<int> inductionId, Nullable<int> roundNo, Nullable<int> typeId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMeritFixStep11", inductionIdParameter, roundNoParameter, typeIdParameter);
        }
    
        public virtual ObjectResult<spMeritGetAllByTypeView_Result> spMeritGetAllByTypeView(Nullable<int> top, Nullable<int> pageNum, Nullable<int> typeId, Nullable<int> roundNo, string search)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMeritGetAllByTypeView_Result>("spMeritGetAllByTypeView", topParameter, pageNumParameter, typeIdParameter, roundNoParameter, searchParameter);
        }
    
        public virtual ObjectResult<spMeritGetAllByTypeViewBk_Result> spMeritGetAllByTypeViewBk(Nullable<int> top, Nullable<int> pageNum, Nullable<int> typeId, Nullable<int> quotaId, Nullable<int> roundNo, string search)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var quotaIdParameter = quotaId.HasValue ?
                new ObjectParameter("quotaId", quotaId) :
                new ObjectParameter("quotaId", typeof(int));
    
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMeritGetAllByTypeViewBk_Result>("spMeritGetAllByTypeViewBk", topParameter, pageNumParameter, typeIdParameter, quotaIdParameter, roundNoParameter, searchParameter);
        }
    
        public virtual ObjectResult<spMeritGetAllByTypeViewExport_Result> spMeritGetAllByTypeViewExport(Nullable<int> top, Nullable<int> pageNum, Nullable<int> typeId, Nullable<int> quotaId, Nullable<int> roundNo, string search)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var quotaIdParameter = quotaId.HasValue ?
                new ObjectParameter("quotaId", quotaId) :
                new ObjectParameter("quotaId", typeof(int));
    
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMeritGetAllByTypeViewExport_Result>("spMeritGetAllByTypeViewExport", topParameter, pageNumParameter, typeIdParameter, quotaIdParameter, roundNoParameter, searchParameter);
        }
    
        public virtual ObjectResult<spMeritSpecialityJobSeatsStatus_Result> spMeritSpecialityJobSeatsStatus(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> top, Nullable<int> pageNum, Nullable<int> roundNo, Nullable<int> typeId, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMeritSpecialityJobSeatsStatus_Result>("spMeritSpecialityJobSeatsStatus", inductionIdParameter, phaseIdParameter, topParameter, pageNumParameter, roundNoParameter, typeIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spOTPGetSetByType_Result> spOTPGetSetByType(Nullable<int> typeId, Nullable<int> applicantId, Nullable<int> otpCode)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var otpCodeParameter = otpCode.HasValue ?
                new ObjectParameter("otpCode", otpCode) :
                new ObjectParameter("otpCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spOTPGetSetByType_Result>("spOTPGetSetByType", typeIdParameter, applicantIdParameter, otpCodeParameter);
        }
    
        public virtual ObjectResult<spPreferenceMarksByApplicant_Result> spPreferenceMarksByApplicant(Nullable<int> applicantId, Nullable<int> inductionId, Nullable<int> phaseId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPreferenceMarksByApplicant_Result>("spPreferenceMarksByApplicant", applicantIdParameter, inductionIdParameter, phaseIdParameter);
        }
    
        public virtual ObjectResult<spProfileGetAllData_Result> spProfileGetAllData(Nullable<int> applicantId, Nullable<int> inductionId, Nullable<int> stepId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var stepIdParameter = stepId.HasValue ?
                new ObjectParameter("stepId", stepId) :
                new ObjectParameter("stepId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spProfileGetAllData_Result>("spProfileGetAllData", applicantIdParameter, inductionIdParameter, stepIdParameter);
        }
    
        public virtual ObjectResult<spProfileProcessGetInfoByParam_Result> spProfileProcessGetInfoByParam(Nullable<int> applicantId, Nullable<int> stepId, Nullable<int> inductionId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var stepIdParameter = stepId.HasValue ?
                new ObjectParameter("stepId", stepId) :
                new ObjectParameter("stepId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spProfileProcessGetInfoByParam_Result>("spProfileProcessGetInfoByParam", applicantIdParameter, stepIdParameter, inductionIdParameter);
        }
    
        public virtual ObjectResult<spProgramTypeForDDL_Result> spProgramTypeForDDL(Nullable<int> inductionId, Nullable<int> typeId, Nullable<int> userId, Nullable<int> reffId, string reffIds, string condition)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var reffIdsParameter = reffIds != null ?
                new ObjectParameter("reffIds", reffIds) :
                new ObjectParameter("reffIds", typeof(string));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spProgramTypeForDDL_Result>("spProgramTypeForDDL", inductionIdParameter, typeIdParameter, userIdParameter, reffIdParameter, reffIdsParameter, conditionParameter);
        }
    
        public virtual int spQuotaAddUpdate(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spQuotaAddUpdate", applicantIdParameter);
        }
    
        public virtual ObjectResult<spQuotaForDDL_Result> spQuotaForDDL(Nullable<int> inductionId, Nullable<int> typeId, Nullable<int> userId, Nullable<int> reffId, string reffIds, string condition)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var reffIdsParameter = reffIds != null ?
                new ObjectParameter("reffIds", reffIds) :
                new ObjectParameter("reffIds", typeof(string));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spQuotaForDDL_Result>("spQuotaForDDL", inductionIdParameter, typeIdParameter, userIdParameter, reffIdParameter, reffIdsParameter, conditionParameter);
        }
    
        public virtual ObjectResult<spRegionForDDL_Result> spRegionForDDL(Nullable<int> typeId, Nullable<int> parentId, Nullable<int> reffId, Nullable<int> userId, string reffIds, string condition)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var reffIdsParameter = reffIds != null ?
                new ObjectParameter("reffIds", reffIds) :
                new ObjectParameter("reffIds", typeof(string));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRegionForDDL_Result>("spRegionForDDL", typeIdParameter, parentIdParameter, reffIdParameter, userIdParameter, reffIdsParameter, conditionParameter);
        }
    
        public virtual ObjectResult<spRegionGetByCondition_Result> spRegionGetByCondition(Nullable<int> typeId, Nullable<int> parentId, string condition)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRegionGetByCondition_Result>("spRegionGetByCondition", typeIdParameter, parentIdParameter, conditionParameter);
        }
    
        public virtual ObjectResult<spRegionSearch_Result> spRegionSearch(Nullable<int> top, Nullable<int> pageNum, Nullable<int> typeId, string search)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRegionSearch_Result>("spRegionSearch", topParameter, pageNumParameter, typeIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spReportApplicantJoinedSearch_Result> spReportApplicantJoinedSearch(Nullable<int> top, Nullable<int> pageNum, Nullable<int> inductionId, Nullable<int> specialityId, Nullable<int> instituteId, Nullable<int> hospitalId, Nullable<int> typeId, Nullable<int> quotaId, string search)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var specialityIdParameter = specialityId.HasValue ?
                new ObjectParameter("specialityId", specialityId) :
                new ObjectParameter("specialityId", typeof(int));
    
            var instituteIdParameter = instituteId.HasValue ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var quotaIdParameter = quotaId.HasValue ?
                new ObjectParameter("quotaId", quotaId) :
                new ObjectParameter("quotaId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReportApplicantJoinedSearch_Result>("spReportApplicantJoinedSearch", topParameter, pageNumParameter, inductionIdParameter, specialityIdParameter, instituteIdParameter, hospitalIdParameter, typeIdParameter, quotaIdParameter, searchParameter);
        }
    
        public virtual int spReRunAggregateMarks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunAggregateMarks");
        }
    
        public virtual int spReRunAggregateMarksFCPS(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunAggregateMarksFCPS", roundNoParameter);
        }
    
        public virtual int spReRunAggregateMarksFCPSD(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunAggregateMarksFCPSD", roundNoParameter);
        }
    
        public virtual int spReRunAggregateMarksFF(Nullable<int> roundNo, Nullable<int> typeId)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunAggregateMarksFF", roundNoParameter, typeIdParameter);
        }
    
        public virtual int spReRunAggregateMarksFinalByRoundAndType(Nullable<int> roundNo, Nullable<int> typeId)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunAggregateMarksFinalByRoundAndType", roundNoParameter, typeIdParameter);
        }
    
        public virtual int spReRunAggregateMarksMD(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunAggregateMarksMD", roundNoParameter);
        }
    
        public virtual int spReRunAggregateMarksMDS(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunAggregateMarksMDS", roundNoParameter);
        }
    
        public virtual int spReRunAggregateMarksMS(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunAggregateMarksMS", roundNoParameter);
        }
    
        public virtual int spReRunApplicantSpecialityInstituteQuota()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunApplicantSpecialityInstituteQuota");
        }
    
        public virtual int spReRunDegreeMarks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunDegreeMarks");
        }
    
        public virtual int spReRunDegreeMarksByApplicant(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunDegreeMarksByApplicant", applicantIdParameter);
        }
    
        public virtual int spReRunExperienceContinuousMarksCalculate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunExperienceContinuousMarksCalculate");
        }
    
        public virtual int spReRunExperienceContinuousMarksCalculateAdhoc()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunExperienceContinuousMarksCalculateAdhoc");
        }
    
        public virtual int spReRunExperienceMarksCalculate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunExperienceMarksCalculate");
        }
    
        public virtual int spReRunGazatFCPS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunGazatFCPS");
        }
    
        public virtual int spReRunGazatFCPSD()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunGazatFCPSD");
        }
    
        public virtual int spReRunGazatFF()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunGazatFF");
        }
    
        public virtual int spReRunGazatMD()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunGazatMD");
        }
    
        public virtual int spReRunGazatMDS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunGazatMDS");
        }
    
        public virtual int spReRunGazatMS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunGazatMS");
        }
    
        public virtual int spReRunGazetteDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunGazetteDetail");
        }
    
        public virtual int spReRunGazzette()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunGazzette");
        }
    
        public virtual int spReRunMarksApplicant()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunMarksApplicant");
        }
    
        public virtual int spReRunMarksApplicantDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunMarksApplicantDetail");
        }
    
        public virtual int spReRunMarksApplicantWithoutTypeCalculate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunMarksApplicantWithoutTypeCalculate");
        }
    
        public virtual int spReRunMarksExpectedCalculate(Nullable<int> applicantIdFrom)
        {
            var applicantIdFromParameter = applicantIdFrom.HasValue ?
                new ObjectParameter("applicantIdFrom", applicantIdFrom) :
                new ObjectParameter("applicantIdFrom", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunMarksExpectedCalculate", applicantIdFromParameter);
        }
    
        public virtual int spReRunMarksPreference()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunMarksPreference");
        }
    
        public virtual int spReRunMarksProfile()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunMarksProfile");
        }
    
        public virtual int spReRunMarksProgram()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunMarksProgram");
        }
    
        public virtual int spReRunMeritApplicantFinalByRoundAndType(Nullable<int> roundNo, Nullable<int> typeId)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunMeritApplicantFinalByRoundAndType", roundNoParameter, typeIdParameter);
        }
    
        public virtual int spReRunMeritRangeFCPS(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunMeritRangeFCPS", roundNoParameter);
        }
    
        public virtual int spReRunMeritRangeFCPSD(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunMeritRangeFCPSD", roundNoParameter);
        }
    
        public virtual int spReRunMeritRangeFF(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunMeritRangeFF", roundNoParameter);
        }
    
        public virtual int spReRunMeritRangeMD(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunMeritRangeMD", roundNoParameter);
        }
    
        public virtual int spReRunMeritRangeMDS(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunMeritRangeMDS", roundNoParameter);
        }
    
        public virtual int spReRunMeritRangeMS(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunMeritRangeMS", roundNoParameter);
        }
    
        public virtual int spReRunReAdjustRemaningApplicantFCPS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunReAdjustRemaningApplicantFCPS");
        }
    
        public virtual int spReRunReAdjustRemaningApplicantFCPSD()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunReAdjustRemaningApplicantFCPSD");
        }
    
        public virtual int spReRunReAdjustRemaningApplicantMD()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunReAdjustRemaningApplicantMD");
        }
    
        public virtual int spReRunReAdjustRemaningApplicantMDS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunReAdjustRemaningApplicantMDS");
        }
    
        public virtual int spReRunReAdjustRemaningApplicantMS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunReAdjustRemaningApplicantMS");
        }
    
        public virtual int spReRunReDeleteWrongAttachedFCPS(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunReDeleteWrongAttachedFCPS", roundNoParameter);
        }
    
        public virtual int spReRunReDeleteWrongAttachedFCPSD(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunReDeleteWrongAttachedFCPSD", roundNoParameter);
        }
    
        public virtual int spReRunReDeleteWrongAttachedMD(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunReDeleteWrongAttachedMD", roundNoParameter);
        }
    
        public virtual int spReRunReDeleteWrongAttachedMDS(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunReDeleteWrongAttachedMDS", roundNoParameter);
        }
    
        public virtual int spReRunReDeleteWrongAttachedMS(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunReDeleteWrongAttachedMS", roundNoParameter);
        }
    
        public virtual int spReRunReopenApplicationForRemaningSeatsFCPS(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunReopenApplicationForRemaningSeatsFCPS", roundNoParameter);
        }
    
        public virtual int spReRunReopenApplicationForRemaningSeatsFCPSD(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunReopenApplicationForRemaningSeatsFCPSD", roundNoParameter);
        }
    
        public virtual int spReRunReopenApplicationForRemaningSeatsMD(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunReopenApplicationForRemaningSeatsMD", roundNoParameter);
        }
    
        public virtual int spReRunReopenApplicationForRemaningSeatsMDS(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunReopenApplicationForRemaningSeatsMDS", roundNoParameter);
        }
    
        public virtual int spReRunReopenApplicationForRemaningSeatsMS(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunReopenApplicationForRemaningSeatsMS", roundNoParameter);
        }
    
        public virtual int spReRunSpecilityAndPreferenceReAdjustFCPS(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunSpecilityAndPreferenceReAdjustFCPS", roundNoParameter);
        }
    
        public virtual int spReRunSpecilityAndPreferenceReAdjustFCPSD(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunSpecilityAndPreferenceReAdjustFCPSD", roundNoParameter);
        }
    
        public virtual int spReRunSpecilityAndPreferenceReAdjustFF(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunSpecilityAndPreferenceReAdjustFF", roundNoParameter);
        }
    
        public virtual int spReRunSpecilityAndPreferenceReAdjustMD(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunSpecilityAndPreferenceReAdjustMD", roundNoParameter);
        }
    
        public virtual int spReRunSpecilityAndPreferenceReAdjustMDS(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunSpecilityAndPreferenceReAdjustMDS", roundNoParameter);
        }
    
        public virtual int spReRunSpecilityAndPreferenceReAdjustMS(Nullable<int> roundNo)
        {
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReRunSpecilityAndPreferenceReAdjustMS", roundNoParameter);
        }
    
        public virtual int spResearchJournalAddUpdate(Nullable<int> researchJournalId, string name, string code, string url, Nullable<int> typeId, Nullable<int> batchId, Nullable<int> regionId, Nullable<int> displineId, Nullable<bool> isActive, Nullable<int> adminId)
        {
            var researchJournalIdParameter = researchJournalId.HasValue ?
                new ObjectParameter("researchJournalId", researchJournalId) :
                new ObjectParameter("researchJournalId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("url", url) :
                new ObjectParameter("url", typeof(string));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(int));
    
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("regionId", regionId) :
                new ObjectParameter("regionId", typeof(int));
    
            var displineIdParameter = displineId.HasValue ?
                new ObjectParameter("displineId", displineId) :
                new ObjectParameter("displineId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spResearchJournalAddUpdate", researchJournalIdParameter, nameParameter, codeParameter, urlParameter, typeIdParameter, batchIdParameter, regionIdParameter, displineIdParameter, isActiveParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spResearchJournalForDDL_Result> spResearchJournalForDDL(Nullable<int> typeId, Nullable<int> parentId, Nullable<int> reffId, Nullable<int> userId, string reffIds, string condition)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var reffIdsParameter = reffIds != null ?
                new ObjectParameter("reffIds", reffIds) :
                new ObjectParameter("reffIds", typeof(string));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spResearchJournalForDDL_Result>("spResearchJournalForDDL", typeIdParameter, parentIdParameter, reffIdParameter, userIdParameter, reffIdsParameter, conditionParameter);
        }
    
        public virtual ObjectResult<spResearchJournalSearch_Result> spResearchJournalSearch(Nullable<int> top, Nullable<int> pageNum, Nullable<int> regionId, Nullable<int> displineId, Nullable<int> isActive, string search)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("regionId", regionId) :
                new ObjectParameter("regionId", typeof(int));
    
            var displineIdParameter = displineId.HasValue ?
                new ObjectParameter("displineId", displineId) :
                new ObjectParameter("displineId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spResearchJournalSearch_Result>("spResearchJournalSearch", topParameter, pageNumParameter, regionIdParameter, displineIdParameter, isActiveParameter, searchParameter);
        }
    
        public virtual ObjectResult<spResignationAddUpdate_Result> spResignationAddUpdate(Nullable<int> applicantId, Nullable<int> specialityJobId, Nullable<System.DateTime> resignationDate, string image, Nullable<int> adminId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var specialityJobIdParameter = specialityJobId.HasValue ?
                new ObjectParameter("specialityJobId", specialityJobId) :
                new ObjectParameter("specialityJobId", typeof(int));
    
            var resignationDateParameter = resignationDate.HasValue ?
                new ObjectParameter("resignationDate", resignationDate) :
                new ObjectParameter("resignationDate", typeof(System.DateTime));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spResignationAddUpdate_Result>("spResignationAddUpdate", applicantIdParameter, specialityJobIdParameter, resignationDateParameter, imageParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spResignationSearch_Result> spResignationSearch(Nullable<int> pageNum, Nullable<int> top, Nullable<int> inductionId, Nullable<int> instituteId, string search)
        {
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var instituteIdParameter = instituteId.HasValue ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spResignationSearch_Result>("spResignationSearch", pageNumParameter, topParameter, inductionIdParameter, instituteIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spRptApplicantExperienceByStep_Result> spRptApplicantExperienceByStep(Nullable<int> top, Nullable<int> pageNo, Nullable<int> inductionId, Nullable<int> statusTypeId, Nullable<int> statusId, Nullable<int> levelId, Nullable<int> typeId, string search, Nullable<int> fetchTypeId, Nullable<int> dataTypeId)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("pageNo", pageNo) :
                new ObjectParameter("pageNo", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("levelId", levelId) :
                new ObjectParameter("levelId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var fetchTypeIdParameter = fetchTypeId.HasValue ?
                new ObjectParameter("fetchTypeId", fetchTypeId) :
                new ObjectParameter("fetchTypeId", typeof(int));
    
            var dataTypeIdParameter = dataTypeId.HasValue ?
                new ObjectParameter("dataTypeId", dataTypeId) :
                new ObjectParameter("dataTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRptApplicantExperienceByStep_Result>("spRptApplicantExperienceByStep", topParameter, pageNoParameter, inductionIdParameter, statusTypeIdParameter, statusIdParameter, levelIdParameter, typeIdParameter, searchParameter, fetchTypeIdParameter, dataTypeIdParameter);
        }
    
        public virtual ObjectResult<spRptApplicantJoinedGetByParamDetail_Result> spRptApplicantJoinedGetByParamDetail(Nullable<int> top, Nullable<int> pageNo, Nullable<int> degreeTypeId, Nullable<int> inductionId, Nullable<int> countryId, Nullable<int> provinceId, Nullable<int> countryIdDegree, Nullable<int> instituteTypeId, Nullable<int> instituteIdDegree, Nullable<int> typeId, Nullable<int> quotaId, Nullable<int> specialityId, Nullable<int> instituteId, Nullable<int> hospitalId, string search, Nullable<int> fetchTypeId, Nullable<int> dataTypeId, string spName)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("pageNo", pageNo) :
                new ObjectParameter("pageNo", typeof(int));
    
            var degreeTypeIdParameter = degreeTypeId.HasValue ?
                new ObjectParameter("degreeTypeId", degreeTypeId) :
                new ObjectParameter("degreeTypeId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(int));
    
            var countryIdDegreeParameter = countryIdDegree.HasValue ?
                new ObjectParameter("countryIdDegree", countryIdDegree) :
                new ObjectParameter("countryIdDegree", typeof(int));
    
            var instituteTypeIdParameter = instituteTypeId.HasValue ?
                new ObjectParameter("instituteTypeId", instituteTypeId) :
                new ObjectParameter("instituteTypeId", typeof(int));
    
            var instituteIdDegreeParameter = instituteIdDegree.HasValue ?
                new ObjectParameter("instituteIdDegree", instituteIdDegree) :
                new ObjectParameter("instituteIdDegree", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var quotaIdParameter = quotaId.HasValue ?
                new ObjectParameter("quotaId", quotaId) :
                new ObjectParameter("quotaId", typeof(int));
    
            var specialityIdParameter = specialityId.HasValue ?
                new ObjectParameter("specialityId", specialityId) :
                new ObjectParameter("specialityId", typeof(int));
    
            var instituteIdParameter = instituteId.HasValue ?
                new ObjectParameter("instituteId", instituteId) :
                new ObjectParameter("instituteId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var fetchTypeIdParameter = fetchTypeId.HasValue ?
                new ObjectParameter("fetchTypeId", fetchTypeId) :
                new ObjectParameter("fetchTypeId", typeof(int));
    
            var dataTypeIdParameter = dataTypeId.HasValue ?
                new ObjectParameter("dataTypeId", dataTypeId) :
                new ObjectParameter("dataTypeId", typeof(int));
    
            var spNameParameter = spName != null ?
                new ObjectParameter("spName", spName) :
                new ObjectParameter("spName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRptApplicantJoinedGetByParamDetail_Result>("spRptApplicantJoinedGetByParamDetail", topParameter, pageNoParameter, degreeTypeIdParameter, inductionIdParameter, countryIdParameter, provinceIdParameter, countryIdDegreeParameter, instituteTypeIdParameter, instituteIdDegreeParameter, typeIdParameter, quotaIdParameter, specialityIdParameter, instituteIdParameter, hospitalIdParameter, searchParameter, fetchTypeIdParameter, dataTypeIdParameter, spNameParameter);
        }
    
        public virtual ObjectResult<spRptApplicantJoinedTraineeEmployee_Result> spRptApplicantJoinedTraineeEmployee(Nullable<int> top, Nullable<int> pageNo, Nullable<int> inductionId, Nullable<int> traineeStatusId, Nullable<int> supervisorStatusId, Nullable<int> jobSpecialityId, string search, Nullable<int> fetchTypeId)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("pageNo", pageNo) :
                new ObjectParameter("pageNo", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var traineeStatusIdParameter = traineeStatusId.HasValue ?
                new ObjectParameter("traineeStatusId", traineeStatusId) :
                new ObjectParameter("traineeStatusId", typeof(int));
    
            var supervisorStatusIdParameter = supervisorStatusId.HasValue ?
                new ObjectParameter("supervisorStatusId", supervisorStatusId) :
                new ObjectParameter("supervisorStatusId", typeof(int));
    
            var jobSpecialityIdParameter = jobSpecialityId.HasValue ?
                new ObjectParameter("JobSpecialityId", jobSpecialityId) :
                new ObjectParameter("JobSpecialityId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var fetchTypeIdParameter = fetchTypeId.HasValue ?
                new ObjectParameter("fetchTypeId", fetchTypeId) :
                new ObjectParameter("fetchTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRptApplicantJoinedTraineeEmployee_Result>("spRptApplicantJoinedTraineeEmployee", topParameter, pageNoParameter, inductionIdParameter, traineeStatusIdParameter, supervisorStatusIdParameter, jobSpecialityIdParameter, searchParameter, fetchTypeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spRptApplicantMeritByRoundNo(Nullable<int> top, Nullable<int> pageNo, Nullable<int> inductionId, Nullable<int> roundNo, string search, Nullable<int> fetchTypeId, Nullable<int> dataTypeId)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("pageNo", pageNo) :
                new ObjectParameter("pageNo", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var fetchTypeIdParameter = fetchTypeId.HasValue ?
                new ObjectParameter("fetchTypeId", fetchTypeId) :
                new ObjectParameter("fetchTypeId", typeof(int));
    
            var dataTypeIdParameter = dataTypeId.HasValue ?
                new ObjectParameter("dataTypeId", dataTypeId) :
                new ObjectParameter("dataTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spRptApplicantMeritByRoundNo", topParameter, pageNoParameter, inductionIdParameter, roundNoParameter, searchParameter, fetchTypeIdParameter, dataTypeIdParameter);
        }
    
        public virtual ObjectResult<spRptApplicantMeritGetAllByParam_Result> spRptApplicantMeritGetAllByParam(Nullable<int> top, Nullable<int> pageNo, Nullable<int> inductionId, string search, Nullable<int> fetchTypeId, Nullable<int> dataTypeId, string spName)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("pageNo", pageNo) :
                new ObjectParameter("pageNo", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var fetchTypeIdParameter = fetchTypeId.HasValue ?
                new ObjectParameter("fetchTypeId", fetchTypeId) :
                new ObjectParameter("fetchTypeId", typeof(int));
    
            var dataTypeIdParameter = dataTypeId.HasValue ?
                new ObjectParameter("dataTypeId", dataTypeId) :
                new ObjectParameter("dataTypeId", typeof(int));
    
            var spNameParameter = spName != null ?
                new ObjectParameter("spName", spName) :
                new ObjectParameter("spName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRptApplicantMeritGetAllByParam_Result>("spRptApplicantMeritGetAllByParam", topParameter, pageNoParameter, inductionIdParameter, searchParameter, fetchTypeIdParameter, dataTypeIdParameter, spNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spRptHsApplication(Nullable<int> top, Nullable<int> pageNo, Nullable<int> hsId, Nullable<int> typeId, string search, Nullable<int> fetchTypeId, Nullable<int> dataTypeId)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("pageNo", pageNo) :
                new ObjectParameter("pageNo", typeof(int));
    
            var hsIdParameter = hsId.HasValue ?
                new ObjectParameter("hsId", hsId) :
                new ObjectParameter("hsId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var fetchTypeIdParameter = fetchTypeId.HasValue ?
                new ObjectParameter("fetchTypeId", fetchTypeId) :
                new ObjectParameter("fetchTypeId", typeof(int));
    
            var dataTypeIdParameter = dataTypeId.HasValue ?
                new ObjectParameter("dataTypeId", dataTypeId) :
                new ObjectParameter("dataTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spRptHsApplication", topParameter, pageNoParameter, hsIdParameter, typeIdParameter, searchParameter, fetchTypeIdParameter, dataTypeIdParameter);
        }
    
        public virtual ObjectResult<spRptInductionParamSingle_Result> spRptInductionParamSingle(Nullable<int> top, Nullable<int> pageNo, Nullable<int> inductionId, string search, Nullable<int> fetchTypeId, Nullable<int> reportId, Nullable<int> param1)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("pageNo", pageNo) :
                new ObjectParameter("pageNo", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var fetchTypeIdParameter = fetchTypeId.HasValue ?
                new ObjectParameter("fetchTypeId", fetchTypeId) :
                new ObjectParameter("fetchTypeId", typeof(int));
    
            var reportIdParameter = reportId.HasValue ?
                new ObjectParameter("reportId", reportId) :
                new ObjectParameter("reportId", typeof(int));
    
            var param1Parameter = param1.HasValue ?
                new ObjectParameter("param1", param1) :
                new ObjectParameter("param1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRptInductionParamSingle_Result>("spRptInductionParamSingle", topParameter, pageNoParameter, inductionIdParameter, searchParameter, fetchTypeIdParameter, reportIdParameter, param1Parameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spRptJoinedApplicantWithExperience(Nullable<int> top, Nullable<int> pageNo, Nullable<int> inductionId, string search, Nullable<int> fetchTypeId, Nullable<int> dataTypeId)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("pageNo", pageNo) :
                new ObjectParameter("pageNo", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var fetchTypeIdParameter = fetchTypeId.HasValue ?
                new ObjectParameter("fetchTypeId", fetchTypeId) :
                new ObjectParameter("fetchTypeId", typeof(int));
    
            var dataTypeIdParameter = dataTypeId.HasValue ?
                new ObjectParameter("dataTypeId", dataTypeId) :
                new ObjectParameter("dataTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spRptJoinedApplicantWithExperience", topParameter, pageNoParameter, inductionIdParameter, searchParameter, fetchTypeIdParameter, dataTypeIdParameter);
        }
    
        public virtual ObjectResult<spRptLeave_Result> spRptLeave(Nullable<int> top, Nullable<int> pageNo, Nullable<int> inductionId, Nullable<int> reffId, Nullable<int> adminId, Nullable<int> typeId, Nullable<int> statusId, Nullable<int> assignToTypeId, Nullable<int> processId, string search, Nullable<int> fetchTypeId, Nullable<int> dataTypeId)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("pageNo", pageNo) :
                new ObjectParameter("pageNo", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var assignToTypeIdParameter = assignToTypeId.HasValue ?
                new ObjectParameter("assignToTypeId", assignToTypeId) :
                new ObjectParameter("assignToTypeId", typeof(int));
    
            var processIdParameter = processId.HasValue ?
                new ObjectParameter("processId", processId) :
                new ObjectParameter("processId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var fetchTypeIdParameter = fetchTypeId.HasValue ?
                new ObjectParameter("fetchTypeId", fetchTypeId) :
                new ObjectParameter("fetchTypeId", typeof(int));
    
            var dataTypeIdParameter = dataTypeId.HasValue ?
                new ObjectParameter("dataTypeId", dataTypeId) :
                new ObjectParameter("dataTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRptLeave_Result>("spRptLeave", topParameter, pageNoParameter, inductionIdParameter, reffIdParameter, adminIdParameter, typeIdParameter, statusIdParameter, assignToTypeIdParameter, processIdParameter, searchParameter, fetchTypeIdParameter, dataTypeIdParameter);
        }
    
        public virtual ObjectResult<spRptMeritApplicantRounds_Result> spRptMeritApplicantRounds(Nullable<int> inductionId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRptMeritApplicantRounds_Result>("spRptMeritApplicantRounds", inductionIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spRptMeritApplicantWithExperience(Nullable<int> top, Nullable<int> pageNo, Nullable<int> inductionId, Nullable<int> roundNo, string search, Nullable<int> fetchTypeId, Nullable<int> dataTypeId)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("pageNo", pageNo) :
                new ObjectParameter("pageNo", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var fetchTypeIdParameter = fetchTypeId.HasValue ?
                new ObjectParameter("fetchTypeId", fetchTypeId) :
                new ObjectParameter("fetchTypeId", typeof(int));
    
            var dataTypeIdParameter = dataTypeId.HasValue ?
                new ObjectParameter("dataTypeId", dataTypeId) :
                new ObjectParameter("dataTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spRptMeritApplicantWithExperience", topParameter, pageNoParameter, inductionIdParameter, roundNoParameter, searchParameter, fetchTypeIdParameter, dataTypeIdParameter);
        }
    
        public virtual ObjectResult<spRptSeatsStatus_Result> spRptSeatsStatus(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> top, Nullable<int> pageNum, Nullable<int> typeId, string search, Nullable<int> isExport)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRptSeatsStatus_Result>("spRptSeatsStatus", inductionIdParameter, phaseIdParameter, topParameter, pageNumParameter, typeIdParameter, searchParameter, isExportParameter);
        }
    
        public virtual ObjectResult<spRptSpecialityJobSeatStatus_Result> spRptSpecialityJobSeatStatus(Nullable<int> top, Nullable<int> pageNo, Nullable<int> inductionId, Nullable<int> roundNo, string search, Nullable<int> fetchTypeId, Nullable<int> dataTypeId, string spName)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("pageNo", pageNo) :
                new ObjectParameter("pageNo", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var fetchTypeIdParameter = fetchTypeId.HasValue ?
                new ObjectParameter("fetchTypeId", fetchTypeId) :
                new ObjectParameter("fetchTypeId", typeof(int));
    
            var dataTypeIdParameter = dataTypeId.HasValue ?
                new ObjectParameter("dataTypeId", dataTypeId) :
                new ObjectParameter("dataTypeId", typeof(int));
    
            var spNameParameter = spName != null ?
                new ObjectParameter("spName", spName) :
                new ObjectParameter("spName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRptSpecialityJobSeatStatus_Result>("spRptSpecialityJobSeatStatus", topParameter, pageNoParameter, inductionIdParameter, roundNoParameter, searchParameter, fetchTypeIdParameter, dataTypeIdParameter, spNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spRptSpecialityJobSeatStatusAfterConsent(Nullable<int> top, Nullable<int> pageNo, Nullable<int> inductionId, Nullable<int> roundNo, string search, Nullable<int> dataTypeId)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("pageNo", pageNo) :
                new ObjectParameter("pageNo", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var dataTypeIdParameter = dataTypeId.HasValue ?
                new ObjectParameter("dataTypeId", dataTypeId) :
                new ObjectParameter("dataTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spRptSpecialityJobSeatStatusAfterConsent", topParameter, pageNoParameter, inductionIdParameter, roundNoParameter, searchParameter, dataTypeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spRptSpecialityJobSeatStatusAfterJoining(Nullable<int> top, Nullable<int> pageNo, Nullable<int> inductionId, Nullable<int> roundNo, string search, Nullable<int> dataTypeId)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("pageNo", pageNo) :
                new ObjectParameter("pageNo", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var dataTypeIdParameter = dataTypeId.HasValue ?
                new ObjectParameter("dataTypeId", dataTypeId) :
                new ObjectParameter("dataTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spRptSpecialityJobSeatStatusAfterJoining", topParameter, pageNoParameter, inductionIdParameter, roundNoParameter, searchParameter, dataTypeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spRptSpecialityJobSeatStatusBeforeConsent(Nullable<int> top, Nullable<int> pageNo, Nullable<int> inductionId, Nullable<int> roundNo, string search, Nullable<int> dataTypeId)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("pageNo", pageNo) :
                new ObjectParameter("pageNo", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var roundNoParameter = roundNo.HasValue ?
                new ObjectParameter("roundNo", roundNo) :
                new ObjectParameter("roundNo", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var dataTypeIdParameter = dataTypeId.HasValue ?
                new ObjectParameter("dataTypeId", dataTypeId) :
                new ObjectParameter("dataTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spRptSpecialityJobSeatStatusBeforeConsent", topParameter, pageNoParameter, inductionIdParameter, roundNoParameter, searchParameter, dataTypeIdParameter);
        }
    
        public virtual int spRptSpecilityHospitalSupervisorCountStatusByInductionIds(string inductionIds)
        {
            var inductionIdsParameter = inductionIds != null ?
                new ObjectParameter("inductionIds", inductionIds) :
                new ObjectParameter("inductionIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRptSpecilityHospitalSupervisorCountStatusByInductionIds", inductionIdsParameter);
        }
    
        public virtual int spRunGazetteFinal(Nullable<int> inductionId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRunGazetteFinal", inductionIdParameter);
        }
    
        public virtual int spRunMarksFinal(Nullable<int> inductionId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRunMarksFinal", inductionIdParameter);
        }
    
        public virtual int spRunMarksPreferenceByApplicant(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRunMarksPreferenceByApplicant", applicantIdParameter);
        }
    
        public virtual int spRunMarksPreferenceFinal(Nullable<int> inductionId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRunMarksPreferenceFinal", inductionIdParameter);
        }
    
        public virtual int spSendEmail(string emailTo, string subjectt, string bodyy, string profileName, string bodyFormat)
        {
            var emailToParameter = emailTo != null ?
                new ObjectParameter("emailTo", emailTo) :
                new ObjectParameter("emailTo", typeof(string));
    
            var subjecttParameter = subjectt != null ?
                new ObjectParameter("subjectt", subjectt) :
                new ObjectParameter("subjectt", typeof(string));
    
            var bodyyParameter = bodyy != null ?
                new ObjectParameter("bodyy", bodyy) :
                new ObjectParameter("bodyy", typeof(string));
    
            var profileNameParameter = profileName != null ?
                new ObjectParameter("profileName", profileName) :
                new ObjectParameter("profileName", typeof(string));
    
            var bodyFormatParameter = bodyFormat != null ?
                new ObjectParameter("bodyFormat", bodyFormat) :
                new ObjectParameter("bodyFormat", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSendEmail", emailToParameter, subjecttParameter, bodyyParameter, profileNameParameter, bodyFormatParameter);
        }
    
        public virtual ObjectResult<string> spSendSMS(string number)
        {
            var numberParameter = number != null ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spSendSMS", numberParameter);
        }
    
        public virtual ObjectResult<spSMSAddUpdate_Result> spSMSAddUpdate(Nullable<int> inductionId, Nullable<int> id, Nullable<int> smsId, Nullable<int> projId, string detail, Nullable<int> typeId, Nullable<bool> isActive, Nullable<bool> isQuery, string query, Nullable<int> adminId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var smsIdParameter = smsId.HasValue ?
                new ObjectParameter("smsId", smsId) :
                new ObjectParameter("smsId", typeof(int));
    
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(int));
    
            var detailParameter = detail != null ?
                new ObjectParameter("detail", detail) :
                new ObjectParameter("detail", typeof(string));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var isQueryParameter = isQuery.HasValue ?
                new ObjectParameter("isQuery", isQuery) :
                new ObjectParameter("isQuery", typeof(bool));
    
            var queryParameter = query != null ?
                new ObjectParameter("query", query) :
                new ObjectParameter("query", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSMSAddUpdate_Result>("spSMSAddUpdate", inductionIdParameter, idParameter, smsIdParameter, projIdParameter, detailParameter, typeIdParameter, isActiveParameter, isQueryParameter, queryParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spSmsCampaignAddUpdate_Result> spSmsCampaignAddUpdate(Nullable<int> campaignId, Nullable<int> projId, string name, string detail, string numbers, Nullable<bool> isSchedule, Nullable<System.DateTime> startTime, Nullable<int> sortOrder, Nullable<int> statusId, Nullable<int> adminId)
        {
            var campaignIdParameter = campaignId.HasValue ?
                new ObjectParameter("campaignId", campaignId) :
                new ObjectParameter("campaignId", typeof(int));
    
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var detailParameter = detail != null ?
                new ObjectParameter("detail", detail) :
                new ObjectParameter("detail", typeof(string));
    
            var numbersParameter = numbers != null ?
                new ObjectParameter("numbers", numbers) :
                new ObjectParameter("numbers", typeof(string));
    
            var isScheduleParameter = isSchedule.HasValue ?
                new ObjectParameter("isSchedule", isSchedule) :
                new ObjectParameter("isSchedule", typeof(bool));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("startTime", startTime) :
                new ObjectParameter("startTime", typeof(System.DateTime));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSmsCampaignAddUpdate_Result>("spSmsCampaignAddUpdate", campaignIdParameter, projIdParameter, nameParameter, detailParameter, numbersParameter, isScheduleParameter, startTimeParameter, sortOrderParameter, statusIdParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spSmsCampaignDetailInfo(Nullable<int> campaignId, Nullable<int> statusId, Nullable<int> fetchTypeId)
        {
            var campaignIdParameter = campaignId.HasValue ?
                new ObjectParameter("campaignId", campaignId) :
                new ObjectParameter("campaignId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var fetchTypeIdParameter = fetchTypeId.HasValue ?
                new ObjectParameter("fetchTypeId", fetchTypeId) :
                new ObjectParameter("fetchTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spSmsCampaignDetailInfo", campaignIdParameter, statusIdParameter, fetchTypeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spSmsCampaignGetById(Nullable<int> campaignId)
        {
            var campaignIdParameter = campaignId.HasValue ?
                new ObjectParameter("campaignId", campaignId) :
                new ObjectParameter("campaignId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spSmsCampaignGetById", campaignIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spSmsCampaignSearch(Nullable<int> projId, Nullable<int> statusId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spSmsCampaignSearch", projIdParameter, statusIdParameter);
        }
    
        public virtual ObjectResult<spSMSGetById_Result> spSMSGetById(Nullable<int> id, Nullable<int> typeId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSMSGetById_Result>("spSMSGetById", idParameter, typeIdParameter);
        }
    
        public virtual ObjectResult<spSMSGetByTypeForApplicant_Result> spSMSGetByTypeForApplicant(Nullable<int> applicantId, Nullable<int> typeId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSMSGetByTypeForApplicant_Result>("spSMSGetByTypeForApplicant", applicantIdParameter, typeIdParameter);
        }
    
        public virtual ObjectResult<spSMSProcessAddUpdate_Result> spSMSProcessAddUpdate(Nullable<int> smsProcessId, Nullable<int> smsId, Nullable<int> applicantId, Nullable<int> isProcess, Nullable<int> isSent, string resp, string body, string contactNumber)
        {
            var smsProcessIdParameter = smsProcessId.HasValue ?
                new ObjectParameter("smsProcessId", smsProcessId) :
                new ObjectParameter("smsProcessId", typeof(int));
    
            var smsIdParameter = smsId.HasValue ?
                new ObjectParameter("smsId", smsId) :
                new ObjectParameter("smsId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var isProcessParameter = isProcess.HasValue ?
                new ObjectParameter("isProcess", isProcess) :
                new ObjectParameter("isProcess", typeof(int));
    
            var isSentParameter = isSent.HasValue ?
                new ObjectParameter("isSent", isSent) :
                new ObjectParameter("isSent", typeof(int));
    
            var respParameter = resp != null ?
                new ObjectParameter("resp", resp) :
                new ObjectParameter("resp", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("body", body) :
                new ObjectParameter("body", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("contactNumber", contactNumber) :
                new ObjectParameter("contactNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSMSProcessAddUpdate_Result>("spSMSProcessAddUpdate", smsProcessIdParameter, smsIdParameter, applicantIdParameter, isProcessParameter, isSentParameter, respParameter, bodyParameter, contactNumberParameter);
        }
    
        public virtual int spSMSProcessAddUpdateBk(Nullable<int> smsProcessId, Nullable<int> smsId, Nullable<int> applicantId, Nullable<int> isProcess, Nullable<int> isSent)
        {
            var smsProcessIdParameter = smsProcessId.HasValue ?
                new ObjectParameter("smsProcessId", smsProcessId) :
                new ObjectParameter("smsProcessId", typeof(int));
    
            var smsIdParameter = smsId.HasValue ?
                new ObjectParameter("smsId", smsId) :
                new ObjectParameter("smsId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var isProcessParameter = isProcess.HasValue ?
                new ObjectParameter("isProcess", isProcess) :
                new ObjectParameter("isProcess", typeof(int));
    
            var isSentParameter = isSent.HasValue ?
                new ObjectParameter("isSent", isSent) :
                new ObjectParameter("isSent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSMSProcessAddUpdateBk", smsProcessIdParameter, smsIdParameter, applicantIdParameter, isProcessParameter, isSentParameter);
        }
    
        public virtual ObjectResult<spSMSProcessCreateBySmsIdAndApplicant_Result> spSMSProcessCreateBySmsIdAndApplicant(Nullable<int> smsId, Nullable<int> applicantId, Nullable<bool> isSendAgaint, Nullable<int> isView)
        {
            var smsIdParameter = smsId.HasValue ?
                new ObjectParameter("smsId", smsId) :
                new ObjectParameter("smsId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var isSendAgaintParameter = isSendAgaint.HasValue ?
                new ObjectParameter("isSendAgaint", isSendAgaint) :
                new ObjectParameter("isSendAgaint", typeof(bool));
    
            var isViewParameter = isView.HasValue ?
                new ObjectParameter("isView", isView) :
                new ObjectParameter("isView", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSMSProcessCreateBySmsIdAndApplicant_Result>("spSMSProcessCreateBySmsIdAndApplicant", smsIdParameter, applicantIdParameter, isSendAgaintParameter, isViewParameter);
        }
    
        public virtual int spSMSProcessCreateListBySmsId(Nullable<int> smsId, Nullable<int> typeId)
        {
            var smsIdParameter = smsId.HasValue ?
                new ObjectParameter("smsId", smsId) :
                new ObjectParameter("smsId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSMSProcessCreateListBySmsId", smsIdParameter, typeIdParameter);
        }
    
        public virtual int spSMSProcessCreateListBySmsIdBk(Nullable<int> typeId, Nullable<int> smsId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var smsIdParameter = smsId.HasValue ?
                new ObjectParameter("smsId", smsId) :
                new ObjectParameter("smsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSMSProcessCreateListBySmsIdBk", typeIdParameter, smsIdParameter);
        }
    
        public virtual ObjectResult<spSMSProcessGetBySmsId_Result> spSMSProcessGetBySmsId(Nullable<int> smsId, Nullable<int> isProcess)
        {
            var smsIdParameter = smsId.HasValue ?
                new ObjectParameter("smsId", smsId) :
                new ObjectParameter("smsId", typeof(int));
    
            var isProcessParameter = isProcess.HasValue ?
                new ObjectParameter("isProcess", isProcess) :
                new ObjectParameter("isProcess", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSMSProcessGetBySmsId_Result>("spSMSProcessGetBySmsId", smsIdParameter, isProcessParameter);
        }
    
        public virtual ObjectResult<spSMSProcessGetByType_Result> spSMSProcessGetByType(Nullable<int> typeId, Nullable<int> isProcess)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var isProcessParameter = isProcess.HasValue ?
                new ObjectParameter("isProcess", isProcess) :
                new ObjectParameter("isProcess", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSMSProcessGetByType_Result>("spSMSProcessGetByType", typeIdParameter, isProcessParameter);
        }
    
        public virtual ObjectResult<spSMSProcessGetInfoByType_Result> spSMSProcessGetInfoByType(Nullable<int> inductionId, Nullable<int> applicantId, Nullable<int> typeId, string reffIds1, string reffIds2, string reffIds3, string reffIds4, string reffIds5, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var reffIds1Parameter = reffIds1 != null ?
                new ObjectParameter("reffIds1", reffIds1) :
                new ObjectParameter("reffIds1", typeof(string));
    
            var reffIds2Parameter = reffIds2 != null ?
                new ObjectParameter("reffIds2", reffIds2) :
                new ObjectParameter("reffIds2", typeof(string));
    
            var reffIds3Parameter = reffIds3 != null ?
                new ObjectParameter("reffIds3", reffIds3) :
                new ObjectParameter("reffIds3", typeof(string));
    
            var reffIds4Parameter = reffIds4 != null ?
                new ObjectParameter("reffIds4", reffIds4) :
                new ObjectParameter("reffIds4", typeof(string));
    
            var reffIds5Parameter = reffIds5 != null ?
                new ObjectParameter("reffIds5", reffIds5) :
                new ObjectParameter("reffIds5", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSMSProcessGetInfoByType_Result>("spSMSProcessGetInfoByType", inductionIdParameter, applicantIdParameter, typeIdParameter, reffIds1Parameter, reffIds2Parameter, reffIds3Parameter, reffIds4Parameter, reffIds5Parameter, searchParameter);
        }
    
        public virtual ObjectResult<spSMSProcessGetRemaning_Result> spSMSProcessGetRemaning()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSMSProcessGetRemaning_Result>("spSMSProcessGetRemaning");
        }
    
        public virtual ObjectResult<spSMSProcessSearch_Result> spSMSProcessSearch(Nullable<int> applicantId, Nullable<int> inductionId, Nullable<int> top, Nullable<int> pageNum)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSMSProcessSearch_Result>("spSMSProcessSearch", applicantIdParameter, inductionIdParameter, topParameter, pageNumParameter);
        }
    
        public virtual ObjectResult<spSMSRunQueryByTypeId_Result> spSMSRunQueryByTypeId(Nullable<int> typeId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSMSRunQueryByTypeId_Result>("spSMSRunQueryByTypeId", typeIdParameter);
        }
    
        public virtual ObjectResult<spSMSSearch_Result> spSMSSearch(Nullable<int> projId, string search)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSMSSearch_Result>("spSMSSearch", projIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spSpecialityForDDL_Result> spSpecialityForDDL(Nullable<int> typeId, Nullable<int> userId, Nullable<int> reffId, string reffIds, string condition)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var reffIdsParameter = reffIds != null ?
                new ObjectParameter("reffIds", reffIds) :
                new ObjectParameter("reffIds", typeof(string));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSpecialityForDDL_Result>("spSpecialityForDDL", typeIdParameter, userIdParameter, reffIdParameter, reffIdsParameter, conditionParameter);
        }
    
        public virtual int spSpecialityJobAddUpdateParam(Nullable<int> inductionId, Nullable<int> baseId, Nullable<int> reffId, string search, Nullable<int> adminId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var baseIdParameter = baseId.HasValue ?
                new ObjectParameter("baseId", baseId) :
                new ObjectParameter("baseId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSpecialityJobAddUpdateParam", inductionIdParameter, baseIdParameter, reffIdParameter, searchParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spSpecialityJobByInduction_Result> spSpecialityJobByInduction(Nullable<int> inductionId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSpecialityJobByInduction_Result>("spSpecialityJobByInduction", inductionIdParameter);
        }
    
        public virtual ObjectResult<spSpecialityJobByParameters_Result> spSpecialityJobByParameters(Nullable<int> inductionId, Nullable<int> specialityId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var specialityIdParameter = specialityId.HasValue ?
                new ObjectParameter("specialityId", specialityId) :
                new ObjectParameter("specialityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSpecialityJobByParameters_Result>("spSpecialityJobByParameters", inductionIdParameter, specialityIdParameter);
        }
    
        public virtual ObjectResult<spSpecialityJobByTypeId_Result> spSpecialityJobByTypeId(Nullable<int> inductionId, Nullable<int> typeId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSpecialityJobByTypeId_Result>("spSpecialityJobByTypeId", inductionIdParameter, typeIdParameter);
        }
    
        public virtual ObjectResult<spSpecialityJobGetDataByParam_Result> spSpecialityJobGetDataByParam(Nullable<int> inductionId, Nullable<int> baseId, Nullable<int> reffId, string search, string param)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var baseIdParameter = baseId.HasValue ?
                new ObjectParameter("baseId", baseId) :
                new ObjectParameter("baseId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var paramParameter = param != null ?
                new ObjectParameter("param", param) :
                new ObjectParameter("param", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSpecialityJobGetDataByParam_Result>("spSpecialityJobGetDataByParam", inductionIdParameter, baseIdParameter, reffIdParameter, searchParameter, paramParameter);
        }
    
        public virtual ObjectResult<spSpecialityJobLisitngGetByParam_Result> spSpecialityJobLisitngGetByParam(Nullable<int> top, Nullable<int> pageNum, Nullable<int> inductionId, Nullable<int> typeId, Nullable<int> adminId, string search)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSpecialityJobLisitngGetByParam_Result>("spSpecialityJobLisitngGetByParam", topParameter, pageNumParameter, inductionIdParameter, typeIdParameter, adminIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spSpecialityJobPrefferenceSearch_Result> spSpecialityJobPrefferenceSearch(Nullable<int> inductionId, Nullable<int> phaseId, Nullable<int> top, Nullable<int> pageNum, Nullable<int> statusTypeId, Nullable<int> typeId, Nullable<int> quotaId, Nullable<int> specialityId, Nullable<int> hospitalId, string search)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("statusTypeId", statusTypeId) :
                new ObjectParameter("statusTypeId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var quotaIdParameter = quotaId.HasValue ?
                new ObjectParameter("quotaId", quotaId) :
                new ObjectParameter("quotaId", typeof(int));
    
            var specialityIdParameter = specialityId.HasValue ?
                new ObjectParameter("specialityId", specialityId) :
                new ObjectParameter("specialityId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSpecialityJobPrefferenceSearch_Result>("spSpecialityJobPrefferenceSearch", inductionIdParameter, phaseIdParameter, topParameter, pageNumParameter, statusTypeIdParameter, typeIdParameter, quotaIdParameter, specialityIdParameter, hospitalIdParameter, searchParameter);
        }
    
        public virtual int spSynchApplicantCertificate(Nullable<int> inductionId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSynchApplicantCertificate", inductionIdParameter);
        }
    
        public virtual int spSynchApplicantDegree(Nullable<int> inductionId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSynchApplicantDegree", inductionIdParameter);
        }
    
        public virtual int spSynchApplicantDegreeAttempt(Nullable<int> inductionId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSynchApplicantDegreeAttempt", inductionIdParameter);
        }
    
        public virtual int spSynchApplicantDistinction(Nullable<int> inductionId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSynchApplicantDistinction", inductionIdParameter);
        }
    
        public virtual int spSynchApplicantExperience(Nullable<int> inductionId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSynchApplicantExperience", inductionIdParameter);
        }
    
        public virtual int spSynchApplicantHouseJob(Nullable<int> inductionId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSynchApplicantHouseJob", inductionIdParameter);
        }
    
        public virtual int spSynchApplicantInfo(Nullable<int> inductionId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSynchApplicantInfo", inductionIdParameter);
        }
    
        public virtual int spSynchApplicantResearchPaper(Nullable<int> inductionId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSynchApplicantResearchPaper", inductionIdParameter);
        }
    
        public virtual int spSynchApplicantSpecility(Nullable<int> inductionId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSynchApplicantSpecility", inductionIdParameter);
        }
    
        public virtual int spSynchApplicantVoucher(Nullable<int> inductionId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSynchApplicantVoucher", inductionIdParameter);
        }
    
        public virtual int spSynchSpecialityJob(Nullable<int> specialityJobId)
        {
            var specialityJobIdParameter = specialityJobId.HasValue ?
                new ObjectParameter("specialityJobId", specialityJobId) :
                new ObjectParameter("specialityJobId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSynchSpecialityJob", specialityJobIdParameter);
        }
    
        public virtual ObjectResult<spTickerAddUpdate_Result> spTickerAddUpdate(Nullable<int> projId, Nullable<int> tickerId, Nullable<int> reffId, Nullable<int> detailId, Nullable<int> typeId, string name, string detail, Nullable<int> sortOrder, Nullable<bool> isActive, Nullable<int> adminId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(int));
    
            var tickerIdParameter = tickerId.HasValue ?
                new ObjectParameter("tickerId", tickerId) :
                new ObjectParameter("tickerId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var detailIdParameter = detailId.HasValue ?
                new ObjectParameter("detailId", detailId) :
                new ObjectParameter("detailId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var detailParameter = detail != null ?
                new ObjectParameter("detail", detail) :
                new ObjectParameter("detail", typeof(string));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTickerAddUpdate_Result>("spTickerAddUpdate", projIdParameter, tickerIdParameter, reffIdParameter, detailIdParameter, typeIdParameter, nameParameter, detailParameter, sortOrderParameter, isActiveParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spTickerGetById_Result> spTickerGetById(Nullable<int> tickerId)
        {
            var tickerIdParameter = tickerId.HasValue ?
                new ObjectParameter("tickerId", tickerId) :
                new ObjectParameter("tickerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTickerGetById_Result>("spTickerGetById", tickerIdParameter);
        }
    
        public virtual ObjectResult<spTickerGetByUI_Result> spTickerGetByUI(Nullable<int> projId, Nullable<int> reffId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTickerGetByUI_Result>("spTickerGetByUI", projIdParameter, reffIdParameter);
        }
    
        public virtual ObjectResult<spTickerSearch_Result> spTickerSearch(Nullable<int> projId, Nullable<int> typeId, Nullable<int> reffId, Nullable<int> detailId, Nullable<int> fetchTypeId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var reffIdParameter = reffId.HasValue ?
                new ObjectParameter("reffId", reffId) :
                new ObjectParameter("reffId", typeof(int));
    
            var detailIdParameter = detailId.HasValue ?
                new ObjectParameter("detailId", detailId) :
                new ObjectParameter("detailId", typeof(int));
    
            var fetchTypeIdParameter = fetchTypeId.HasValue ?
                new ObjectParameter("fetchTypeId", fetchTypeId) :
                new ObjectParameter("fetchTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTickerSearch_Result>("spTickerSearch", projIdParameter, typeIdParameter, reffIdParameter, detailIdParameter, fetchTypeIdParameter);
        }
    
        public virtual ObjectResult<spTraineeAttachedGetByEmployee_Result> spTraineeAttachedGetByEmployee(Nullable<int> hospitalId, Nullable<int> employeeId, string search)
        {
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTraineeAttachedGetByEmployee_Result>("spTraineeAttachedGetByEmployee", hospitalIdParameter, employeeIdParameter, searchParameter);
        }
    
        public virtual ObjectResult<spTraineeDeAttach_Result> spTraineeDeAttach(Nullable<int> hospitalId, Nullable<int> applicantId, Nullable<int> inductionId, Nullable<int> adminId)
        {
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTraineeDeAttach_Result>("spTraineeDeAttach", hospitalIdParameter, applicantIdParameter, inductionIdParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spTraineeInfoAddUpdate_Result> spTraineeInfoAddUpdate(Nullable<int> inductionId, Nullable<int> applicantId, Nullable<int> typeId, Nullable<int> specialityId, Nullable<int> hospitalId, Nullable<decimal> marks, Nullable<System.DateTime> joiningDate, Nullable<int> adminId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var specialityIdParameter = specialityId.HasValue ?
                new ObjectParameter("specialityId", specialityId) :
                new ObjectParameter("specialityId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var marksParameter = marks.HasValue ?
                new ObjectParameter("marks", marks) :
                new ObjectParameter("marks", typeof(decimal));
    
            var joiningDateParameter = joiningDate.HasValue ?
                new ObjectParameter("joiningDate", joiningDate) :
                new ObjectParameter("joiningDate", typeof(System.DateTime));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTraineeInfoAddUpdate_Result>("spTraineeInfoAddUpdate", inductionIdParameter, applicantIdParameter, typeIdParameter, specialityIdParameter, hospitalIdParameter, marksParameter, joiningDateParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spTraineeInfoGetById_Result> spTraineeInfoGetById(Nullable<int> inductionId, Nullable<int> applicantId, Nullable<int> adminId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTraineeInfoGetById_Result>("spTraineeInfoGetById", inductionIdParameter, applicantIdParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spTraineeInfoStatusUpdate_Result> spTraineeInfoStatusUpdate(Nullable<int> inductionId, Nullable<int> applicantId, Nullable<int> statusId, Nullable<int> hospitalId, Nullable<int> hospitalIdTo, Nullable<int> adminId)
        {
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var hospitalIdToParameter = hospitalIdTo.HasValue ?
                new ObjectParameter("hospitalIdTo", hospitalIdTo) :
                new ObjectParameter("hospitalIdTo", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTraineeInfoStatusUpdate_Result>("spTraineeInfoStatusUpdate", inductionIdParameter, applicantIdParameter, statusIdParameter, hospitalIdParameter, hospitalIdToParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spTraineeSupervisorInfoGetById_Result> spTraineeSupervisorInfoGetById(Nullable<int> adminId)
        {
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTraineeSupervisorInfoGetById_Result>("spTraineeSupervisorInfoGetById", adminIdParameter);
        }
    
        public virtual ObjectResult<spUnitAddUpdate_Result> spUnitAddUpdate(Nullable<int> unitId, Nullable<int> hospitalId, Nullable<int> departmentId, string name, string code, Nullable<int> typeId, Nullable<bool> isActive, Nullable<int> adminId)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("unitId", unitId) :
                new ObjectParameter("unitId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUnitAddUpdate_Result>("spUnitAddUpdate", unitIdParameter, hospitalIdParameter, departmentIdParameter, nameParameter, codeParameter, typeIdParameter, isActiveParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spUserAddUpdate_Result> spUserAddUpdate(Nullable<int> userId, string firstName, string lastName, string emailId, string password, Nullable<int> typeId, Nullable<int> parentId, Nullable<int> departmentId, Nullable<int> designationId, Nullable<bool> isActive, Nullable<int> adminId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var designationIdParameter = designationId.HasValue ?
                new ObjectParameter("designationId", designationId) :
                new ObjectParameter("designationId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUserAddUpdate_Result>("spUserAddUpdate", userIdParameter, firstNameParameter, lastNameParameter, emailIdParameter, passwordParameter, typeIdParameter, parentIdParameter, departmentIdParameter, designationIdParameter, isActiveParameter, adminIdParameter);
        }
    
        public virtual ObjectResult<spUserChangePassword_Result> spUserChangePassword(Nullable<int> userId, string password, string passwordNew)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var passwordNewParameter = passwordNew != null ?
                new ObjectParameter("passwordNew", passwordNew) :
                new ObjectParameter("passwordNew", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUserChangePassword_Result>("spUserChangePassword", userIdParameter, passwordParameter, passwordNewParameter);
        }
    
        public virtual ObjectResult<spUserGetByType_Result> spUserGetByType(Nullable<int> typeId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUserGetByType_Result>("spUserGetByType", typeIdParameter);
        }
    
        public virtual int spUserLogsAdd(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUserLogsAdd", userIdParameter);
        }
    
        public virtual int spVerficationCheckListForDDL(Nullable<int> typeId, string reffIds, string condition)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            var reffIdsParameter = reffIds != null ?
                new ObjectParameter("reffIds", reffIds) :
                new ObjectParameter("reffIds", typeof(string));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spVerficationCheckListForDDL", typeIdParameter, reffIdsParameter, conditionParameter);
        }
    
        public virtual ObjectResult<spVfCheckApplicantAddUpdate_Result> spVfCheckApplicantAddUpdate(Nullable<int> projId, Nullable<int> inductionId, Nullable<int> applicantId, Nullable<int> vfcheckId, Nullable<bool> isActive, string comments, Nullable<bool> isSelect)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(int));
    
            var inductionIdParameter = inductionId.HasValue ?
                new ObjectParameter("inductionId", inductionId) :
                new ObjectParameter("inductionId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var vfcheckIdParameter = vfcheckId.HasValue ?
                new ObjectParameter("vfcheckId", vfcheckId) :
                new ObjectParameter("vfcheckId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("comments", comments) :
                new ObjectParameter("comments", typeof(string));
    
            var isSelectParameter = isSelect.HasValue ?
                new ObjectParameter("isSelect", isSelect) :
                new ObjectParameter("isSelect", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spVfCheckApplicantAddUpdate_Result>("spVfCheckApplicantAddUpdate", projIdParameter, inductionIdParameter, applicantIdParameter, vfcheckIdParameter, isActiveParameter, commentsParameter, isSelectParameter);
        }
    
        public virtual ObjectResult<spVoucherExport_Result> spVoucherExport(Nullable<int> countryTypeId, string applicantNo, string cnicNo, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> applicationStatusId, Nullable<int> voucherStatusId, string condition)
        {
            var countryTypeIdParameter = countryTypeId.HasValue ?
                new ObjectParameter("countryTypeId", countryTypeId) :
                new ObjectParameter("countryTypeId", typeof(int));
    
            var applicantNoParameter = applicantNo != null ?
                new ObjectParameter("applicantNo", applicantNo) :
                new ObjectParameter("applicantNo", typeof(string));
    
            var cnicNoParameter = cnicNo != null ?
                new ObjectParameter("cnicNo", cnicNo) :
                new ObjectParameter("cnicNo", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var applicationStatusIdParameter = applicationStatusId.HasValue ?
                new ObjectParameter("applicationStatusId", applicationStatusId) :
                new ObjectParameter("applicationStatusId", typeof(int));
    
            var voucherStatusIdParameter = voucherStatusId.HasValue ?
                new ObjectParameter("voucherStatusId", voucherStatusId) :
                new ObjectParameter("voucherStatusId", typeof(int));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spVoucherExport_Result>("spVoucherExport", countryTypeIdParameter, applicantNoParameter, cnicNoParameter, startDateParameter, endDateParameter, applicationStatusIdParameter, voucherStatusIdParameter, conditionParameter);
        }
    
        public virtual ObjectResult<spVoucherExportBank_Result> spVoucherExportBank(Nullable<int> top, Nullable<int> pageNum, string applicantNo, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string condition)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var applicantNoParameter = applicantNo != null ?
                new ObjectParameter("applicantNo", applicantNo) :
                new ObjectParameter("applicantNo", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spVoucherExportBank_Result>("spVoucherExportBank", topParameter, pageNumParameter, applicantNoParameter, startDateParameter, endDateParameter, conditionParameter);
        }
    
        public virtual ObjectResult<spVoucherGetList_Result> spVoucherGetList(Nullable<int> applicationStatusId, Nullable<int> countryType, string condition)
        {
            var applicationStatusIdParameter = applicationStatusId.HasValue ?
                new ObjectParameter("applicationStatusId", applicationStatusId) :
                new ObjectParameter("applicationStatusId", typeof(int));
    
            var countryTypeParameter = countryType.HasValue ?
                new ObjectParameter("countryType", countryType) :
                new ObjectParameter("countryType", typeof(int));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spVoucherGetList_Result>("spVoucherGetList", applicationStatusIdParameter, countryTypeParameter, conditionParameter);
        }
    
        public virtual ObjectResult<spVoucherSearch_Result> spVoucherSearch(Nullable<int> top, Nullable<int> pageNum, Nullable<int> countryTypeId, string applicantNo, string cnicNo, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> applicationStatusId, Nullable<int> voucherStatusId, string condition)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var countryTypeIdParameter = countryTypeId.HasValue ?
                new ObjectParameter("countryTypeId", countryTypeId) :
                new ObjectParameter("countryTypeId", typeof(int));
    
            var applicantNoParameter = applicantNo != null ?
                new ObjectParameter("applicantNo", applicantNo) :
                new ObjectParameter("applicantNo", typeof(string));
    
            var cnicNoParameter = cnicNo != null ?
                new ObjectParameter("cnicNo", cnicNo) :
                new ObjectParameter("cnicNo", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var applicationStatusIdParameter = applicationStatusId.HasValue ?
                new ObjectParameter("applicationStatusId", applicationStatusId) :
                new ObjectParameter("applicationStatusId", typeof(int));
    
            var voucherStatusIdParameter = voucherStatusId.HasValue ?
                new ObjectParameter("voucherStatusId", voucherStatusId) :
                new ObjectParameter("voucherStatusId", typeof(int));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spVoucherSearch_Result>("spVoucherSearch", topParameter, pageNumParameter, countryTypeIdParameter, applicantNoParameter, cnicNoParameter, startDateParameter, endDateParameter, applicationStatusIdParameter, voucherStatusIdParameter, conditionParameter);
        }
    
        public virtual ObjectResult<spVoucherSearchBank_Result> spVoucherSearchBank(Nullable<int> top, Nullable<int> pageNum, Nullable<int> applicantId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string condition)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spVoucherSearchBank_Result>("spVoucherSearchBank", topParameter, pageNumParameter, applicantIdParameter, startDateParameter, endDateParameter, conditionParameter);
        }
    
        public virtual ObjectResult<spVoucherSearchWithBank_Result> spVoucherSearchWithBank(Nullable<int> top, Nullable<int> pageNum, Nullable<int> statusId, Nullable<int> statusIdBank, string search)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var statusIdBankParameter = statusIdBank.HasValue ?
                new ObjectParameter("statusIdBank", statusIdBank) :
                new ObjectParameter("statusIdBank", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spVoucherSearchWithBank_Result>("spVoucherSearchWithBank", topParameter, pageNumParameter, statusIdParameter, statusIdBankParameter, searchParameter);
        }
    }
}
